<?xml version="1.0" encoding="utf-8"?>
<Operations>
    <Operation Name="Neg">
        <Summary>The neg operation.</Summary>
        <Flags>IntsAndFloats</Flags>
        <Op>-{Value0}</Op>
        <Rewriter>
            <Source>{Value0}.BasicValueType == BasicValueType.Int1</Source>
            <Target>
                CreateArithmetic(
                location,
                {Value0},
                UnaryArithmeticKind.Not)
            </Target>
        </Rewriter>
        <Velocity ReturnAsWarp32="false">
            <Velocity128>
                <Implementation>-{Value0}</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>
    <Operation Name="Not">
        <Summary>The logical not operation.</Summary>
        <Flags>BoolsAndInts</Flags>
        <BoolOp>!{Value0}</BoolOp>
        <Op>~{Value0}</Op>
        <!-- Check nested not operations -->
        <Rewriter Mode="CombineOperation" Type="UnaryArithmeticValue">
            <Source>{Value1}.Kind == UnaryArithmeticKind.Not</Source>
            <Target>{Value1}.Value</Target>
        </Rewriter>
        <!-- Propagate the not operator through binary operations -->
        <Rewriter Mode="CombineOperation" Type="BinaryArithmeticValue">
            <Source>
                BinaryArithmeticValue.TryInvertLogical({Value1}.Kind, out var _)
            </Source>
            <Target>InvertBinaryArithmetic({Location}, {Value1})</Target>
        </Rewriter>
        <!-- Check whether we can invert compare values -->
        <Rewriter Mode="CombineOperation" Type="CompareValue">
            <Source>true</Source>
            <Target>InvertCompareValue({Location}, {Value1})</Target>
        </Rewriter>
        <Velocity ReturnAsWarp32="false">
            <Velocity128>
                <Implementation>~{Value0}</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>
    <Operation Name="Abs">
        <Summary>The abs operation.</Summary>
        <Flags>IntsAndFloats</Flags>
        <Call>XMath.Abs</Call>
        <Rewriter>
            <Source>
                ({Flags} &amp; ArithmeticFlags.Unsigned) == ArithmeticFlags.Unsigned
            </Source>
            <Target>{Value0}</Target>
        </Rewriter>
        <Velocity>
            <Velocity128>
                <Implementation>Vector128.Abs({Value0})</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>
    <Operation Name="PopC">
        <Summary>The popcount operation.</Summary>
        <Flags>Ints</Flags>
        <Call>XMath.PopCount</Call>
        <Velocity ReturnAsWarp32="true">
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="CLZ">
        <Summary>The CLZ operation.</Summary>
        <Flags>Ints</Flags>
        <Call>XMath.LeadingZeroCount</Call>
        <Velocity ReturnAsWarp32="true">
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="CTZ">
        <Summary>The CTZ operation.</Summary>
        <Flags>Ints</Flags>
        <Call>XMath.TrailingZeroCount</Call>
        <Velocity ReturnAsWarp32="true">
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Rcp">
        <Summary>The reciprocal operation.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Rcp</Call>
        <Implementation>{Const1} / {Value0}</Implementation>
        <Velocity>
            <Velocity128>
                <Implementation>RcpImpl({Value0})</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>

    <Operation Name="IsNaN" IsPredicate="true">
        <Summary>The is-not-a-number operation.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.IsNaN</Call>
        <Implementation>{TypeName}.IsNaN({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="IsInf" IsPredicate="true">
        <Summary>The is-infinity operation.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.IsInfinity</Call>
        <Implementation>{TypeName}.IsInfinity({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="IsFin" IsPredicate="true">
        <Summary>The is-finite operation.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.IsFinite</Call>
        <Implementation>!IsNaN({Value0}) &amp;&amp; !IsInfinity({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>

    <Operation Name="Sqrt">
        <Summary>Computes sqrt(value).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Sqrt</Call>
        <Implementation>{MathType}.Sqrt({Value0})</Implementation>
        <Velocity>
            <Velocity128>
                <Implementation>Vector128.Sqrt({Value0})</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>
    <Operation Name="Rsqrt">
        <Summary>Computes 1/sqrt(value).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Rsqrt</Call>
        <Implementation>Rcp(Sqrt({Value0}))</Implementation>
        <Velocity>
            <Velocity128>
                <Implementation>RcpImpl(Vector128.Sqrt({Value0}))</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>

    <Operation Name="Asin">
        <Summary>Computes asin(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Asin</Call>
        <Implementation>{MathType}.Asin({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Sin">
        <Summary>Computes sin(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Sin</Call>
        <Implementation>{MathType}.Sin({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Asinh">
        <Summary>Computes asinh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Asinh</Call>
        <Implementation>{MathType}.Asinh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Sinh">
        <Summary>Computes sinh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Sinh</Call>
        <Implementation>{MathType}.Sinh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>

    <Operation Name="Acos">
        <Summary>Computes acos(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Acos</Call>
        <Implementation>{MathType}.Acos({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Cos">
        <Summary>Computes cos(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Cos</Call>
        <Implementation>{MathType}.Cos({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Acosh">
        <Summary>Computes acosh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Acosh</Call>
        <Implementation>{MathType}.Acosh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Cosh">
        <Summary>Computes cosh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Cosh</Call>
        <Implementation>{MathType}.Cosh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>

    <Operation Name="Tan">
        <Summary>Computes tan(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Tan</Call>
        <Implementation>{MathType}.Tan({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Tanh">
        <Summary>Computes tanh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Tanh</Call>
        <Implementation>{MathType}.Tanh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Atan">
        <Summary>Computes atan(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Atan</Call>
        <Implementation>{MathType}.Atan({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Atanh">
        <Summary>Computes atanh(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Atanh</Call>
        <Implementation>{MathType}.Atanh({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>

    <Operation Name="Exp">
        <Summary>Computes exp(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Exp</Call>
        <Implementation>{MathType}.Exp({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Exp2">
        <Summary>Computes 2^x.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Exp2</Call>
        <Implementation>{MathType}.Pow({Const2}, {Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>

    <Operation Name="Floor">
        <Summary>Computes floor(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Floor</Call>
        <Implementation>{MathType}.Floor({Value0})</Implementation>
        <Velocity>
            <Velocity128>
                <Implementation>Vector128.Floor({Value0})</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>
    <Operation Name="Ceiling">
        <Summary>Computes ceil(x).</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Ceiling</Call>
        <Implementation>{MathType}.Ceiling({Value0})</Implementation>
        <Velocity>
            <Velocity128>
                <Implementation>Vector128.Ceiling({Value0})</Implementation>
            </Velocity128>
        </Velocity>
    </Operation>

    <Operation Name="Log">
        <Summary>Computes log(x) to base e.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Log</Call>
        <Implementation>{MathType}.Log({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Log2">
        <Summary>Computes log(x) to base 2.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Log2</Call>
        <Implementation>{MathType}.Log({Value0}, {Const2})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
    <Operation Name="Log10">
        <Summary>Computes log(x) to base 10.</Summary>
        <Flags>Floats</Flags>
        <Call>XMath.Log10</Call>
        <Implementation>{MathType}.Log10({Value0})</Implementation>
        <Velocity>
            <Velocity128 SoftwareEmulation="true" />
        </Velocity>
    </Operation>
</Operations>