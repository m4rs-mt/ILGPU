// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CompareOperations.tt/CompareOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var operations = new []
    {
        new { Name = "Equal", BoolSupport = true, Prefix = "", Operation = " == ", Suffix = "" },
        new { Name = "NotEqual", BoolSupport = true, Prefix = "", Operation = " != ", Suffix = "" },
        new { Name = "LessThan", BoolSupport = false, Prefix = "", Operation = " < ", Suffix = "" },
        new { Name = "LessEqual", BoolSupport = false, Prefix = "", Operation = " <= ", Suffix = "" },
        new { Name = "GreaterThan", BoolSupport = false, Prefix = "", Operation = " > ", Suffix = "" },
        new { Name = "GreaterEqual", BoolSupport = false, Prefix = "", Operation = " >= ", Suffix = "" },
    };
#>

using ILGPU.IR.Values;
using ILGPU.Resources;
using System;
using System.Diagnostics.CodeAnalysis;

// disable: max_line_length
#pragma warning disable IDE0046 // Convert to conditional expression
#pragma warning disable IDE0047 // Remove unnecessary parentheses
#pragma warning disable IDE0066 // Convert switch statement to expression

namespace ILGPU.IR.Construction
{
    partial class IRBuilder
    {
        private ValueReference CompareFoldConstants(
            Location location,
            PrimitiveValue left,
            PrimitiveValue right,
            CompareKind kind,
            CompareFlags flags)
        {
            switch (kind)
            {
<#    foreach (var operation in operations) { #>
                case CompareKind.<#= operation.Name #>:
                    return CompareFoldConstants_<#= operation.Name #>(location, left, right, kind, flags);
<#    } #>
                default:
                    throw location.GetArgumentException(nameof(kind));
            }
        }

<#    foreach (var operation in operations) { #>
        private ValueReference CompareFoldConstants_<#= operation.Name #>(
            Location location,
            PrimitiveValue left,
            PrimitiveValue right,
            CompareKind kind,
            CompareFlags flags)
        {
            var isUnsigned = (flags & CompareFlags.UnsignedOrUnordered) == CompareFlags.UnsignedOrUnordered;
            switch (left.BasicValueType)
            {
                case BasicValueType.Float16:
                    return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Float16Value<#= operation.Operation #>right.Float16Value<#= operation.Suffix #>);
                case BasicValueType.Float32:
                    return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Float32Value<#= operation.Operation #>right.Float32Value<#= operation.Suffix #>);
                case BasicValueType.Float64:
                    return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Float64Value<#= operation.Operation #>right.Float64Value<#= operation.Suffix #>);
<#          if (operation.BoolSupport) { #>
                case BasicValueType.Int1:
                    return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Int1Value<#= operation.Operation #>right.Int1Value<#= operation.Suffix #>);
<#          } #>
                case BasicValueType.Int8:
                    if (isUnsigned)
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.UInt8Value<#= operation.Operation #>right.UInt8Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Int8Value<#= operation.Operation #>right.Int8Value<#= operation.Suffix #>);
                case BasicValueType.Int16:
                    if (isUnsigned)
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.UInt16Value<#= operation.Operation #>right.UInt16Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Int16Value<#= operation.Operation #>right.Int16Value<#= operation.Suffix #>);
                case BasicValueType.Int32:
                    if (isUnsigned)
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.UInt32Value<#= operation.Operation #>right.UInt32Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Int32Value<#= operation.Operation #>right.Int32Value<#= operation.Suffix #>);
                case BasicValueType.Int64:
                    if (isUnsigned)
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.UInt64Value<#= operation.Operation #>right.UInt64Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(location, <#= operation.Prefix #>left.Int64Value<#= operation.Operation #>right.Int64Value<#= operation.Suffix #>);
            }
            throw location.GetNotSupportedException(
                ErrorMessages.NotSupportedCompareArgumentType,
                left.BasicValueType);
        }

<#    } #>
    }
}

#pragma warning restore IDE0066 // Convert switch statement to expression
#pragma warning restore IDE0046 // Convert to conditional expression
#pragma warning restore IDE0047 // Remove unnecessary parentheses