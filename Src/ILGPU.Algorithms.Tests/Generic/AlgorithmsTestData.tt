// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: AlgorithmsTestData.tt/AlgorithmsTestData.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Algorithms.RadixSortOperations;
using ILGPU.Algorithms.ScanReduceOperations;
using System.Numerics;
using System.Runtime.CompilerServices;
using Xunit.Abstractions;

namespace ILGPU.Algorithms.Tests
{
    public static class AlgorithmsTestData
    {
        public static AlgorithmsTestData<T> Create<T>(T data) =>
            new AlgorithmsTestData<T>(data);
    }

    public class AlgorithmsTestData<T> : IXunitSerializable
    {
        public AlgorithmsTestData() { }

        public AlgorithmsTestData(T value)
        {
            Value = value;
        }
        public T Value { get; private set; }

        public void Deserialize(IXunitSerializationInfo info)
        {
            Value = info.GetValue<T>(nameof(Value));
        }

        public void Serialize(IXunitSerializationInfo info)
        {
            info.AddValue(nameof(Value), Value);
        }

        public override string ToString() => Value.ToString();
    }

    #region Xunit Sequencer Structures

    public interface ITestSequencer<T> : IXunitSerializable
    {
        public T[] ComputeSequence(T start, T stepSize, int length);

        public T[] ComputeInvertedSequence(T start, T stepSize, int length);
    }

<#
    var types = AtomicNumericTypes;
    foreach (var type in types) {
#>
    internal readonly struct <#= type.Name #>TestSequencer
        : ITestSequencer<<#= type.Type #>>
    {
        public <#= type.Type #>[] ComputeSequence(
            <#= type.Type #> start,
            <#= type.Type #> stepSize,
            int length)
        {
            <#= type.Type #>[] sequence = new <#= type.Type #>[length];
            sequence[0] = start;
            for (int i = 1; i < length; ++i)
                sequence[i] = sequence[i-1] + stepSize;
            return sequence;
        }

        public <#= type.Type #>[] ComputeInvertedSequence(
            <#= type.Type #> start,
            <#= type.Type #> stepSize,
            int length)
        {
            <#= type.Type #>[] sequence = new <#= type.Type #>[length];
            sequence[length-1] = start;
            for (int i = length-2; i >= 0; --i)
                sequence[i] = sequence[i+1] + stepSize;
            return sequence;
        }

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

<#
    }
#>
    internal readonly struct Index1TestSequencer : ITestSequencer<Index1D>
    {
        public Index1D[] ComputeSequence(Index1D start, Index1D stepSize, int length)
        {
            Index1D[] sequence = new Index1D[length];
            sequence[0] = start;
            for (int i = 1; i < length; ++i)
                sequence[i] = sequence[i-1] + stepSize;
            return sequence;
        }

        public Index1D[] ComputeInvertedSequence(
            Index1D start,
            Index1D stepSize,
            int length)
        {
            Index1D[] sequence = new Index1D[length];
            sequence[length-1] = start;
            for (int i = length-2; i >= 0; --i)
                sequence[i] = sequence[i+1] + stepSize;
            return sequence;
        }

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    #endregion

    #region Xunit ScanReduceOperation Structures

<#
    foreach (var type in types) {
        foreach (var reduceType in new[] { "Add", "Min", "Max" }) {
#>
    internal readonly struct Xunit<#= reduceType #><#= type.Name #>
        : IScanReduceOperation<<#= type.Type #>>, IXunitSerializable
    {
        public string CLCommand =>
            default(<#= reduceType #><#= type.Name #>).CLCommand;

        public <#= type.Type #> Identity =>
            default(<#= reduceType #><#= type.Name #>).Identity;

        public <#= type.Type #> Apply(<#=type.Type#> first, <#=type.Type#> second) =>
            default(<#= reduceType #><#= type.Name #>).Apply(first, second);

        public void AtomicApply(ref <#=type.Type#> target, <#=type.Type#> value) =>
            default(<#= reduceType #><#= type.Name #>).AtomicApply(ref target, value);

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
        }
    }
#>

    #endregion

    #region Xunit Transformer Structures

    internal readonly struct IntToLongTransformer
        : ITransformer<int, long>, IXunitSerializable
    {
        public long Transform(int value) => value;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct UIntToULongTransformer
        : ITransformer<uint, ulong>, IXunitSerializable
    {
        public ulong Transform(uint value) => value;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct IntToNegIntTransformer
        : ITransformer<int, int>, IXunitSerializable
    {
        public int Transform(int value) => -value;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct UInt32ToBitCompInt32Transformer
        : ITransformer<uint, int>, IXunitSerializable
    {
        public int Transform(uint value) => (int)~value;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct UInt64ToBitCompInt64Transformer
        : ITransformer<ulong, long>, IXunitSerializable
    {
        public long Transform(ulong value) => (long)~value;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

<#  
    foreach (var type in types) {
#>
    internal readonly struct <#= type.Name #>Mul2
        : ITransformer<<#= type.Type #>, <#= type.Type #>>, IXunitSerializable
    {
        public <#= type.Type #> Transform(<#= type.Type #> value) => value * 2;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
    }
#>

<#  
    foreach (var type in types) {
#>
    internal readonly struct Index1To<#= type.Name #>Transformer 
        : ITransformer<Index1D, <#= type.Type #>>, IXunitSerializable
    {
<#
        if(type.IsUnsignedInt) {
#>
        public <#= type.Type #> Transform(Index1D value) => (<#= type.Type #>)value;
<#
        }else{
#>
        public <#= type.Type #> Transform(Index1D value) => value;
<#
        }
#>

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
    }
#>

    #endregion

    #region Xunit RadixSortOperations Structures

<#  
    foreach (var type in AtomicNumericTypes) { 
#>
    internal readonly struct XunitAscending<#=type.Name #>
        : IRadixSortOperation<<#= type.Type #>>, IXunitSerializable
    {
        public int NumBits =>
            default(Ascending<#= type.Name #>).NumBits;

        public <#= type.Type #> DefaultValue =>
            default(Ascending<#= type.Name #>).DefaultValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int ExtractRadixBits(<#= type.Type #> value, int shift, int bitMask) =>
            default(Ascending<#=type.Name #>).ExtractRadixBits(value, shift, bitMask);

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct XunitDescending<#= type.Name #>
        : IRadixSortOperation<<#= type.Type #>>, IXunitSerializable
    {
        public int NumBits =>
            default(Descending<#= type.Name #>).NumBits;

        public <#= type.Type #> DefaultValue =>
            default(Descending<#= type.Name #>).DefaultValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int ExtractRadixBits(<#= type.Type #> value, int shift, int bitMask) =>
            default(Descending<#=type.Name #>).ExtractRadixBits(value, shift, bitMask);

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

<#  
    }
#>
    #endregion

    #region Xunit Vectors

    public interface IVector<T> : IXunitSerializable
        where T : struct
    {
        public T GetVector();
    }
<#
    char[] vectorDim = { 'X', 'Y', 'Z', 'W' };
    for (int i = 2; i <= 4; ++i) {
#>

    #region Vector<#= i #>

    internal readonly struct Vector<#= i #>Zero : IVector<Vector<#= i #>>
    {
        public Vector<#= i #> GetVector() => Vector<#= i #>.Zero;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }

    internal readonly struct Vector<#= i #>One : IVector<Vector<#= i #>>
    {
        public Vector<#= i #> GetVector() => Vector<#= i #>.One;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
        for (int j = 0; j < i; ++j) {
#>

    internal readonly struct Vector<#= i #>Unit<#= vectorDim[j] #>
        : IVector<Vector<#= i #>>
    {
        public Vector<#= i #> GetVector() => Vector<#= i #>.Unit<#= vectorDim[j] #>;

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
        }
#>

    #endregion
<#
    }
#>

    #endregion

    #region VectorSequencer
<#
    for (int i = 2; i <= 4; ++i) {
#>

    internal readonly struct Vector<#= i #>DSequencer : ITestSequencer<Vector<#= i #>>
    {
        public Vector<#= i #>[] ComputeSequence(
            Vector<#= i #> start,
            Vector<#= i #> stepSize,
            int length)
        {
            Vector<#= i #>[] sequence = new Vector<#= i #>[length];
            sequence[0] = start;
            for (int i = 1; i < length; ++i)
                sequence[i] = sequence[i - 1] + stepSize;
            return sequence;
        }

        public Vector<#= i #>[] ComputeInvertedSequence(
            Vector<#= i #> start,
            Vector<#= i #> stepSize,
            int length)
        {
            Vector<#= i #>[] sequence = new Vector<#= i #>[length];
            sequence[length - 1] = start;
            for (int i = length - 2; i >= 0; --i)
                sequence[i] = sequence[i + 1] + stepSize;
            return sequence;
        }

        public void Deserialize(IXunitSerializationInfo info) { }

        public void Serialize(IXunitSerializationInfo info) { }
    }
<#
    }
#>

    #endregion
}