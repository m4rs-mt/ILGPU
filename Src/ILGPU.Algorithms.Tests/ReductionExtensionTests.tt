// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ReductionExtensionTests.tt/ReductionExtensionTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Algorithms.ScanReduceOperations;
using ILGPU.Runtime;
using ILGPU.Tests;
using System;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class ReductionExtensionTests : TestBase
    {
        protected ReductionExtensionTests(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<#
        var types = AtomicNumericTypes;
#>
        #region MemberData

        public static TheoryData<object, object, object, object, object, object>
            AscendingTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
            // Type, IScanReduceOperation, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var srOp in ScanReduceOperations) {
                foreach (var size in ArraySizes) {
                    if (type.Type == "float" && size > 1000) { continue; }
#>
            { default(<#= type.Type #>), default(Xunit<#= srOp.Name #><#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
                }
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, object>
            DescendingTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
<#
        foreach (var type in types) {
            foreach (var srOp in ScanReduceOperations) {
                foreach (var size in ArraySizes) {
                    if (type.Type == "float" && size > 1000) { continue; }
#>
            { default(<#= type.Type #>), default(Xunit<#= srOp.Name #><#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
                }
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, object>
            ConstantTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
<#
        foreach (var type in types) {
            foreach (var srOp in ScanReduceOperations) {
                foreach (var size in ArraySizes) {
                    if (type.Type == "float" && size > 1000) { continue; }
#>
            { default(<#= type.Type #>), default(Xunit<#= srOp.Name #><#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 0, <#= size #> },
            { default(<#= type.Type #>), default(Xunit<#= srOp.Name #><#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 1, 0, <#= size #> },
<#
                    if(type.IsUnsignedInt) { continue; }
#>
            { default(<#= type.Type #>), default(Xunit<#= srOp.Name #><#= type.Name #>),
                default(<#= type.Name #>TestSequencer), -1, 0, <#= size #> },
<#
                }
            }
        }
#>
        };

        #endregion

<#
        SortingInformation[] sortings =
        {
            new SortingInformation("Ascending", SequenceSortingKind.Ascending),
            new SortingInformation("Constant", SequenceSortingKind.Constant),
            new SortingInformation("Descending", SequenceSortingKind.Descending),
        };

        foreach (var sorting in sortings) {
#>
        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void Reduce<#= sorting.Name #>SeqWithMemoryCache<
            T,
            TReduceFunc,
            TSequencer>(
            T _,
            TReduceFunc func,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TReduceFunc : struct, IScanReduceOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

<#
            if (sorting.IsDescendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);

            T actual = Accelerator.Reduce<T, TReduceFunc>(stream, input.View);
            stream.Synchronize();
            T expected = CalcValue(sequence, func.Apply);

            Assert.Equal(expected, actual);
        }

        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void Reduce<#= sorting.Name #>SeqWithOutputBuffer<
            T,
            TReduceFunc,
            TSequencer>(
            T _,
            TReduceFunc func,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TReduceFunc : struct, IScanReduceOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var output = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();
            
<#
            if (sorting.IsDescendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);

            Accelerator.Reduce<T, TReduceFunc>(stream, input.View, output.View);
            stream.Synchronize();

            T[] expected = new T[1];
            expected[0] = CalcValue(sequence, func.Apply);

            Verify(output.View, expected, 0, 1);
        }
<#
        }
#>

        #region Helper Methods

        private static T CalcValue<T>(T[] values, Func<T, T, T> func)
            where T : unmanaged
        {
            T result = values[0];
            for (int i = 1, e = values.Length; i < e; ++i)
                result = func(result, values[i]);
            return result;
        }

        #endregion
    }
}

#pragma warning restore xUnit1026 // Theory methods should use all of their parameters