// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: RandomTests.tt/RandomTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var rngs = new string[]
{
    "XorShift32",
    "XorShift64Star",
    "XorShift128",
    "XorShift128Plus"
};
var randomTypes = new string[]
{
    "int",
    "long",
    "float",
    "double"
};
#>

using ILGPU.Algorithms.Random;
using ILGPU.Runtime;
using ILGPU.Tests;
using System.Collections.Generic;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class RandomTests : TestBase
    {
        protected RandomTests(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

        public static TheoryData<object, object, object> RandomTestData =>
            new TheoryData<object, object, object>
        {
<# foreach (var rng in rngs) { #>
            { default(<#= rng #>), 1024, 16 },
            { default(<#= rng #>), 3, 33 },
            { default(<#= rng #>), 37, 2047 },
            { default(<#= rng #>), 13, 4097 },

<# } #>
        };

<# foreach (var randomType in randomTypes) { #>
        [Theory]
        [MemberData(nameof(RandomTestData))]
        public void RandomFill_<#= randomType #><TRandomProvider>(
            TRandomProvider _,
            int maxNumWarps,
            int size)
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
        {
            using var buffer = Accelerator.Allocate1D<<#= randomType #>>(size);
            buffer.MemSetToZero();
            Accelerator.Synchronize();

            var random = new System.Random(42);
            using var rng = Accelerator.CreateRNG<TRandomProvider>(
                random,
                maxNumWarps);
            rng.FillUniform(buffer.View);
            Accelerator.Synchronize();

            // The current RNG implementation does not yield zeros when using the
            // initial RNG seed 42. Moreover, it should yield more than length / 2
            // number of different values
            var data = buffer.GetAsArray1D();
            var dataSet = new HashSet<<#= randomType #>>(data);
            Assert.True(dataSet.Count > data.Length / 2);
        }

<# } #>
    }
}