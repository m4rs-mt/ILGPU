// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: RadixSortExtensionTests.tt/RadixSortExtensionTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Algorithms.RadixSortOperations;
using ILGPU.Runtime;
using ILGPU.Tests;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class RadixSortExtensionTests : TestBase
    {
        protected RadixSortExtensionTests(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

        #region MemberData

        public static TheoryData<object, object, object, object, object, object>
            AscendingTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
            // Type, RadixSortOperation, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        var types = AtomicNumericTypes;
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
            { default(<#= type.Type #>), default(XunitAscending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object>
            AscendingPairsTestData =>
            new TheoryData<object, object, object, object>
        {
            // Type, RadixSortOperation, Sequencer, Start of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in ArraySizes.Skip(7)) {
#>
            { default(<#= type.Type #>), default(XunitAscending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, object>
            DescendingTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
            // Type, RadixSortOperation, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
            { default(<#= type.Type #>), default(XunitDescending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object>
            DescendingPairsTestData =>
            new TheoryData<object, object, object, object>
        {
            // Type, RadixSortOperation, Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in ArraySizes.Skip(7)) {
#>
            { default(<#= type.Type #>), default(XunitDescending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, object>
            ConstantTestData =>
            new TheoryData<object, object, object, object, object, object>
        {
            // Type, RadixSortOperation, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
            { default(<#= type.Type #>), default(XunitAscending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 0, 0, <#= size #> },
            { default(<#= type.Type #>), default(XunitAscending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), 1, 0, <#= size #> },
<#
            if (type.IsUnsignedInt) { continue; }
#>
            { default(<#= type.Type #>), default(XunitAscending<#= type.Name #>),
                default(<#= type.Name #>TestSequencer), -1, 0, <#= size #> },
<#
            }
        }
#>
        };

        #endregion

<#
        SortingInformation[] sortings =
        {
            new SortingInformation("Ascending", SequenceSortingKind.Ascending),
            new SortingInformation("Descending", SequenceSortingKind.Descending),
        };

        foreach (var sorting in sortings) {
#>
        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void RadixWorstCase<#= sorting.Name #><T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

<#
            if (sorting.IsAscendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
            var expected = sequencer.ComputeSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
            var expected = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);

            var radixSort = Accelerator.CreateRadixSort<
                T,
                Stride1D.Dense,
                TRadixSortOp>();
            var tempMemSize =
                Accelerator.ComputeRadixSortTempStorageSize<T, TRadixSortOp>(length);
            using var tmpBuffer = Accelerator.Allocate1D<int>(tempMemSize);

            radixSort(stream, input.View, tmpBuffer.View);
            stream.Synchronize();

            Verify(input.View, expected);
        }

        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void RadixBestCase<#= sorting.Name #><T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

<#
            if (sorting.IsDescendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);

            var radixSort = Accelerator.CreateRadixSort<
                T,
                Stride1D.Dense,
                TRadixSortOp>();
            var tempMemSize =
                Accelerator.ComputeRadixSortTempStorageSize<T, TRadixSortOp>(length);
            using var tmpBuffer = Accelerator.Allocate1D<int>(tempMemSize);

            radixSort(stream, input.View, tmpBuffer.View);
            stream.Synchronize();

            Verify(input.View, sequence);
        }

        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void RadixProviderWorstCase<#= sorting.Name #><
            T,
            TRadixSortOp,
            TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

<#
            if (sorting.IsAscendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
            var expected = sequencer.ComputeSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
            var expected = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);
            
            using var radixSortProvider =
                Accelerator.CreateRadixSortProvider<T, Stride1D.Dense, TRadixSortOp>(
                length);
            var radixSortUsingSortProvider =
                radixSortProvider.CreateRadixSort<T, Stride1D.Dense, TRadixSortOp>();

            radixSortUsingSortProvider(stream, input.View);
            stream.Synchronize();

            Verify(input.View, expected);
        }

        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void RadixProviderBestCase<#= sorting.Name #><T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

<#
            if (sorting.IsDescendingSorting) {
#>
            var sequence = sequencer.ComputeInvertedSequence(start, stepSize, length);
<#
            } else {
#>
            var sequence = sequencer.ComputeSequence(start, stepSize, length);
<#
            }
#>
            input.CopyFromCPU(stream, sequence);
            
            using var radixSortProvider =
                Accelerator.CreateRadixSortProvider<T, Stride1D.Dense, TRadixSortOp>(
                length);
            var radixSortUsingSortProvider =
                radixSortProvider.CreateRadixSort<T, Stride1D.Dense, TRadixSortOp>();

            radixSortUsingSortProvider(stream, input.View);
            stream.Synchronize();

            Verify(input.View, sequence);
        }

        [Theory]
        [MemberData(nameof(<#= sorting.Name #>TestData))]
        public void RadixSortPairs<#= sorting.Name #><T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var keys = Accelerator.Allocate1D<T>(length);
            using var values = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

            var sourceSequence = sequencer.ComputeSequence(start, stepSize, length);
            var targetSequence = sequencer.ComputeInvertedSequence(
                start,
                stepSize,
                length);

<#      if (!sorting.IsDescendingSorting) { #>
            Util.Utilities.Swap(ref sourceSequence, ref targetSequence);
<#      } #>

            keys.CopyFromCPU(stream, sourceSequence);
            values.CopyFromCPU(stream, sourceSequence);

            var radixSort = Accelerator.CreateRadixSortPairs<
                T,
                Stride1D.Dense,
                T,
                Stride1D.Dense,
                TRadixSortOp>();
            var tempMemSize =
                Accelerator.ComputeRadixSortPairsTempStorageSize<T, T, TRadixSortOp>(
                    length);
            using var tmpBuffer = Accelerator.Allocate1D<int>(tempMemSize);

            radixSort(stream, keys.View, values.View, tmpBuffer.View);
            stream.Synchronize();

            Verify(keys.View, targetSequence);
            Verify(values.View, targetSequence);
        }

<#
        }
#>
        [Theory]
        [MemberData(nameof(ConstantTestData))]
        public void RadixConstCase<T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

            var sequence = sequencer.ComputeSequence(start, stepSize, length);
            input.CopyFromCPU(stream, sequence);

            var radixSort = Accelerator.CreateRadixSort<
                T,
                Stride1D.Dense,
                TRadixSortOp>();
            var tempMemSize =
                Accelerator.ComputeRadixSortTempStorageSize<T, TRadixSortOp>(length);
            using var tmpBuffer = Accelerator.Allocate1D<int>(tempMemSize);

            radixSort(stream, input.View, tmpBuffer.View);
            stream.Synchronize();

            Verify(input.View, sequence);
        }

        [Theory]
        [MemberData(nameof(ConstantTestData))]
        public void RadixProviderConstCase<T, TRadixSortOp, TSequencer>(
            T _,
            TRadixSortOp radixSortOp,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRadixSortOp : struct, IRadixSortOperation<T>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

            var sequence = sequencer.ComputeSequence(start, stepSize, length);
            input.CopyFromCPU(stream, sequence);

            using var radixSortProvider =
                Accelerator.CreateRadixSortProvider<T, Stride1D.Dense, TRadixSortOp>(
                length);
            var radixSortUsingSortProvider =
                radixSortProvider.CreateRadixSort<T, Stride1D.Dense, TRadixSortOp>();

            radixSortUsingSortProvider(stream, input.View);
            stream.Synchronize();

            Verify(input.View, sequence);
        }
    }
}