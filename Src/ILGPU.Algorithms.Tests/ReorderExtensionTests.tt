// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ReorderExtensionTests.tt/ReorderExtensionTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Runtime;
using ILGPU.Tests;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class ReorderExtensionTests : TestBase
    {
        protected ReorderExtensionTests(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }
<#
        var types = AtomicNumericTypes;
#>

        #region MemberData

        public static TheoryData<object, object, object, object, object, object>
            ReorderTestData =>
            new TheoryData<object, object, object, object, object, object>
            {
                // Type, ITransformer, Sequencer, Start of Sequencer,
                // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
                { default(<#= type.Type #>), default(<#= type.Name #>Mul2),
                    default(<#= type.Name #>TestSequencer), 0, 0, <#= size #>},
                { default(<#= type.Type #>), default(<#= type.Name #>Mul2),
                    default(<#= type.Name #>TestSequencer), 1, 0, <#= size #>},
                { default(<#= type.Type #>), default(<#= type.Name #>Mul2),
                    default(<#= type.Name #>TestSequencer), 0, 1, <#= size #>},
<#
                if(type.IsUnsignedInt) { continue; }
#>
                { default(<#= type.Type #>), default(<#= type.Name #>Mul2),
                    default(<#= type.Name #>TestSequencer), -1, 0, <#= size #>},
                { default(<#= type.Type #>), default(<#= type.Name #>Mul2),
                    default(<#= type.Name #>TestSequencer), 0, -1, <#= size #>},
<#
            }
        }
#>
            };

        public static TheoryData<object, object, object, object, object, object, object>
            ReorderTransformSourceTargetTestData =>
            new TheoryData<object, object, object, object, object, object, object>
            {
                // Type1, Type2, ITransformer, Sequencer, Start of Sequencer,
                // StepSize of Sequencer, BufferLength
<#
        foreach (var size in ArraySizes) {
#>
                { default(int), default(long), default(IntToLongTransformer),
                    default(Int32TestSequencer), 0, 0, <#= size #>},
                { default(int), default(long), default(IntToLongTransformer),
                    default(Int32TestSequencer), 1, 0, <#= size #>},
                { default(int), default(long), default(IntToLongTransformer),
                    default(Int32TestSequencer), -1, 0, <#= size #>},
                { default(int), default(long), default(IntToLongTransformer),
                    default(Int32TestSequencer), 0, 1, <#= size #>},
                { default(int), default(long), default(IntToLongTransformer),
                    default(Int32TestSequencer), 0, -1, <#= size #>},

                { default(uint), default(ulong), default(UIntToULongTransformer),
                    default(UInt32TestSequencer), 0, 0, <#= size #>},
                { default(uint), default(ulong), default(UIntToULongTransformer),
                    default(UInt32TestSequencer), 1, 0, <#= size #>},
                { default(uint), default(ulong), default(UIntToULongTransformer),
                    default(UInt32TestSequencer), 0, 1, <#= size #>},

                { default(uint), default(int), default(UInt32ToBitCompInt32Transformer),
                    default(UInt32TestSequencer), 0, 0, <#= size #>},
                { default(uint), default(int), default(UInt32ToBitCompInt32Transformer),
                    default(UInt32TestSequencer), 1, 0, <#= size #>},
                { default(uint), default(int), default(UInt32ToBitCompInt32Transformer),
                    default(UInt32TestSequencer), 0, 1, <#= size #>},

                { default(ulong), default(long),
                    default(UInt64ToBitCompInt64Transformer),
                    default(UInt64TestSequencer), 0, 0, <#= size #>},
                { default(ulong), default(long),
                    default(UInt64ToBitCompInt64Transformer),
                    default(UInt64TestSequencer), 1, 0, <#= size #>},
                { default(ulong), default(long),
                    default(UInt64ToBitCompInt64Transformer),
                    default(UInt64TestSequencer), 0, 1, <#= size #>},

<#
        }
#>
            };

        #endregion

        [Theory]
        [MemberData(nameof(ReorderTestData))]
        public void ReorderReverse<T, TTransform, TSequence>
            (T _,
            TTransform transformer,
            TSequence sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TSequence : struct, ITestSequencer<T>
            where TTransform : struct, ITransformer<T, T>
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate1D<T>(length);
            using var reorder = Accelerator.Allocate1D<Index1D>(length);
            using var output = Accelerator.Allocate1D<T>(length);

            var inputSeq = sequencer.ComputeSequence(start, stepSize, length);
            var indexSequencer = new Index1TestSequencer();
            var reorderSeq = indexSequencer.ComputeSequence(length - 1, -1, length);

            input.CopyFromCPU(stream, inputSeq);
            reorder.CopyFromCPU(stream, reorderSeq);

            Accelerator.Reorder<T>(stream, input.View, output.View, reorder.View);
            stream.Synchronize();

            Verify(
                output.View,
                CalcValues<T, T, IdentityTransformer<T>>(
                    inputSeq,
                    reorderSeq,
                    new IdentityTransformer<T>()));
        }

        [Theory]
        [MemberData(nameof(ReorderTestData))]
        public void CreateReorderMul2TransformerReverse<T, TTransform, TSequence>
            (T _,
            TTransform transformer,
            TSequence sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TSequence : struct, ITestSequencer<T>
            where TTransform : struct, ITransformer<T, T>
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate1D<T>(length);
            using var reorder = Accelerator.Allocate1D<Index1D>(length);
            using var output = Accelerator.Allocate1D<T>(length);

            var inputSeq = sequencer.ComputeSequence(start, stepSize, length);
            var indexSequencer = new Index1TestSequencer();
            var reorderSeq = indexSequencer.ComputeSequence(length - 1, -1, length);

            input.CopyFromCPU(stream, inputSeq);
            reorder.CopyFromCPU(stream, reorderSeq);

            var reTrans = Accelerator.CreateReorderTransformer<T, T, TTransform>();
            reTrans(
                stream,
                input.View,
                output.View,
                reorder.View,
                transformer);
            stream.Synchronize();

            Verify(
                output.View,
                CalcValues<T, T, TTransform>( inputSeq, reorderSeq, transformer));
        }

        [Theory]
        [MemberData(nameof(ReorderTestData))]
        public void ReorderMul2TransformerReverse<T, TTransform, TSequence>
            (T _,
            TTransform transformer,
            TSequence sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TSequence : struct, ITestSequencer<T>
            where TTransform : struct, ITransformer<T, T>
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate1D<T>(length);
            using var reorder = Accelerator.Allocate1D<Index1D>(length);
            using var output = Accelerator.Allocate1D<T>(length);

            var inputSeq = sequencer.ComputeSequence(start, stepSize, length);
            var indexSequencer = new Index1TestSequencer();
            var reorderSeq = indexSequencer.ComputeSequence(length - 1, -1, length);

            input.CopyFromCPU(stream, inputSeq);
            reorder.CopyFromCPU(stream, reorderSeq);

            Accelerator.ReorderTransform<T, TTransform>(
                stream,
                input.View,
                output.View,
                reorder.View,
                transformer);
            stream.Synchronize();

            Verify(
                output.View,
                CalcValues<T, T, TTransform>(inputSeq, reorderSeq, transformer));
        }

        [Theory]
        [MemberData(nameof(ReorderTransformSourceTargetTestData))]
        public void ReorderSourceTargetTransformerReverse<
            TSource,
            TTarget,
            TTransform,
            TSequence>(
            TSource source,
            TTarget target,
            TTransform transformer,
            TSequence sequencer,
            TSource start,
            TSource stepSize,
            int length)
            where TSource : unmanaged
            where TTarget : unmanaged
            where TSequence : struct, ITestSequencer<TSource>
            where TTransform : struct, ITransformer<TSource, TTarget>
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate1D<TSource>(length);
            using var reorder = Accelerator.Allocate1D<Index1D>(length);
            using var output = Accelerator.Allocate1D<TTarget>(length);

            var inputSeq = sequencer.ComputeSequence(start, stepSize, length);
            var indexSequencer = new Index1TestSequencer();
            var reorderSeq = indexSequencer.ComputeSequence(length - 1, -1, length);

            input.CopyFromCPU(stream, inputSeq);
            reorder.CopyFromCPU(stream, reorderSeq);

            Accelerator.ReorderTransform<TSource, TTarget, TTransform>(
                stream,
                input.View,
                output.View,
                reorder.View,
                transformer);
            stream.Synchronize();

            Verify(
                output.View,
                CalcValues<TSource, TTarget, TTransform>(
                    inputSeq,
                    reorderSeq,
                    transformer));
        }

        #region Helper Method

        private static TTarget[] CalcValues<TSource, TTarget, TTransform>(
            TSource[] input,
            Index1D[] order,
            TTransform transform)
            where TSource : unmanaged
            where TTarget : unmanaged
            where TTransform : struct, ITransformer<TSource, TTarget>
        {
            TTarget[] result = new TTarget[input.Length];

            for (int i = 0, e = input.Length; i < e; ++i)
                result[order[i]] = transform.Transform(input[i]);
            return result;
        }

        #endregion
    }
}

#pragma warning restore xUnit1026 // Theory methods should use all of their parameters