// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: PermutationExtensionTests.tt/PermutationExtensionTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Algorithms.Random;
using ILGPU.Runtime;
using ILGPU.Tests;
using System.Collections.Generic;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class PermutationExtensionTests : TestBase
    {
        protected PermutationExtensionTests(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

        #region MemberData

        public static TheoryData<object, object, object, object, object, int>
            PermutationWarpTestData =>
            new TheoryData<object, object, object, object, object, int>
        {
            // Type, RandomNumberGenerator, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        int[] ArraySizes = { 32 };

        var types = AtomicNumericTypes;
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
            { default(<#= type.Type #>), default(XorShift32),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, int>
            PermutationGroupTestData =>
            new TheoryData<object, object, object, object, object, int>
        {
            // Type, RandomNumberGenerator, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in new int[]{ 32, 1024 }) {
#>
            { default(<#= type.Type #>), default(XorShift32),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
            }
        }
#>
        };

        public static TheoryData<object, object, object, object, object, int>
            PermutationDeviceTestData =>
            new TheoryData<object, object, object, object, object, int>
        {
            // Type, RandomNumberGenerator, Sequencer, Start of Sequencer,
            // StepSize of Sequencer, BufferLength
<#
        foreach (var type in types) {
            foreach (var size in new int[]{ 2, 16, 64, 1024 }) {
#>
            { default(<#= type.Type #>), default(XorShift32),
                default(<#= type.Name #>TestSequencer), 0, 1, <#= size #> },
<#
            }
        }
#>
        };

        #endregion

        [SkippableTheory]
        [MemberData(nameof(PermutationDeviceTestData))]
        public void Permutation<T, TRandomProvider, TSequencer>(
            T _,
            TRandomProvider rand,
            TSequencer sequencer,
            T start,
            T stepSize,
            int blocks)
            where T : unmanaged
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
            where TSequencer : struct, ITestSequencer<T>
        {
            Skip.If(
                Accelerator.AcceleratorType == AcceleratorType.CPU
                && blocks >= 1024);
            var length = blocks * Accelerator.MaxNumThreadsPerGroup;
            using var input = Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

            var rawInput = sequencer.ComputeSequence(start, stepSize, length);
            HashSet<T> referenceSet = new HashSet<T>();
            for (int i = 0; i < length; i++)
                referenceSet.Add(rawInput[i]);

            input.CopyFromCPU(stream, rawInput);

            using var permutationProvider =
                Accelerator.CreatePermutationProvider<T>(length);
            var permute = permutationProvider.CreatePermutation<
                T,
                Stride1D.Dense,
                TRandomProvider>();

            permute(stream, input.View, new System.Random(42));
            stream.Synchronize();

            var output = input.GetAsArray1D();
            var isEqual = true;
            for (int i = 0; i < length; i++)
            {
                var outputElem = output[i];
                if (isEqual)
                    isEqual = rawInput[i].Equals(outputElem);
                Assert.True(referenceSet.Remove(outputElem));
            }
            Assert.False(isEqual);
            Assert.True(referenceSet.Count == 0);
        }
    }

    partial class WarpExtensionTests
    {
        public static TheoryData<object, object, object, object, object, int>
            PermutationWarpTestData =>
                PermutationExtensionTests.PermutationWarpTestData;

        internal static void WarpWidePermutationKernel<T, TRandomProvider>(
            ArrayView1D<T, Stride1D.Dense> input,
            RNGView<TRandomProvider> rngView)
            where T : unmanaged
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
        {
            var element = input[Warp.LaneIdx];
            input[Warp.LaneIdx] =
                WarpExtensions.Permute<T, TRandomProvider>(element, rngView);
        }

        [Theory]
        [MemberData(nameof(PermutationWarpTestData))]
        [KernelMethod(nameof(WarpWidePermutationKernel))]
        public void WarpWidePermutation<
            T,
            TRandomProvider,
            TSequencer>(
            T _,
            TRandomProvider rand,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
            where TSequencer : struct, ITestSequencer<T>
        {
            using var input = Accelerator.Allocate1D<T>(Accelerator.WarpSize);
            using var stream = Accelerator.CreateStream();

            var rawInput = sequencer.ComputeSequence(
                start,
                stepSize,
                Accelerator.WarpSize);
            HashSet<T> referenceSet = new HashSet<T>();
            for (int i = 0; i < Accelerator.WarpSize; i++)
                referenceSet.Add(rawInput[i]);

            input.CopyFromCPU(stream, rawInput);

            using var rng = RNG.Create<TRandomProvider>(
                Accelerator,
                new System.Random(42));
            var rngView = rng.GetView(rng.MaxNumParallelWarps);

            Execute<KernelConfig, T, TRandomProvider>(
                (1, Accelerator.WarpSize),
                new KernelSpecialization(Accelerator.WarpSize, 1),
                input.View,
                rngView);
            stream.Synchronize();

            var output = input.GetAsArray1D();
            var isEqual = true;
            for (int i = 0; i < Accelerator.WarpSize; i++)
            {
                var outputElem = output[i];
                if (isEqual)
                    isEqual = rawInput[i].Equals(outputElem);
                Assert.True(referenceSet.Remove(outputElem));
            }
            Assert.False(isEqual);
            Assert.True(referenceSet.Count == 0);
        }
    }

    partial class GroupExtensionTests
    {
        public static TheoryData<object, object, object, object, object, int>
            PermutationGroupTestData =>
                PermutationExtensionTests.PermutationGroupTestData;

        internal static void GroupWidePermutationKernel<T, TRandomProvider>(
            ArrayView1D<T, Stride1D.Dense> input,
            RNGView<TRandomProvider> rngView)
            where T : unmanaged
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
        {
            var dynamicMemory = ILGPU.SharedMemory.GetDynamic<byte>();
            var element = input[Group.IdxX];

            input[Group.IdxX] = GroupExtensions.Permute<T, TRandomProvider>(
                element,
                dynamicMemory,
                rngView);
        }

        [Theory]
        [MemberData(nameof(PermutationGroupTestData))]
        [KernelMethod(nameof(GroupWidePermutationKernel))]
        public void GroupWidePermutation<
            T,
            TRandomProvider,
            TSequencer>(
            T _,
            TRandomProvider rand,
            TSequencer sequencer,
            T start,
            T stepSize,
            int length)
            where T : unmanaged
            where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
            where TSequencer : struct, ITestSequencer<T>
        {
            length = System.Math.Min(length, Accelerator.MaxNumThreadsPerGroup);
            using var input =
                Accelerator.Allocate1D<T>(length);
            using var stream = Accelerator.CreateStream();

            var rawInput = sequencer.ComputeSequence(start, stepSize, length);
            HashSet<T> referenceSet = new HashSet<T>();
            for (int i = 0; i < length; i++)
                referenceSet.Add(rawInput[i]);

            input.CopyFromCPU(stream, rawInput);

            using var rng = RNG.Create<TRandomProvider>(
                Accelerator,
                new System.Random(42));
            var rngView = rng.GetView(rng.MaxNumParallelWarps);

            var arrayLength = Accelerator.ComputeGroupWidePermutationSharedMemorySize<T>(
                length);
            var config = SharedMemoryConfig.RequestDynamic<byte>(arrayLength);

            Execute<KernelConfig, T, TRandomProvider>(
                (1, length, config),
                new KernelSpecialization(length, 1),
                input.View,
                rngView);
            stream.Synchronize();

            var output = input.GetAsArray1D();
            var isEqual = true;
            for (int i = 0; i < length; i++)
            {
                var outputElem = output[i];
                if (isEqual)
                    isEqual = rawInput[i].Equals(outputElem);
                Assert.True(referenceSet.Remove(outputElem));
            }
            Assert.False(isEqual);
            Assert.True(referenceSet.Count == 0);
        }
    }
}