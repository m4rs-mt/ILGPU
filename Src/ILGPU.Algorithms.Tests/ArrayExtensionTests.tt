// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ArrayExtensionTests.tt/ArrayExtensionTests.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>

using ILGPU.Tests;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 
#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class ArrayExtensionTests : TestBase
    {
        protected ArrayExtensionTests(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

        #region MemberData

        public static TheoryData<object, object> TestDataLength1D =>
            new TheoryData<object, object>
        {
<#
        // TODO: Ignoring Half type, otherwise XUnit complains about an
        // AmbiguiousMatchException.
        var types = NumericTypes.Where(x => x.Name != "Half").ToArray();

        int value = 0;
        foreach (var type in types) {
#>
            { (<#= type.Type #>)<#= value #>, 31 },
            { (<#= type.Type #>)<#= value #>, 63 },
<#
            value++;
        }
#>
        };

        public static TheoryData<object, object, object> TestDataLength2D =>
            new TheoryData<object, object, object>
        {
<#
        foreach (var type in types) {
#>
            { (<#= type.Type #>)<#= value #>, 31, 63 },
            { (<#= type.Type #>)<#= value #>, 32, 64 },
<#
            value++;
        }
#>
        };

        public static TheoryData<object, object, object, object> TestDataLength3D =>
            new TheoryData<object, object, object, object>
        {
<#
        foreach (var type in types) {
#>
            { (<#= type.Type #>)<#= value #>, 31, 63, 127 },
            { (<#= type.Type #>)<#= value #>, 32, 64, 128 },
<#
            value++;
        }
#>
        };

        #endregion

        [Theory]
        [MemberData(nameof(TestDataLength1D))]
        public void ArrayGetExtent1D<T>(T _, int lenX)
            where T : unmanaged
        {
            T[] dummy = new T[lenX];
            Index1D actual = ArrayExtensions.GetExtent(dummy);
            Assert.Equal(lenX, actual.X);
        }

        [Theory]
        [MemberData(nameof(TestDataLength2D))]
        public void ArrayGetExtent2D<T>(T _, int lenX, int lenY)
            where T : unmanaged
        {
            T[,] dummy = new T[lenX, lenY];
            Index2D actual = ArrayExtensions.GetExtent(dummy);
            Assert.Equal(lenX, actual.X);
            Assert.Equal(lenY, actual.Y);
        }

        [Theory]
        [MemberData(nameof(TestDataLength3D))]
        public void ArrayGetExtent3D<T>(T _, int lenX, int lenY, int lenZ)
            where T : unmanaged
        {
            T[,,] dummy = new T[lenX, lenY, lenZ];
            Index3D actual = ArrayExtensions.GetExtent(dummy);
            Assert.Equal(lenX, actual.X);
            Assert.Equal(lenY, actual.Y);
            Assert.Equal(lenZ, actual.Z);
        }

        [Theory]
        [MemberData(nameof(TestDataLength1D))]
        public void ArraySetGetValue1D<T>(T value, int lenX)
            where T : unmanaged
        {
            T[] dummy = new T[lenX];
            Index1D index = lenX/2;
            ArrayExtensions.SetValue(dummy, value, index);
            var actual = ArrayExtensions.GetValue(dummy, index);
            Assert.Equal(value, actual);
        }

        [Theory]
        [MemberData(nameof(TestDataLength2D))]
        public void ArraySetGetValue2D<T>(T value, int lenX, int lenY)
            where T : unmanaged
        {
            T[,] dummy = new T[lenX, lenY];
            Index2D index = new Index2D(lenX/2, lenY/3);
            ArrayExtensions.SetValue(dummy, value, index);
            var actual = ArrayExtensions.GetValue(dummy, index);
            Assert.Equal(value, actual);
        }

        [Theory]
        [MemberData(nameof(TestDataLength3D))]
        public void ArraySetGetValue3D<T>(T value, int lenX, int lenY, int lenZ)
            where T : unmanaged
        {
            T[,,] dummy = new T[lenX, lenY, lenZ];
            Index3D index = new Index3D(lenX/2, lenY/3, lenZ/4);
            ArrayExtensions.SetValue(dummy, value, index);
            var actual = ArrayExtensions.GetValue(dummy, index);
            Assert.Equal(value, actual);
        }
    }
}

#pragma warning restore xUnit1026 // Theory methods should use all of their parameters
#pragma warning restore CA1814 // Prefer jagged arrays over multidimensional