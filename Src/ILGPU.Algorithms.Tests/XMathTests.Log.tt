// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: XMathTests.Log.tt/XMathTests.Log.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="XMathTests.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using ILGPU.Tests;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

// disable: max_line_length

<#
    var unaryLogFunctions = new []
    {
        new XMathFunction("Log"  , "float" , new Precision(15,  6,  6)),
        new XMathFunction("Log"  , "double", new Precision(15, 14, 15)),
        new XMathFunction("Log10", "float" , new Precision(15,  6,  6)),
        new XMathFunction("Log10", "double", new Precision(15, 15, 15)),
    };

    var unaryLog2Functions = new []
    {
        new XMathFunction("Log2" , "float" , new Precision(15,  6,  6)),
        new XMathFunction("Log2" , "double", new Precision(15, 14, 14)),
    };

    var binaryLogFunctions = new []
    {
        new XMathFunction("Log" , "float" , new Precision(15,  5,  6)),
        new XMathFunction("Log" , "double", new Precision(15, 14, 14)),
    };
#>
namespace ILGPU.Algorithms.Tests
{
    // Performs tests on the various logarithmic functions across a range of input values
    // and ensures a minimum precision on each accelerator type.
    partial class XMathTests
    {
<# foreach (var function in unaryLogFunctions) { #>
        internal static void <#= function.KernelName #>(
            Index1D index,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> input,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> output)
        {
            output[index] = XMath.<#= function.Name #>(input[index]);
        }

        [Fact]
        [KernelMethod(nameof(<#= function.KernelName #>))]
        public void <#= function.TestName #>()
        {
<#
            var start = 0.5;
            var end = 400.0;
            var step = 0.5;
#>
            // [<#= start #>, <#= end #>]
            var inputValues = new List<<#= function.DataType #>>();
            for (
                var x = <#= start #><#= function.ValueSuffix #>;
                x <= <#= end #><#= function.ValueSuffix #>;
                x += <#= step #><#= function.ValueSuffix #>)
                inputValues.Add(x);

            var edgeCases = new <#= function.DataType #>[]
            {
                0.0<#= function.ValueSuffix #>,
                <#= function.DataType #>.NaN,
                <#= function.DataType #>.PositiveInfinity,
                <#= function.DataType #>.NegativeInfinity
            };
            for (var x = 0; x < edgeCases.Length; x++)
                inputValues.Add(edgeCases[x]);

            var inputArray = inputValues.ToArray();
            using var input = Accelerator.Allocate1D<<#= function.DataType #>>(
                inputArray.Length);
            using var output = Accelerator.Allocate1D<<#= function.DataType #>>(
                inputArray.Length);

            input.CopyFromCPU(inputArray);
            Execute(input.Length, input.View, output.View);

            var expected = inputArray.Select(
#if NETFRAMEWORK
                x => (<#= function.DataType #>)Math.<#= function.Name #>(x))
#else
                x => Math<#= function.MathSuffix #>.<#= function.Name #>(x))
#endif
                .ToArray();
            if (Accelerator.AcceleratorType == AcceleratorType.Cuda)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.Cuda #>);
            else if (Accelerator.AcceleratorType == AcceleratorType.OpenCL)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.OpenCL #>);
            else
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.CPU #>);
        }

<# } #>
<# foreach (var function in unaryLog2Functions) { #>
        internal static void <#= function.KernelName #>(
            Index1D index,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> input,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> output)
        {
            output[index] = XMath.<#= function.Name #>(input[index]);
        }

        [Fact]
        [KernelMethod(nameof(<#= function.KernelName #>))]
        public void <#= function.TestName #>()
        {
<#
            var start = 0.5;
            var end = 400.0;
            var step = 0.5;
#>
            // [<#= start #>, <#= end #>]
            var inputValues = new List<<#= function.DataType #>>();
            for (
                var x = <#= start #><#= function.ValueSuffix #>;
                x <= <#= end #><#= function.ValueSuffix #>;
                x += <#= step #><#= function.ValueSuffix #>)
                inputValues.Add(x);

            var edgeCases = new <#= function.DataType #>[]
            {
                0.0<#= function.ValueSuffix #>,
                <#= function.DataType #>.NaN,
                <#= function.DataType #>.PositiveInfinity,
                <#= function.DataType #>.NegativeInfinity
            };
            for (var x = 0; x < edgeCases.Length; x++)
                inputValues.Add(edgeCases[x]);

            var inputArray = inputValues.ToArray();
            using var input = Accelerator.Allocate1D<<#= function.DataType #>>(
                inputArray.Length);
            using var output = Accelerator.Allocate1D<<#= function.DataType #>>(
                inputArray.Length);

            input.CopyFromCPU(inputArray);
            Execute(input.Length, input.View, output.View);

            var expected = inputArray.Select(
#if NETFRAMEWORK
                x => (<#= function.DataType #>)Math.Log(x, 2))
#else
                x => Math<#= function.MathSuffix #>.Log(x, 2))
#endif
                .ToArray();
            if (Accelerator.AcceleratorType == AcceleratorType.Cuda)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.Cuda #>);
            else if (Accelerator.AcceleratorType == AcceleratorType.OpenCL)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.OpenCL #>);
            else
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.CPU #>);
        }

<# } #>
<# foreach (var function in binaryLogFunctions) { #>
        internal static void Binary<#= function.KernelName #>(
            Index1D index,
            ArrayView1D<XMathTuple<<#= function.DataType #>>, Stride1D.Dense> input,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> output)
        {
            output[index] = XMath.<#= function.Name #>(input[index].X, input[index].Y);
        }

        [Fact]
        [KernelMethod(nameof(Binary<#= function.KernelName #>))]
        public void Binary<#= function.TestName #>()
        {
<#
            var start = 2.0;
            var end = 400.0;
            var step = 0.5;
#>
            // [<#= start #>, <#= end #>]
            var inputValues = new List<XMathTuple<<#= function.DataType #>>>();
            for (
                var x = <#= start.ToString("F1", CultureInfo.InvariantCulture) #><#= function.ValueSuffix #>;
                x <= <#= end #><#= function.ValueSuffix #>;
                x += <#= step #><#= function.ValueSuffix #>)
            {
                for (
                    var y = <#= start.ToString("F1", CultureInfo.InvariantCulture) #><#= function.ValueSuffix #>;
                    y <= <#= end #><#= function.ValueSuffix #>;
                    y += <#= step #><#= function.ValueSuffix #>)
                {
                    inputValues.Add(new XMathTuple<<#= function.DataType #>>(x, y));
                }
            }

            var edgeCases = new <#= function.DataType #>[]
            {
                0.0<#= function.ValueSuffix #>,
                <#= function.DataType #>.NaN,
                <#= function.DataType #>.PositiveInfinity,
                <#= function.DataType #>.NegativeInfinity
            };
            for (var x = 0; x < edgeCases.Length; x++)
            {
                for (var y = 0; y < edgeCases.Length; y++)
                {
                    inputValues.Add(new XMathTuple<<#= function.DataType #>>(
                        edgeCases[x],
                        edgeCases[y]));
                }
            }

            var inputArray = inputValues.ToArray();
            using var input = Accelerator.Allocate1D<XMathTuple<<#= function.DataType #>>>(
                inputArray.Length);
            using var output = Accelerator.Allocate1D<<#= function.DataType #>>(
                inputArray.Length);

            input.CopyFromCPU(inputArray);
            Execute(input.Length, input.View, output.View);

            var expected = inputArray.Select(
#if NETFRAMEWORK
                v => (<#= function.DataType #>)Math.Log(v.X, v.Y))
#else
                v => Math<#= function.MathSuffix #>.Log(v.X, v.Y))
#endif
                .ToArray();

            if (Accelerator.AcceleratorType == AcceleratorType.Cuda)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.Cuda #>);
            else if (Accelerator.AcceleratorType == AcceleratorType.OpenCL)
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.OpenCL #>);
            else
                VerifyWithinPrecision(output.View, expected, <#= function.Precision.CPU #>);
        }

<# } #>
    }
}