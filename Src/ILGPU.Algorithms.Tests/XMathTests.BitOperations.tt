// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2023 ILGPU Project
//                                    www.ilgpu.net
//
// File: XMathTests.BitOperations.tt/XMathTests.BitOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="XMathTests.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using ILGPU.Tests;
using System.Numerics;
using System.Linq;
using Xunit;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to

<#
    var bitFunctions = new []
    {
        new BitFunction("LeadingZeroCount", "uint"),
        new BitFunction("LeadingZeroCount", "ulong"),

        new BitFunction("TrailingZeroCount", "uint"),
        new BitFunction("TrailingZeroCount", "ulong"),

        new BitFunction("PopCount", "uint"),
        new BitFunction("PopCount", "ulong"),
    };
#>
namespace ILGPU.Algorithms.Tests
{
    partial class XMathTests
    {
        private const int Length = 32;

<# foreach (var function in bitFunctions) { #>
        internal static void <#= function.KernelName #>(
            Index1D index,
            ArrayView1D<<#= function.DataType #>, Stride1D.Dense> input,
            ArrayView1D<int, Stride1D.Dense> output)
        {
            output[index] = XMath.<#= function.Name #>(input[index] << index);
        }

        [Theory]
        [InlineData(0x0)]
        [InlineData(0x1)]
        [InlineData(0x1001)]
        [InlineData(0xABCD_EF00)]
        [InlineData(<#= function.DataType #>.MaxValue)]
        [KernelMethod(nameof(<#= function.KernelName #>))]
        public void <#= function.TestName #>(<#= function.DataType #> value)
        {
            var expected =
                Enumerable.Range(0, Length)
                .Select(x => BitOperations.<#= function.Name #>(value << x))
                .ToArray();
            using var input = Accelerator.Allocate1D(
                Enumerable.Repeat(value, Length).ToArray());
            using var output = Accelerator.Allocate1D<int>(Length);

            Execute(input.Length, input.View, output.View);
            Verify(output.View, expected);
        }

<# } #>
    }
}

#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to

<#+
    class BitFunction : XMathFunctionBase
    {
        public BitFunction(string name, string dataType)
            : base(name, dataType)
        {}
    }
#>