// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: IntrinsicMath.CPUOnly.tt/IntrinsicMath.CPUOnly.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath("Static");
var unaryOps = GetUnaryMathOps(rootPath).Where(t => t.HasFloats && t.HasImplementation);
var binaryOps = GetBinaryMathOps(rootPath).Where(t => t.HasFloats && t.HasImplementation);
#>
using ILGPU.Frontend.Intrinsic;
using System;

// disable: max_line_length

namespace ILGPU
{
    partial class IntrinsicMath
    {
        /// <summary>
        /// Contains CPU-only math functions that are automatically mapped to IR nodes.
        /// </summary>
        public static class CPUOnly
        {
            #region Double Precision

<# foreach (var op in unaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="value">The value.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static <#= op.IsPredicate ? "bool" : "double" #> <#= op.MethodName #>(double value) =>
                <#= op.GetImplementation("double", "Math", "1.0", "2.0", "value") #>;

<# } #>
<# foreach (var op in binaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static double <#= op.MethodName #>(double left, double right) =>
                <#= op.GetImplementation("double", "Math", "1.0", "2.0", "left", "right") #>;

<# } #>

            #endregion

            #region Single Precision

#if !NETFRAMEWORK
<# foreach (var op in unaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="value">The value.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static <#= op.IsPredicate ? "bool" : "float" #> <#= op.MethodName #>(float value) =>
                <#= op.GetImplementation("float", "MathF", "1.0f", "2.0f", "value") #>;

<# } #>
<# foreach (var op in binaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static float <#= op.MethodName #>(float left, float right) =>
                <#= op.GetImplementation("float", "MathF", "1.0f", "2.0f", "left", "right") #>;

<# } #>
#else
<# foreach (var op in unaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="value">The value.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static <#= op.IsPredicate ? "bool" : "float" #> <#= op.MethodName #>(float value) =>
                <#= op.GetImplementation("float", "(float)Math", "1.0f", "2.0f", "value") #>;

<# } #>
<# foreach (var op in binaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static float <#= op.MethodName #>(float left, float right) =>
                <#= op.GetImplementation("float", "(float)Math", "1.0f", "2.0f", "left", "right") #>;

<# } #>
#endif

            #endregion

            #region Half Precision

<# foreach (var op in unaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="value">The value.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static <#= op.IsPredicate ? "bool" : "Half" #> <#= op.MethodName #>(Half value) =>
                <#= op.IsPredicate ? string.Empty : "(Half)" #><#= op.MethodName #>((float)value);

<# } #>
<# foreach (var op in binaryOps) { #>
            /// <summary>
            /// <#= op.Summary #>
            /// </summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand.</param>
            [MathIntrinsic(MathIntrinsicKind.<#= op.Name #>)]
            public static Half <#= op.MethodName #>(Half left, Half right) =>
                HalfExtensions.<#= op.MethodName #>FP32(left, right);

<# } #>
            #endregion
        }
    }
}