// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: PrimitiveDataBlocks.tt/PrimitiveDataBlocks.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var types = new []
    {
        new { TypeName = "Short", Info = SignedIntTypes[1] },
        new { TypeName = "Int", Info = SignedIntTypes[2] },
        new { TypeName = "Long", Info = SignedIntTypes[3] },
        new { TypeName = "Float", Info = FloatTypes[0] },
        new { TypeName = "Double", Info = FloatTypes[1] },
    };
#>
<# var typeParameterRanges = new int[] { 2, 3, 4 }; #>
<# var operations = new string[] { "*", "/", "-", "+" }; #>
<# var itemNames = new string[] { "X", "Y", "Z", "W" }; #>
<# var paramItemNames = itemNames.Select(t => t.ToLower()).ToArray(); #>
using System;
using System.Runtime.InteropServices;

// disable: max_line_length
#pragma warning disable IDE0047 // Remove unnecessary parentheses

namespace ILGPU.Util
{
<# foreach (var type in types) { #>
<#      var typeRange = from r in typeParameterRanges
         let range = Enumerable.Range(1, r)
         let elementTypeName = type.Info.Type
         select new
         {
             Range = r,
             IndexRange = range,
             TypeName = type.TypeName + r.ToString(),
             ElementTypeName = elementTypeName,
             TypeParams = string.Join(", ", from rangeIdx in range select elementTypeName),
             MethodParams = string.Join(", ", from rangeIdx in range select $"{elementTypeName} {paramItemNames[rangeIdx - 1]}"),
         }; #>
<#      foreach (var typeParams in typeRange) { #>
    /// <summary>
    /// Represents a combined structure type to hold multiple primitive values of the
    /// same type.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    public struct <#= typeParams.TypeName #> : IEquatable<<#= typeParams.TypeName #>>
    {
        #region Constants

        /// <summary>
        /// Represents the native size of a single element.
        /// </summary>
        public static readonly int ElementSize = Interop.SizeOf<<#= typeParams.TypeName #>>();

        #endregion

        #region Instance

        /// <summary>
        /// The internal data block.
        /// </summary>
        private DataBlock<<#= typeParams.TypeParams #>> dataBlock;

        /// <summary>
        /// Constructs a new data container.
        /// </summary>
        public <#= typeParams.TypeName #>(<#= typeParams.ElementTypeName #> value)
            : this(<#= string.Join(", ", typeParams.IndexRange.Select(t => "value")) #>)
        { }

        /// <summary>
        /// Constructs a new data container.
        /// </summary>
        public <#= typeParams.TypeName #>(<#= typeParams.MethodParams #>)
            : this(new DataBlock<<#= typeParams.TypeParams #>>(
                <#= string.Join(", ", typeParams.IndexRange.Select(t =>
                    paramItemNames[t - 1])) #>))
        { }

        /// <summary>
        /// Constructs a new data block.
        /// </summary>
        public <#= typeParams.TypeName #>(DataBlock<<#= typeParams.TypeParams #>> block)
        {
            dataBlock = block;
        }

        #endregion

        #region Properties

        /// <summary>
        /// The underlying raw data block.
        /// </summary>
        public DataBlock<<#= typeParams.TypeParams #>> DataBlock => dataBlock;
<# for (int i = 0; i < typeParams.Range; ++i) { #>

        /// <summary>
        /// Returns the i-th element.
        /// </summary>
        public <#= typeParams.ElementTypeName #> <#= itemNames[i] #>
        {
            get => dataBlock.Item<#= i + 1 #>;
            set => dataBlock.Item<#= i + 1 #> = value;
        }
<# } #>

        #endregion

        #region Methods

        /// <summary>
        /// Returns a value tuple that stores all items.
        /// </summary>
        /// <returns>The constructed value tuple.</returns>
        public (<#= typeParams.TypeParams #>) ToValueTuple() => dataBlock.ToValueTuple();

        /// <summary cref="IEquatable{T}.Equals(T)"/>
        public bool Equals(<#= typeParams.TypeName #> other) => dataBlock.Equals(other.dataBlock);

        #endregion

        #region Object

        /// <summary>
        /// Returns true if the given object is equal to the current one.
        /// </summary>
        /// <param name="obj">The other object.</param>
        /// <returns>True, if the given object is equal to the current one.</returns>
        public override bool Equals(object obj) =>
            obj is <#= typeParams.TypeName #> other && Equals(other);

        /// <summary>
        /// Returns the combined hash code of all items.
        /// </summary>
        /// <returns>The hash code of all items.</returns>
        public override int GetHashCode() => dataBlock.GetHashCode();

        /// <summary>
        /// Returns the string representation of this view.
        /// </summary>
        /// <returns>The string representation of this view.</returns>
        public override string ToString() => dataBlock.ToString();

        #endregion

        #region Operators
<# foreach (var op in operations) { #>

        /// <summary>
        /// Executes an arithmetic <#= op #> operation on all elements.
        /// </summary>
        /// <param name="left">The left operand.</param>
        /// <param name="right">The right operand.</param>
        /// <returns>The resulting value.</returns>
        public static <#= typeParams.TypeName #> operator <#= op #>(<#= typeParams.TypeName #> left, <#= typeParams.TypeName #> right) =>
            new <#= typeParams.TypeName #>(
                <#= string.Join(", ", typeParams.IndexRange.Select(t =>
                {
                    var itemName = itemNames[t - 1];
                    return $"({typeParams.ElementTypeName})(left.{itemName} {op} right.{itemName})";
                })) #>);
<# } #>

        /// <summary>
        /// Converts the given single value into its container representation.
        /// </summary>
        /// <param name="value">The value to convert.</param>
        public static implicit operator <#= typeParams.TypeName #>(<#= typeParams.ElementTypeName #> value) =>
            new <#= typeParams.TypeName #>(value);

        /// <summary>
        /// Converts the given value into its tuple representation.
        /// </summary>
        /// <param name="value">The value to convert.</param>
        public static implicit operator (<#= typeParams.TypeParams #>)(<#= typeParams.TypeName #> value) =>
            value.ToValueTuple();

        /// <summary>
        /// Converts the given value into its data block representation.
        /// </summary>
        /// <param name="value">The value to convert.</param>
        public static implicit operator DataBlock<<#= typeParams.TypeParams #>>(<#= typeParams.TypeName #> value) =>
            value.DataBlock;

        /// <summary>
        /// Returns true if both data blocks represent the same elements.
        /// </summary>
        /// <param name="left">The left block.</param>
        /// <param name="right">The right block.</param>
        /// <returns>True, if both data block represent the same elements.</returns>
        public static bool operator ==(<#= typeParams.TypeName #> left, <#= typeParams.TypeName #> right) =>
            left.Equals(right);

        /// <summary>
        /// Returns true if both data blocks do not represent the same elements.
        /// </summary>
        /// <param name="left">The left block.</param>
        /// <param name="right">The right block.</param>
        /// <returns>
        /// True, if both data block do not represent the same elements.
        /// </returns>
        public static bool operator !=(<#= typeParams.TypeName #> left, <#= typeParams.TypeName #> right) =>
            !(left == right);

        #endregion
    }

<#      } #>
<#  } #>
}

#pragma warning restore IDE0047 // Remove unnecessary parentheses