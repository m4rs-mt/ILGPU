// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: AtomicFunctions.tt/AtomicFunctions.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var atomicSignedIntAndFloatTypes = AtomicSignedIntTypes.
    Concat(AtomicFloatTypes).ToArray();
var atomicUnsignedIntAndFloatTypes = AtomicUnsignedIntTypes.
    Concat(AtomicFloatTypes).ToArray();
#>
using ILGPU.Frontend.Intrinsic;
using ILGPU.IR.Values;
using System;
using System.Runtime.CompilerServices;
using System.Threading;

namespace ILGPU
{
    namespace AtomicOperations
    {
<#      foreach (var type in AtomicNumericTypes) { #>
        /// <summary>
        /// Represents an atomic compare-exchange operation of type <#= type.Type #>.
        /// </summary>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
<#      } #>
        public readonly struct CompareExchange<#= type.Name #> :
            ICompareExchangeOperation<<#= type.Type #>>
        {
            /// <summary>
            /// Realizes an atomic compare-exchange operation.
            /// </summary>
            /// <param name="target">The target location.</param>
            /// <param name="compare">The expected comparison value.</param>
            /// <param name="value">The target value.</param>
            /// <returns>The old value.</returns>
            public readonly <#= type.Type #> CompareExchange(
                ref <#= type.Type #> target,
                <#= type.Type #> compare,
                <#= type.Type #> value) =>
                Atomic.CompareExchange(ref target, compare, value);

            /// <summary>
            /// Returns true if both operands represent the same value.
            /// </summary>
            /// <param name="left">The left operand.</param>
            /// <param name="right">The right operand.</param>
            /// <returns>True, if both operands represent the same value.</returns>
            public readonly bool IsSame(
                <#= type.Type #> left,
                <#= type.Type #> right) => left == right;
        }

<#      } #>
    }

    public static partial class Atomic
    {
        #region Add

<#      foreach (var type in AtomicSignedIntTypes) { #>
        /// <summary>
        /// Atomically adds the given value and the value at the target location
        /// and returns the old value.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The value to add.</param>
        /// <returns>The old value that was stored at the target location.</returns>
        [AtomicIntrinsic(AtomicIntrinsicKind.Add, AtomicFlags.None)]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Add(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            Interlocked.Add(ref target, value) - value;

<#      } #>

<#      foreach (var type in atomicUnsignedIntAndFloatTypes) { #>
        struct Add<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                current + value;
        }

<#      } #>

<#      foreach (var type in AtomicUnsignedIntTypes) { #>
        /// <summary>
        /// Atomically adds the given value and the value at the target location
        /// and returns the old value.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The value to add.</param>
        /// <returns>The old value that was stored at the target location.</returns>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Add, AtomicFlags.Unsigned)]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Add(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Add<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

<#      foreach (var type in AtomicFloatTypes) { #>
        /// <summary>
        /// Atomically adds the given value and the value at the target location
        /// and returns the old value.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The value to add.</param>
        /// <returns>The old value that was stored at the target location.</returns>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Add, AtomicFlags.None)]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Add(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Add<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region Max

<#      foreach (var type in AtomicNumericTypes) { #>
        struct Max<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                IntrinsicMath.Max(current, value);
        }

        /// <summary>
        /// Atomically computes the maximum at the target location with the given value
        /// and returns the old value that was stored at the target location.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The comparison value.</param>
        /// <returns>The old value that was stored at the target location.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Max, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.Max, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Max(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Max<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region Min

<#      foreach (var type in AtomicNumericTypes) { #>
        struct Min<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                IntrinsicMath.Min(current, value);
        }

        /// <summary>
        /// Atomically computes the minimum at the target location with the given value
        /// and returns the old value that was stored at the target location.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The comparison value.</param>
        /// <returns>The old value that was stored at the target location.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Min, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.Min, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Min(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Min<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region And

<#      foreach (var type in AtomicIntTypes) { #>
        struct And<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                current & value;
        }

        /// <summary>
        /// Atomically computes the logical and of the value at the target location with
        /// the given value and returns the old value that was stored at the target
        /// location.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The comparison value.</param>
        /// <returns>The old value that was stored at the target location.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.And, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.And, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> And(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new And<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region Or

<#      foreach (var type in AtomicIntTypes) { #>
        struct Or<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                current | value;
        }

        /// <summary>
        /// Atomically computes the logical or of the value at the target location with
        /// the given value and returns the old value that was stored at the target
        /// location.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The comparison value.</param>
        /// <returns>The old value that was stored at the target location.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Or, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.Or, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Or(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Or<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region Xor

<#      foreach (var type in AtomicIntTypes) { #>
        struct Xor<#= type.Name #> : AtomicOperations.IAtomicOperation<<#= type.Type #>>
        {
            public readonly <#= type.Type #> Operation(
                <#= type.Type #> current,
                <#= type.Type #> value) =>
                current ^ value;
        }

        /// <summary>
        /// Atomically computes the logical xor of the value at the target location with
        /// the given value and returns the old value that was stored at the target
        /// location.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The comparison value.</param>
        /// <returns>The old value that was stored at the target location.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Xor, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.Xor, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Xor(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            MakeAtomic(
                ref target,
                value,
                new Xor<#= type.Name #>(),
                new AtomicOperations.CompareExchange<#= type.Name #>());

<#      } #>

        #endregion

        #region Exchange

<#      foreach (var type in AtomicSignedIntTypes) { #>
        /// <summary>
        /// Represents an atomic exchange operation.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="value">The target value.</param>
        /// <returns>The old value.</returns>
<#      if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
        [AtomicIntrinsic(AtomicIntrinsicKind.Exchange, AtomicFlags.Unsigned)]
<#      } else if (type.IsInt) { #>
        [AtomicIntrinsic(AtomicIntrinsicKind.Exchange, AtomicFlags.None)]
<#      } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> Exchange(
            ref <#= type.Type #> target,
            <#= type.Type #> value) =>
            Interlocked.Exchange(ref target, value);

<#      } #>

        #endregion

        #region Compare & Exchange

<#      foreach (var type in AtomicSignedIntTypes) { #>
        /// <summary>
        /// Represents an atomic compare-exchange operation.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="compare">The expected comparison value.</param>
        /// <param name="value">The target value.</param>
        /// <returns>The old value.</returns>
        [AtomicIntrinsic(AtomicIntrinsicKind.CompareExchange, AtomicFlags.None)]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= type.Type #> CompareExchange(
            ref <#= type.Type #> target,
            <#= type.Type #> compare,
            <#= type.Type #> value) =>
            Interlocked.CompareExchange(ref target, value, compare);

<#      } #>

        #endregion
    }
}