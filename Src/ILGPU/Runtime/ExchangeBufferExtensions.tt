// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: ExchangeBufferExtensions.tt/ExchangeBufferExtensions.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# int numDimensions = 3; #>
using ILGPU.Runtime.CPU;

namespace ILGPU.Runtime
{
    /// <summary>
    /// A static helper class for all exchange buffer implementations.
    /// </summary>
    public static class ExchangeBuffer
    {
<# for(int i = 1; i <= numDimensions; i++) { #>
<#      var indexName = $"LongIndex{i}"; #>
<#      var dimensionName = $"{i}D"; #>
<#      var typeName = i == 1 ? "ExchangeBuffer" : $"ExchangeBuffer{dimensionName}"; #>
        /// <summary>
        /// Allocates a new <#= dimensionName #> exchange buffer
        /// that allocates the specified amount of elements on the current
        /// accelerator. Furthermore, it keeps a buffer of the same size in pinned
        /// CPU memory to enable asynchronous memory transfers.
        /// </summary>
        /// <typeparam name="T">The element type.</typeparam>
        /// <param name="accelerator">The associated accelerator to use.</param>
        /// <param name="extent">The extent (number of elements to allocate).</param>
        /// <returns>The allocated <#= dimensionName #> exchange buffer.</returns>
        /// <remarks>
        /// This function uses the default buffer allocation mode.
        /// <see cref="ExchangeBufferMode.PreferPageLockedMemory"/>
        /// </remarks>
        public static <#= typeName #><T> AllocateExchangeBuffer<T>(
            this Accelerator accelerator,
            <#= indexName #> extent)
            where T : unmanaged => accelerator.AllocateExchangeBuffer<T>(
                extent,
                ExchangeBufferMode.PreferPageLockedMemory);

        /// <summary>
        /// Allocates a new <#= dimensionName #> exchange buffer
        /// that allocates the specified amount of elements on the current
        /// accelerator. Furthermore, it keeps a buffer of the same size in pinned
        /// CPU memory to enable asynchronous memory transfers.
        /// </summary>
        /// <typeparam name="T">The element type.</typeparam>
        /// <param name="accelerator">The associated accelerator to use.</param>
        /// <param name="extent">The extent (number of elements to allocate).</param>
        /// <param name="mode">The exchange buffer mode to use.</param>
        /// <returns>The allocated <#= dimensionName #> exchange buffer.</returns>
        public static <#= typeName #><T> AllocateExchangeBuffer<T> (
            this Accelerator accelerator,
            <#= indexName #> extent,
            ExchangeBufferMode mode)
            where T : unmanaged
        {
            var gpuBuffer = accelerator.Allocate<T>(extent);
            return new <#= typeName #><T>(gpuBuffer, mode);
        }
<# } #>
   }
<# for(int i = 1; i <= numDimensions; i++) { #>
<#      var indexName = $"LongIndex{i}"; #>
<#      var dimensionName = $"{i}D"; #>
<#      var typeName = i == 1 ? "ExchangeBuffer" : $"ExchangeBuffer{dimensionName}"; #>
<#      var arrayViewType = $"ArrayView<T, {indexName}>"; #>
<#      var highLevelView =  i == 1 ? "ArrayView" : $"ArrayView{dimensionName}"; #>
<#      var memoryBufferType = i == 1 ? "MemoryBuffer<T>" :
            $"MemoryBuffer{dimensionName}<T>"; #>

    /// <summary>
    /// <#= dimensionName #> implementation of
    /// <see cref="ExchangeBufferBase{T, TIndex}"/>
    /// </summary>
    /// <typeparam name="T">The element type.</typeparam>
    /// <remarks>Members of this class are not thread safe.</remarks>
    public sealed unsafe class <#= typeName #><T> :
        ExchangeBufferBase<T, <#= indexName #>>
        where T : unmanaged
    {
        #region Instance

        private readonly <#= memoryBufferType #> gpuBuffer;

        /// <summary>
        /// Initializes this memory buffer.
        /// </summary>
        /// <param name="buffer">The underlying memory buffer.</param>
        /// <param name="mode">The current buffer allocation mode.</param>
        internal <#= typeName #>(
            <#= memoryBufferType #> buffer,
            ExchangeBufferMode mode)
            : base(buffer.Accelerator, buffer.Extent, mode)
        {
            gpuBuffer = buffer;
            NativePtr = buffer.NativePtr;
        }

        #endregion

        #region Methods

        /// <summary cref="MemoryBuffer{T, TIndex}.CopyToView(
        /// AcceleratorStream, ArrayView{T}, LongIndex1)"/>
        protected internal override void CopyToView(
            AcceleratorStream stream,
            ArrayView<T> target,
            LongIndex1 sourceOffset) =>
            gpuBuffer.CopyToView(stream, target, sourceOffset);

        /// <summary cref="MemoryBuffer{T, TIndex}.CopyFromView(
        /// AcceleratorStream, ArrayView{T}, LongIndex1)"/>
        protected internal override void CopyFromView(
            AcceleratorStream stream,
            ArrayView<T> source,
            LongIndex1 targetOffset) =>
            gpuBuffer.CopyFromView(stream, source, targetOffset);

        /// <summary>
        /// Sets the contents of the current buffer to the given byte value.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="value">The value to write into the memory buffer.</param>
        /// <param name="offsetInBytes">The raw offset in bytes.</param>
        /// <param name="lengthInBytes">The raw length in bytes.</param>
        protected internal override void MemSetInternal(
            AcceleratorStream stream,
            byte value,
            long offsetInBytes,
            long lengthInBytes)
        {
            gpuBuffer.MemSetInternal(
                stream,
                value,
                offsetInBytes,
                lengthInBytes);
            CPUMemoryBuffer<T, <#= indexName #>>.MemSet(
                CPUMemory.NativePtr,
                value,
                offsetInBytes,
                lengthInBytes);
        }

        /// <summary>
        /// Copies the current contents into a new byte array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <returns>A new array holding the requested contents.</returns>
        public override byte[] GetAsRawArray(AcceleratorStream stream) =>
            gpuBuffer.GetAsRawArray(stream);
<#      if(i > 1) { #>

        /// <summary>
        /// Gets the part of this buffer on CPU memory as a <#= dimensionName #> View
        /// using the current extent.
        /// </summary>
        /// <returns></returns>
        public <#= highLevelView #><T> As<#= dimensionName #>View() =>
            As<#= dimensionName #>View(Extent);

        /// <summary>
        /// Gets this buffer as a <#= dimensionName #> array from
        /// the accelerator using the default stream.
        /// </summary>
        /// <returns>The array containing all the elements in the buffer.</returns>
        public T[,<#if(i == 3){#>,<#}#>] GetAs<#= dimensionName #>Array() =>
            GetAs<#= dimensionName #>Array(Accelerator.DefaultStream);

        /// <summary>
        /// Gets this buffer as a <#= dimensionName #> array from the accelerator.
        /// </summary>
        /// <returns>The array containing all the elements in the buffer.</returns>
        public T[,<#if(i == 3){#>,<#}#>] GetAs<#= dimensionName #>Array(
            AcceleratorStream stream) =>
            gpuBuffer.GetAs<#= dimensionName #>Array(stream);
<#      } #>

        #endregion

        #region Operators

        /// <summary>
        /// Implicitly converts this buffer into a generic array view.
        /// </summary>
        /// <param name="buffer">The source buffer.</param>
        public static implicit operator ArrayView<T, <#= indexName #>>(
            <#= typeName #><T> buffer) =>
            buffer.View;

        #endregion

        #region IDisposable

        /// <summary>
        /// Frees the underlying GPU memory buffer.
        /// </summary>
        protected override void DisposeAcceleratorObject(bool disposing)
        {
            if (disposing)
                gpuBuffer.Dispose();
            base.DisposeAcceleratorObject(disposing);
        }

        #endregion
    }
<# } #>
}