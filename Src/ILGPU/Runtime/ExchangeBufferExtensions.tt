// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: ExchangeBufferExtensions.tt/ExchangeBufferExtensions.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Diagnostics.CodeAnalysis;

namespace ILGPU.Runtime
{
    /// <summary>
    /// A static helper class for all exchange buffer implementations.
    /// </summary>
    public static class ExchangeBuffer
    {<#int top = 3;
    for(int i = 1; i <= top; i++)
    {#>
    <# var indexName = $"LongIndex{i}"; #>
    <# var dimensionName = $"{i}D"; #>
    <# var typeName = i == 1 ? "ExchangeBuffer" : $"ExchangeBuffer{dimensionName}"; #>
    <# var arrayViewType = $"ArrayView<T, {indexName}>"; #>
    <# var highLevelView =  i == 1 ? "ArrayView" : $"ArrayView{dimensionName}"; #>
    <# var memoryBufferType = $"MemoryBuffer<T, {indexName}>"; #>
    <# var highLevelMemBuf = i == 1 ? "MemoryBuffer" : $"MemoryBuffer{dimensionName}";#>

        /// <summary>
        /// Allocates a new <#= dimensionName #> exchange buffer
        /// that allocates the specified amount of elements on the current
        /// accelerator. Furthermore, it keeps a buffer of the same size in pinned
        /// CPU memory to enable asynchronous memory transfers.
        /// </summary>
        /// <typeparam name="T">The element type.</typeparam>
        /// <param name="accelerator">The associated accelerator to use.</param>
        /// <param name="extent">The extent (number of elements to allocate).</param>
        /// <returns>The allocated <#= dimensionName #> exchange buffer.</returns>
        /// <remarks>
        /// This function uses the default buffer allocation mode.
        /// <see cref="ExchangeBufferMode.PreferPagedLockedMemory"/>
        /// </remarks>
        public static <#= typeName #><T> AllocateExchangeBuffer<T>(
            this Accelerator accelerator,
            <#= indexName #> extent)
            where T : unmanaged => accelerator.AllocateExchangeBuffer<T>(
                extent,
                ExchangeBufferMode.PreferPagedLockedMemory);

        /// <summary>
        /// Allocates a new <#= dimensionName #> exchange buffer
        /// that allocates the specified amount of elements on the current
        /// accelerator. Furthermore, it keeps a buffer of the same size in pinned
        /// CPU memory to enable asynchronous memory transfers.
        /// </summary>
        /// <typeparam name="T">The element type.</typeparam>
        /// <param name="accelerator">The associated accelerator to use.</param>
        /// <param name="extent">The extent (number of elements to allocate).</param>
        /// <param name="mode">The exchange buffer mode to use.</param>
        /// <returns>The allocated <#= dimensionName #> exchange buffer.</returns>
        public static <#= typeName #><T> AllocateExchangeBuffer<T> (
            this Accelerator accelerator,
            <#= indexName #> extent,
            ExchangeBufferMode mode)
            where T : unmanaged
        {
            var gpuBuffer = accelerator.Allocate<T>(extent);
            return new <#= typeName #><T>(gpuBuffer, mode);
        }
    <#}
    #>}
    <#for(int i = 1; i <= top; i++)
    {#>
    <# var indexName = $"LongIndex{i}"; #>
    <# var dimensionName = $"{i}D"; #>
    <# var typeName = i == 1 ? "ExchangeBuffer" : $"ExchangeBuffer{dimensionName}"; #>
    <# var arrayViewType = $"ArrayView<T, {indexName}>"; #>
    <# var highLevelView =  i == 1 ? "ArrayView" : $"ArrayView{dimensionName}"; #>
    <# var memoryBufferType = $"MemoryBuffer<T, {indexName}>"; #>
    <# var highLevelMemBuf =  i == 1 ? "MemoryBuffer" :
        $"MemoryBuffer{dimensionName}"; #>

    /// <summary>
    /// <#= dimensionName #> implementation of
    /// <see cref="ExchangeBufferBase{T, TIndex}"/>
    /// </summary>
    /// <typeparam name="T">The element type.</typeparam>
    /// <remarks>Members of this class are not thread safe.</remarks>
    public sealed unsafe class <#=typeName#><T> : ExchangeBufferBase<T, <#=indexName#>>
        where T : unmanaged
    {
        #region Instance

        /// <summary>
        /// Initializes this memory buffer.
        /// </summary>
        /// <param name="buffer">The underlying memory buffer.</param>
        /// <param name="mode">The current buffer allocation mode.</param>
        internal <#= typeName #>(
            <#= memoryBufferType #> buffer,
            ExchangeBufferMode mode)
            : base(buffer, mode)
        {
            <#if(i > 1)
            {#>var baseView = new ArrayView<T>(CPUMemory, 0, buffer.Length);
            CPUArrayView = new <#= arrayViewType #>(baseView, buffer.Extent);
            <#}
            else
            {#>CPUArrayView = new ArrayView<T>(CPUMemory, 0, buffer.Length);
            <#}#>

            // Cache local data
            Buffer = buffer;
            NativePtr = buffer.NativePtr;
            View = buffer.View;
            Extent = buffer.Extent;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Gets this buffer as a higher level memory buffer.
        /// </summary>
        /// <returns> A <see cref="<#= highLevelMemBuf #>{T}"/> containing
        /// the data in this exchanage buffer.
        /// </returns>
        public <#= highLevelMemBuf #><T> As<#= highLevelMemBuf #>() =>
            new <#= highLevelMemBuf #><T>(Buffer);

<#if(i > 1)
        {#>
        /// <summary>
        /// Gets the part of this buffer on CPU memory as a <#= dimensionName #> View
        /// using the current extent.
        /// </summary>
        /// <returns></returns>
        public <#= highLevelView #><T> As<#= dimensionName #>View() =>
            As<#= dimensionName #>View(Extent);

        /// <summary>
        /// Gets this buffer as a <#= dimensionName #> array from
        /// the accelerator using the default stream.
        /// </summary>
        /// <returns>The array containing all the elements in the buffer.</returns>
        [SuppressMessage(
            "Microsoft.Performance",
            "CA1814: PreferJaggedArraysOverMultidimensional",
            Target = "target")]
        public T[,<#if(i == 3){#>,<#}#>] GetAs<#= dimensionName #>Array() =>
            GetAs<#= dimensionName #>Array(Accelerator.DefaultStream);

        /// <summary>
        /// Gets this buffer as a <#= dimensionName #> array from the accelerator.
        /// </summary>
        /// <returns>The array containing all the elements in the buffer.</returns>
        [SuppressMessage(
            "Microsoft.Performance",
            "CA1814: PreferJaggedArraysOverMultidimensional",
            Target = "target")]
        public T[,<#if(i == 3){#>,<#}#>] GetAs<#= dimensionName #>Array(
            AcceleratorStream stream)
        {
            var buffer = new <#= highLevelMemBuf #><T>(Buffer);
            var array = buffer.GetAs<#= dimensionName #>Array(stream);
            buffer.Dispose();
            return array;
        }

<#}#>        #endregion
    }
<#}
#>}