// -----------------------------------------------------------------------------
//                                    ILGPU
//                     Copyright (c) 2016-2019 Marcel Koester
//                                www.ilgpu.net
//
// File: MemoryBuffers.tt/MemoryBuffers.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using ILGPU.Util;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace ILGPU.Runtime
{
<#  for (int i = 1; i <= 3; ++i) { #>
<#      var typeName = i == 1 ? "MemoryBuffer" : $"MemoryBuffer{i}D"; #>
<#      var arrayViewType = i == 1 ? "ArrayView" : $"ArrayView{i}D"; #>
<#      var indexType = i == 1 ? "Index" : $"Index{i}"; #>
    /// <summary>
    /// Represents a <#= i #>D memory buffer that can be used in the scope
    /// of ILGPU runtime kernels.
    /// </summary>
    /// <typeparam name="T">The element type.</typeparam>
    /// <remarks>Members of this class are not thread safe.</remarks>
    public sealed partial class <#= typeName #><T> : MemoryBuffer, IMemoryBuffer<T, <#= indexType #>>
        where T : struct
    {
        #region Constants

        /// <summary>
        /// Represents the size of an element in bytes.
        /// </summary>
        public static readonly int ElementSize = MemoryBuffer<T, <#= indexType #>>.ElementSize;

        #endregion

        #region Instance

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly MemoryBuffer<T, <#= indexType #>> buffer;

        /// <summary>
        /// Initializes this memory buffer.
        /// </summary>
        /// <param name="buffer">The wrapped buffer.</param>
        internal <#= typeName #>(MemoryBuffer<T, <#= indexType #>> buffer)
            : base(buffer.Accelerator, buffer.Extent.Size)
        {
            this.buffer = buffer;

            // Cache local data
            NativePtr = buffer.NativePtr;
            View = buffer.View;
            Extent = buffer.Extent;
        }

        #endregion

        #region Properties

        /// <summary>
        /// Returns the underlying generic memory buffer.
        /// </summary>
        public MemoryBuffer<T, <#= indexType #>> Buffer => buffer;

        /// <summary>
        /// Returns an array view that can access this array.
        /// </summary>
        public <#= arrayViewType #><T> View { get; }

        /// <summary>
        /// Returns the length of this buffer in bytes.
        /// </summary>
        public Index LengthInBytes => Length * ElementSize;

        /// <summary>
        /// Returns the extent of this buffer.
        /// </summary>
        public <#= indexType #> Extent { get; }

        #endregion

        #region MemoryBuffer Methods

        /// <summary>
        /// Sets the contents of the current buffer to zero.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        public override void MemSetToZero(AcceleratorStream stream) =>
            buffer.MemSetToZero(stream);

        /// <summary>
        /// Copies the current contents into a new byte array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <returns>A new array holding the requested contents.</returns>
        public override byte[] GetAsRawArray(AcceleratorStream stream) =>
            buffer.GetAsRawArray(stream);

        /// <summary>
        /// Copies the current contents into a new byte array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="byteOffset">The offset in bytes.</param>
        /// <param name="byteExtent">The extent in bytes (number of elements).</param>
        /// <returns>A new array holding the requested contents.</returns>
        protected internal override ArraySegment<byte> GetAsRawArray(
            AcceleratorStream stream,
            Index byteOffset,
            Index byteExtent) =>
            buffer.GetAsRawArray(stream, byteOffset, byteExtent);

        /// <summary>
        /// Copies the current contents into a new array using
        /// the default accelerator stream.
        /// </summary>
        /// <returns>A new array holding the requested contents.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T[] GetAsArray() => buffer.GetAsArray();

        /// <summary>
        /// Copies the current contents into a new array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <returns>A new array holding the requested contents.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T[] GetAsArray(AcceleratorStream stream) =>
            buffer.GetAsArray(stream);

        /// <summary>
        /// Copies the current contents into a new array using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="offset">The offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        /// <returns>A new array holding the requested contents.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T[] GetAsArray(<#= indexType #> offset, <#= indexType #> extent) =>
            buffer.GetAsArray(Accelerator.DefaultStream, offset, extent);

        /// <summary>
        /// Copies the current contents into a new array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="offset">The offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        /// <returns>A new array holding the requested contents.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T[] GetAsArray(
            AcceleratorStream stream,
            <#= indexType #> offset,
            <#= indexType #> extent) =>
            buffer.GetAsArray(stream, offset, extent);

        /// <summary>
        /// Returns a subview of the current view starting at the given offset.
        /// </summary>
        /// <param name="offset">The starting offset.</param>
        /// <returns>The new subview.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ArrayView<T, <#= indexType #>> GetSubView(<#= indexType #> offset) =>
            View.GetSubView(offset);

        /// <summary>
        /// Returns a subview of the current view starting at the given offset.
        /// </summary>
        /// <param name="offset">The starting offset.</param>
        /// <param name="subViewExtent">The extent of the new subview.</param>
        /// <returns>The new subview.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ArrayView<T, <#= indexType #>> GetSubView(
            <#= indexType #> offset,
            <#= indexType #> subViewExtent) =>
            View.GetSubView(offset, subViewExtent);

        /// <summary>
        /// Returns the underlying generic memory buffer.
        /// </summary>
        /// <returns>The underlying generic memory buffer.</returns>
        public MemoryBuffer<T, <#= indexType #>> ToMemoryBuffer() => buffer;

        /// <summary>
        /// Returns an array view that can access this array.
        /// </summary>
        /// <returns>An array view that can access this array.</returns>
        public ArrayView<T, <#= indexType #>> ToArrayView() => View;

        #endregion

        #region View Methods

        /// <summary>
        /// Copies elements from the current buffer to the target view.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target view.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            <#= arrayViewType #><T> target,
            <#= indexType #> sourceOffset) =>
            buffer.CopyTo(stream, target, sourceOffset);

        /// <summary>
        /// Copies elements from the current buffer to the target view using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="target">The target view.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(<#= arrayViewType #><T> target, <#= indexType #> sourceOffset) =>
            buffer.CopyTo(target, sourceOffset);

        /// <summary>
        /// Copies elements from the current buffer to the target view using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="target">The target view.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            ArrayView<T, <#= indexType #>> target,
            <#= indexType #> sourceOffset) =>
            buffer.CopyTo(target, sourceOffset);

        /// <summary>
        /// Copies elements from the current buffer to the target view.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target view.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            ArrayView<T, <#= indexType #>> target,
            <#= indexType #> sourceOffset) =>
            buffer.CopyTo(stream, target, sourceOffset);

        /// <summary>
        /// Copies elements to the current buffer from the source view.
        /// </summary>
        /// <param name="source">The source view.</param>
        /// <param name="targetOffset">The target offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(<#= arrayViewType #><T> source, <#= indexType #> targetOffset) =>
            buffer.CopyFrom(source, targetOffset);

        /// <summary>
        /// Copies elements to the current buffer from the source view.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source view.</param>
        /// <param name="targetOffset">The target offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            AcceleratorStream stream,
            <#= arrayViewType #><T> source,
            <#= indexType #> targetOffset) =>
            buffer.CopyFrom(stream, source, targetOffset);

        /// <summary>
        /// Copies elements to the current buffer from the source view using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="source">The source view.</param>
        /// <param name="targetOffset">The target offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            ArrayView<T, <#= indexType #>> source,
            <#= indexType #> targetOffset) =>
            buffer.CopyFrom(source, targetOffset);

        /// <summary>
        /// Copies elements to the current buffer from the source view.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source view.</param>
        /// <param name="targetOffset">The target offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            AcceleratorStream stream,
            ArrayView<T, <#= indexType #>> source,
            <#= indexType #> targetOffset) =>
            buffer.CopyFrom(stream, source, targetOffset);

        #endregion

        #region Copy Methods

        /// <summary>
        /// Copies elements from the current buffer to the target buffer using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="target">The target buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(<#= typeName #><T> target, <#= indexType #> sourceOffset) =>
            buffer.CopyTo(target.buffer, sourceOffset);

        /// <summary>
        /// Copies elements from the current buffer to the target buffer.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            <#= typeName #><T> target,
            <#= indexType #> sourceOffset) =>
            buffer.CopyTo(
                stream,
                target,
                sourceOffset,
                default,
                Extent);

        /// <summary>
        /// Copies elements from the current buffer to the target buffer using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="target">The target buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            <#= typeName #><T> target,
            <#= indexType #> sourceOffset,
            <#= indexType #> targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyTo(
                target,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies elements from the current buffer to the target buffer.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            <#= typeName #><T> target,
            <#= indexType #> sourceOffset,
            <#= indexType #> targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyTo(
                stream,
                target,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies a single element of this buffer to the given target variable
        /// in CPU memory using the default accelerator stream.
        /// </summary>
        /// <param name="target">The target location.</param>
        /// <param name="targetIndex">The target index.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(out T target, <#= indexType #> targetIndex) =>
            buffer.CopyTo(out target, targetIndex);

        /// <summary>
        /// Copies a single element of this buffer to the given target variable
        /// in CPU memory.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target location.</param>
        /// <param name="targetIndex">The target index.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            out T target,
            <#= indexType #> targetIndex) =>
            buffer.CopyTo(stream, out target, targetIndex);

        /// <summary>
        /// Copies the contents of this buffer into the given array using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="target">The target array.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            T[] target,
            <#= indexType #> sourceOffset,
            int targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyTo(
                target,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies the contents of this buffer into the given array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="target">The target array.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo(
            AcceleratorStream stream,
            T[] target,
            <#= indexType #> sourceOffset,
            int targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyTo(
                stream,
                target,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies elements to the current buffer from the source buffer using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="source">The source buffer.</param>
        /// <param name="targetOffset">The target offset.</param>
        public void CopyFrom(<#= typeName #><T> source, <#= indexType #> targetOffset) =>
            buffer.CopyFrom(source, targetOffset);

        /// <summary>
        /// Copies elements to the current buffer from the source buffer using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="source">The source buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            <#= typeName #><T> source,
            <#= indexType #> sourceOffset,
            <#= indexType #> targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyFrom(
                source,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies elements to the current buffer from the source buffer.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source buffer.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            AcceleratorStream stream,
            <#= typeName #><T> source,
            <#= indexType #> sourceOffset,
            <#= indexType #> targetOffset,
            <#= indexType #> extent) =>
            buffer.CopyFrom(
                stream,
                source,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies elements to the current buffer from the source buffer.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source buffer.</param>
        /// <param name="targetOffset">The target offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            AcceleratorStream stream,
            <#= typeName #><T> source,
            <#= indexType #> targetOffset) =>
            buffer.CopyFrom(
                stream,
                source,
                targetOffset);

        /// <summary>
        /// Copies a single element from CPU memory to this buffer using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="source">The source value.</param>
        /// <param name="sourceIndex">The source index.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(T source, <#= indexType #> sourceIndex) =>
            buffer.CopyFrom(source, sourceIndex);

        /// <summary>
        /// Copies a single element from CPU memory to this buffer.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source value.</param>
        /// <param name="sourceIndex">The source index.</param>
        public void CopyFrom(
            AcceleratorStream stream,
            T source,
            <#= indexType #> sourceIndex) =>
            buffer.CopyFrom(
                stream,
                source,
                sourceIndex);

        /// <summary>
        /// Copies the contents to this buffer from the given array using
        /// the default accelerator stream.
        /// </summary>
        /// <param name="source">The source array.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            T[] source,
            int sourceOffset,
            <#= indexType #> targetOffset,
            int extent) =>
            buffer.CopyFrom(
                source,
                sourceOffset,
                targetOffset,
                extent);

        /// <summary>
        /// Copies the contents to this buffer from the given array.
        /// </summary>
        /// <param name="stream">The used accelerator stream.</param>
        /// <param name="source">The source array.</param>
        /// <param name="sourceOffset">The source offset.</param>
        /// <param name="targetOffset">The target offset.</param>
        /// <param name="extent">The extent (number of elements).</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(
            AcceleratorStream stream,
            T[] source,
            int sourceOffset,
            <#= indexType #> targetOffset,
            int extent) =>
            buffer.CopyFrom(
                stream,
                source,
                sourceOffset,
                targetOffset,
                extent);

        #endregion

        #region Operators

        /// <summary>
        /// Implicitly converts this buffer into an array view.
        /// </summary>
        /// <param name="buffer">The source buffer.</param>
        public static implicit operator <#= arrayViewType #><T>(<#= typeName #><T> buffer)
        {
            Debug.Assert(buffer != null, "Invalid buffer");
            return buffer.View;
        }

        /// <summary>
        /// Implicitly converts this buffer into an array view.
        /// </summary>
        /// <param name="buffer">The source buffer.</param>
        public static implicit operator MemoryBuffer<T, <#= indexType #>>(<#= typeName #><T> buffer)
        {
            Debug.Assert(buffer != null, "Invalid buffer");
            return buffer.buffer;
        }

        #endregion

        #region IDisposable

        /// <summary cref="DisposeBase.Dispose(bool)"/>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
                buffer.Dispose();
        }

        #endregion
    }

<#  } #>
}