// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ArrayViews.tt/ArrayViews.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var alignmentValues = new int[] { 16, 32, 64, 128, 256, 512 }; #>

using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ILGPU.Runtime
{
    partial class ArrayViewExtensions
    {
<#  foreach (var alignment in alignmentValues) { #>
        /// <summary>
        /// Aligns the given array view to the alignment of <#= alignment #> bytes and
        /// returns a view spanning the initial unaligned parts of the given view and
        /// another view (main) spanning the remaining aligned elements of the given view.
        /// </summary>
        /// <param name="view">The source view.</param>
        /// <returns>
        /// The prefix and main views pointing to non-aligned and aligned sub-views of
        /// the given view.
        /// </returns>
        public static (ArrayView<T> Prefix, ArrayView<T> Main) AlignTo<#= alignment #><T>(
            this ArrayView<T> view)
            where T : unmanaged =>
            AlignTo(view, <#= alignment #>);

        /// <summary>
        /// Aligns the given array view to the alignment of <#= alignment #> bytes and
        /// returns a view spanning the initial unaligned parts of the given view and
        /// another view (main) spanning the remaining aligned elements of the given view.
        /// </summary>
        /// <param name="view">The source view.</param>
        /// <returns>
        /// The prefix and main views pointing to non-aligned and aligned sub-views of
        /// the given view.
        /// </returns>
        public static (ArrayView<T> Prefix, ArrayView<T> Main) AlignTo<#= alignment #><T>(
            this ArrayView1D<T, Stride1D.Dense> view)
            where T : unmanaged =>
            AlignTo(view.BaseView, <#= alignment #>);

        /// <summary>
        /// Ensures that the array view is aligned to <#= alignment #> of bytes
        /// and returns the input view. Note that this operation explicitly generates an
        /// operation in the ILGPU IR that preserves these semantics. This enables the
        /// generation of debug assertions and guides the internal vectorization analysis
        /// to assume the given alignment even though it might not be able to prove that
        /// the given alignment is valid.
        /// </summary>
        /// <param name="view">The source view.</param>
        /// <returns>The validated input view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ArrayView<T> AsAligned<#= alignment #><T>(this ArrayView<T> view)
            where T : unmanaged =>
            AsAligned(view, <#= alignment #>);

        /// <summary>
        /// Ensures that the array view is aligned to <#= alignment #> of bytes
        /// and returns the input view. Note that this operation explicitly generates an
        /// operation in the ILGPU IR that preserves these semantics. This enables the
        /// generation of debug assertions and guides the internal vectorization analysis
        /// to assume the given alignment even though it might not be able to prove that
        /// the given alignment is valid.
        /// </summary>
        /// <param name="view">The source view.</param>
        /// <returns>The validated input view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ArrayView1D<T, Stride1D.Dense> AsAligned<#= alignment #><T>(
            this ArrayView1D<T, Stride1D.Dense> view)
            where T : unmanaged =>
            AsAligned(view.BaseView, <#= alignment #>);

<#  } #>
    }

<#  foreach (var dim in IndexDimensions) { #>
<#      var dimension = dim.Dimension; #>
<#      var typeName = $"ArrayView{dimension}D"; #>
<#      var intIndexType = $"Index{dimension}D"; #>
<#      var indexType = "Long" + intIndexType; #>
<#      var strideName = $"Stride{dimension}D"; #>
<#      var iStrideName = $"I{strideName}"; #>
<#      var indexTypes = new []
        {
            (intIndexType, "int", "32"),
            (indexType, "long", "64")
        }; #>
    /// <summary>
    /// Represents a general view to an array on an accelerator.
    /// </summary>
    /// <typeparam name="T">The element type.</typeparam>
    /// <typeparam name="TStride">The <#= dimension #>D stride type.</typeparam>
    [DebuggerTypeProxy(typeof(DebugArrayView<#= dimension #>D<,>))]
    [DebuggerDisplay("Extent = {Extent}, Stride = {Stride}, Length = {Length}")]
    [StructLayout(LayoutKind.Sequential)]
    public readonly partial struct <#= typeName #><T, TStride> :
        IArrayView<T, <#= intIndexType #>, <#= indexType #>, TStride>
        where T : unmanaged
        where TStride : struct, <#= iStrideName #>
    {
        #region Static

        /// <summary>
        /// Represents the native size of a single element.
        /// </summary>
        public static readonly int ElementSize = ArrayView<T>.ElementSize;

        /// <summary>
        /// Represents an empty view that is not valid and has a length of 0 elements
        /// and a default stride initialized with its default value.
        /// </summary>
        public static readonly <#= typeName #><T, TStride> Empty = GetEmpty(default);

        /// <summary>
        /// Returns an empty view using the given stride.
        /// </summary>
        /// <param name="stride">The stride to use.</param>
        /// <returns>The created empty view instance.</returns>
        public static <#= typeName #><T, TStride> GetEmpty(TStride stride) =>
            new <#= typeName #><T, TStride>(
                ArrayView<T>.Empty,
                <#= indexType #>.Zero,
                stride);

        #endregion

        #region Instance

        /// <summary>
        /// Constructs a new <#= dimension #>D array view.
        /// </summary>
        /// <param name="baseView">The source view.</param>
        /// <param name="extent">The extent (number of elements).</param>
        /// <param name="stride">The stride to use.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#= typeName #>(
            ArrayView<T> baseView,
            <#= indexType #> extent,
            TStride stride)
        {
            BaseView = baseView;
            Extent = extent;
            Stride = stride;
        }

        #endregion

        #region Properties

        /// <summary>
        /// Returns the associated buffer.
        /// </summary>
        public ArrayView<T> BaseView { get; }

        /// <summary>
        /// Returns the underlying memory buffer.
        /// </summary>
        /// <remarks>This property is not supported on accelerators.</remarks>
        readonly MemoryBuffer IArrayView.Buffer
        {
            [NotInsideKernel]
            get => BaseView.Buffer;
        }

        /// <summary>
        /// Returns the underlying element size.
        /// </summary>
        readonly int IArrayView.ElementSize => ElementSize;

        /// <summary>
        /// Returns the extent of this view.
        /// </summary>
        public <#= indexType #> Extent { get; }

        /// <summary>
        /// Returns the 32-bit extent of this view.
        /// </summary>
        public readonly <#= intIndexType #> IntExtent => Extent.ToIntIndex();

        /// <summary>
        /// Returns the associated stride.
        /// </summary>
        public TStride Stride { get; }

        /// <summary>
        /// Returns true if this view points to a valid location.
        /// </summary>
        public readonly bool IsValid => BaseView.IsValid;

        /// <summary>
        /// Returns the strided length of this array view.
        /// </summary>
        public readonly long Length => Stride.ComputeBufferLength(Extent);

        /// <summary>
        /// Returns the strided 32-bit length of this array view.
        /// </summary>
        public readonly int IntLength
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                long result = Length;
                IndexTypeExtensions.AssertIntIndexRange(result);
                return (int)result;
            }
        }

        /// <summary>
        /// Returns the length of this array view in bytes.
        /// </summary>
        public readonly long LengthInBytes => Length * ElementSize;

<#      foreach (var (index, baseType, size) in indexTypes) { #>
<#          var dimRange = Enumerable.Range(0, dim.Dimension); #>
        /// <summary>
        /// Access the element at the given <#= size #>-bit index.
        /// </summary>
        /// <param name="index">The element index.</param>
        /// <returns>The element at the given index.</returns>
        public readonly ref T this[<#= index #> index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => ref BaseView[ComputeLinearIndex(index)];
        }

<#      if (dim.Dimension > 1) { #>
        /// <summary>
        /// Access the element at the given <#= size #>-bit index.
        /// </summary>
<#      for (int i = 0; i < dim.Dimension; ++i) { #>
        /// <param name="<#= IndexDimensions[i].FieldName #>">
        /// The <#= IndexDimensions[i].PropertyName #> index.
        /// </param>
<#      } #>
        /// <returns>The element at the given index.</returns>
        public readonly ref T this[
            <#= string.Join(
                ", ",
                dimRange.Select(i => $"{baseType} {IndexDimensions[i].FieldName}")) #>]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => ref this[new <#= index #>(<#= string.Join(
                ", ",
                dimRange.Select(i => IndexDimensions[i].FieldName)) #>)];
        }
<#      } #>

<#      } #>
        #endregion

        #region Methods

<#      foreach (var (index, baseType, size) in indexTypes) { #>
        /// <summary>
        /// Computes the linear <#= size #>-bit element address using the given index.
        /// </summary>
        /// <param name="index">The element index.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= baseType #> ComputeLinearIndex(<#= index #> index) =>
<#          if (size == "32") { #>
            Stride.ComputeElementIndexChecked(index, IntExtent);
<#          } else { #>
            Stride.ComputeElementIndexChecked(index, Extent);
<#          } #>

        /// <summary>
        /// Returns a sub view of the current view starting at the given
        /// <#= size #>-bit offset.
        /// </summary>
        /// <param name="index">The starting offset.</param>
        /// <param name="extent">The extent of the new sub view.</param>
        /// <returns>The raw sub view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= typeName #><T, TStride> SubView(
            <#= index #> index,
            <#= index #> extent)
        {
<#      for (int i = 0; i < dim.Dimension; ++i) { #>
<#          var iName = IndexDimensions[i].PropertyName; #>
<#          var thisExtent = $"({baseType})Extent.{iName}"; #>
            Trace.Assert(
                index.<#= iName #> >= 0 &
                (index.<#= iName #> + extent.<#= iName #> <= <#= thisExtent #>
                 | (index.<#= iName #> == 0 & extent.<#= iName #> == 0)),
                "Index/Extent <#= iName #> out of bounds");
<#      } #>
            <#= baseType #> offset = ComputeLinearIndex(index);
            <#= baseType #> length = Stride.ComputeBufferLength(extent);
            var view = BaseView.SubView(offset, length);
            return new <#= typeName #><T, TStride>(
                view,
                extent,
                Stride);
        }

<#      } #>

        /// <summary>
        /// Returns a variable view that points to the element at the specified index.
        /// </summary>
        /// <param name="index">The variable index.</param>
        /// <returns>The resolved variable view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly VariableView<T> VariableView(<#= intIndexType #> index) =>
            BaseView.VariableView(ComputeLinearIndex(index));

        /// <summary>
        /// Returns a variable view that points to the element at the specified index.
        /// </summary>
        /// <param name="index">The variable index.</param>
        /// <returns>The resolved variable view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly VariableView<T> VariableView(<#= indexType #> index) =>
            BaseView.VariableView(ComputeLinearIndex(index));

        /// <summary>
        /// Returns a contiguous view to this view.
        /// </summary>
        public readonly ArrayView<T> AsContiguous() => BaseView;

<#      if (dimension < 2) { #>
        /// <summary>
        /// Converts this array view into a dense version.
        /// </summary>
        /// <returns>The updated array view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= typeName #><T, <#= strideName #>.Dense> AsDense()
        {
            Trace.Assert(
                Stride.StrideExtent == <#= intIndexType #>.One,
                "Incompatible dense stride");
            return new <#= typeName #><T, <#= strideName #>.Dense>(
                BaseView,
                Extent,
                default);
        }

<#      } #>
        /// <summary>
        /// Converts this array view into a general version.
        /// </summary>
        /// <param name="stride">The generic stride information to use.</param>
        /// <returns>The updated array view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= typeName #><T, <#= strideName #>.General> AsGeneral(
            <#= strideName #>.General stride) =>
            new <#= typeName #><T, <#= strideName #>.General>(
                BaseView,
                Extent,
                stride);

        /// <summary>
        /// Converts this array view into a general version.
        /// </summary>
        /// <returns>The updated array view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= typeName #><T, <#= strideName #>.General> AsGeneral() =>
            AsGeneral(Stride.AsGeneral());

        #endregion

        #region Object

        /// <summary>
        /// Returns the string representation of this view.
        /// </summary>
        /// <returns>The string representation of this view.</returns>
        /// <remarks>This method is not supported on accelerators.</remarks>
        [NotInsideKernel]
        public readonly override string ToString() => BaseView.ToString();

        #endregion
    }

<#  } #>
}