// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: LibDevice.tt/LibDevice.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../../Static/TextTransformHelpers.ttinclude" #>
<#@ include file="../../Static/TypeInformation.ttinclude" #>
<#@ include file="../../Static/CudaLibDevice.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath(".");
var functions = LibDeviceFunctions.Load(rootPath, "../../Static/CudaLibDevice.xml");
#>
using ILGPU.Backends.PTX;
using System.Runtime.CompilerServices;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS3001 // Argument type is not CLS-compliant
#pragma warning disable CS3002 // Return type is not CLS-compliant
#pragma warning disable IDE0018 // Inline variable declaration
#pragma warning disable IDE1006 // Naming Styles

namespace ILGPU.Runtime.Cuda
{
    /// <summary>
    /// Provides bindings for Cuda LibDevice functions.
    /// </summary>
    /// <remarks>
    /// Deals with thunking the Cuda LibDevice functions, because the compiled PTX uses
    /// u32/u64 registers rather than f32/f64 registers.
    /// </remarks>
    public static class LibDevice
    {
<#
    foreach (var func in functions) {
        WriteLibDeviceFunction(func);
    }

#>
    }
}

#pragma warning restore IDE1006 // Naming Styles
#pragma warning restore IDE0018 // Inline variable declaration
#pragma warning restore CS3002 // Return type is not CLS-compliant
#pragma warning restore CS3001 // Argument type is not CLS-compliant
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

<#+

void WriteLibDeviceFunction(LibDeviceFunction func)
{
    PushIndent(2);
    WriteLibDeviceInterop(func);
    PopIndent();
}

void WriteLibDeviceInterop(LibDeviceFunction func)
{
    // Write function signature
    WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
    Write($"public static ");
    Write(func.ReturnType);
    Write(" ");
    Write(func.DisplayName);
    WriteLine("(");
    PushIndent();
    for (int i = 0; i < func.Parameters.Length; i++)
    {
        var param = func.Parameters[i];
        Write(param.FlagsExpression);
        Write(param.Type);
        Write($" {param.Name}");
        if (i < func.Parameters.Length - 1)
            Write(",");
        else
            Write(")");
        WriteLine();
    }
    PopIndent();

    // Write function arguments
    WriteLine("{");
    PushIndent();
    for (int i = 0; i < func.Parameters.Length; i++)
    {
        var param = func.Parameters[i];
        if (string.IsNullOrEmpty(param.Flags))
        {
            if (param.Type == "float" || param.Type == "double")
                WriteLine($"var arg{i} = Interop.FloatAsInt({param.Name});");
            else
                WriteLine($"var arg{i} = {param.Name};");
        }
        else
        {
            if (param.Type == "float")
                WriteLine($"uint arg{i};");
            else if (param.Type == "double")
                WriteLine($"ulong arg{i};");
            else
                WriteLine($"{param.Type} arg{i};");
        }
    }

    // Write function call
    WriteLine();
    if (func.ReturnType != "void")
        Write("var result = ");
    WriteLine($"PTXLibDeviceMethods.{func.Name}(");
    PushIndent();
    for (int i = 0; i < func.Parameters.Length; i++)
    {
        var param = func.Parameters[i];
        Write($"{param.FlagsExpression}arg{i}");

        if (i < func.Parameters.Length - 1)
            Write(",");
        else
            Write(");");
        WriteLine();
    }
    PopIndent();

    // Write function return
    WriteLine();
    for (int i = 0; i < func.Parameters.Length; i++)
    {
        var param = func.Parameters[i];
        if (!string.IsNullOrEmpty(param.Flags))
        {
            if (param.Type == "float" || param.Type == "double")
                WriteLine($"{param.Name} = Interop.IntAsFloat(arg{i});");
            else
                WriteLine($"{param.Name} = arg{i};");
        }
    }

    if (func.ReturnType == "float" || func.ReturnType == "double")
        WriteLine("return Interop.IntAsFloat(result);");
    else if (func.ReturnType != "void")
        WriteLine("return result;");

    PopIndent();
    WriteLine("}");
    WriteLine();
}

#>