// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CuFFT.ttinclude
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+

public class InputType
{
    public InputType(string realType, string[] complexTypes)
    {
        RealType = realType;
        ComplexTypes = complexTypes;
    }

    public string RealType { get; }
    public string[] ComplexTypes { get; }

    public string TypeCodeC2C => RealType == "float" ? "C2C" : "Z2Z";
    public string TypeCodeC2R => RealType == "float" ? "C2R" : "Z2D";
    public string TypeCodeR2C => RealType == "float" ? "R2C" : "D2Z";
}

public static readonly InputType[] InputTypes =
    new[]
    {
        new InputType(
            "float",
            new[]
            {
                "(float Real, float Imaginary)",
                "Float2",
            }),
        new InputType(
            "double",
            new[]
            {
                "Complex",
                "(double Real, double Imaginary)",
                "Double2",
            }),
    };

public static readonly (string DisplayName, string TransformCode)[] InputCombinations =
    InputTypes
    .SelectMany(type =>
    {
        var precisionName = type.RealType == "float"
            ? "single-precision"
            : "double-precision";
        return new[]
        {
            (
                $"complex to complex ({precisionName})",
                type.TypeCodeC2C
            ),
            (
                $"complex to real ({precisionName})",
                type.TypeCodeC2R
            ),
            (
                $"real to complex ({precisionName})",
                type.TypeCodeR2C
            )
        };
    })
    .ToArray();

#>