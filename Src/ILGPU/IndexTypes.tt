// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: IndexTypes.tt/IndexTypes.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ILGPU
{
<#  foreach (var def in IndexDefinitions) { #>
<#      var name = def.Name; #>
<#      var dimension = def.Dimension; #>
<#      var otherName = def.OppositeDefinition.Name; #>
<#      var baseType = def.BaseTypeName; #>
    /// <summary>
    /// Represents a <#= dimension #>D index.
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    [IndexType((IndexType)<#= def.Kind #>)]
    public readonly partial struct <#= name #> :
        <#= def.InterfaceName #><<#= name #>, <#= otherName #>>
    {
        #region Static

        /// <summary>
        /// Represents an invalid index (-1);
        /// </summary>
        public static readonly <#= name #> Invalid = new <#= name #>(-1);

        /// <summary>
        /// Represents an index with zero.
        /// </summary>
        public static readonly <#= name #> Zero = new <#= name #>(0);

        /// <summary>
        /// Represents an index with 1.
        /// </summary>
        public static readonly <#= name #> One = new <#= name #>(1);

        /// <summary>
        /// Returns the main constructor to create a new index instance.
        /// </summary>
        internal static ConstructorInfo MainConstructor =
            typeof(<#= name #>).GetConstructor(
                new Type[]
                {
                    <#= def.Expression(", ", p => $"typeof({baseType})") #>
                });

        /// <summary>
        /// Computes min(first, second).
        /// </summary>
        /// <param name="first">The first argument.</param>
        /// <param name="second">The second argument.</param>
        /// <returns>The minimum of first and second value.</returns>
        public static <#= name #> Min(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(
                    $", {Environment.NewLine}                ",
                    p => $"IntrinsicMath.Min(first.{p}, second.{p})") #>);

        /// <summary>
        /// Computes max(first, second).
        /// </summary>
        /// <param name="first">The first argument.</param>
        /// <param name="second">The second argument.</param>
        /// <returns>The maximum of first and second value.</returns>
        public static <#= name #> Max(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(
                    $", {Environment.NewLine}                ",
                    p => $"IntrinsicMath.Max(first.{p}, second.{p})") #>);

        /// <summary>
        /// Clamps the given index value according to Max(Min(clamp, max), min).
        /// </summary>
        /// <param name="value">The value to clamp.</param>
        /// <param name="min">The first argument.</param>
        /// <param name="max">The second argument.</param>
        /// <returns>The clamped value in the interval [min, max].</returns>
        public static <#= name #> Clamp(
            <#= name #> value,
            <#= name #> min,
            <#= name #> max) =>
            new <#= name #>(
                <#= def.Expression(
                    $", {Environment.NewLine}                ",
                    p => $"IntrinsicMath.Clamp(value.{p}, min.{p}, max.{p})") #>);

        #endregion

        #region Instance

<# if (dimension > 1) { #>
        /// <summary>
        /// Constructs a new index using a single value for each component.
        /// </summary>
        /// <param name="value">The value.</param>
        public <#= name #>(<#= baseType #> value)
        {
<#      for (int j = 0; j < dimension; ++j) { #>
            <#= IndexDimensions[j].PropertyName #> = value;
<#      } #>
        }

<# } #>
        /// <summary>
        /// Constructs a new index.
        /// </summary>
        <#= def.Expression(
            $"{Environment.NewLine}        ",
            p =>
                $"/// <param name=\"{p.ToLower()}\">The {p.ToLower()} value.</param>") #>
        public <#= name #>(<#= def.Expression(", ", p => $"{baseType} {p.ToLower()}") #>)
        {
<#      for (int j = 0; j < dimension; ++j) { #>
            <#= IndexDimensions[j] #> = <#= IndexDimensions[j].FieldName #>;
<#      } #>
        }

        #endregion

        #region Properties

<# for (int j = 0; j < dimension; ++j) { #>
        /// <summary>
        /// Returns the <#= IndexDimensions[j] #> index.
        /// </summary>
        public <#= baseType #> <#= IndexDimensions[j] #> { get; }

<# } #>
        /// <summary>
        /// Returns true if this is the first index.
        /// </summary>
        public readonly bool IsFirst =>
            <#= def.Expression(" & ", dim => $"{dim} == 0") #>;

        /// <summary>
        /// Returns the size represented by this index.
        /// </summary>
<# if (def.IsIntIndex) { #>
        public readonly int Size
        {
            get
            {
                IndexTypeExtensions.AssertIntIndexRange(LongSize);
                return <#= def.Expression(" * ", p => p) #>;
            }
        }

        /// <summary>
        /// Returns the size represented by this index.
        /// </summary>
        public readonly long LongSize =>
            (long)<#= def.Expression(" * ", p => p) #>;

        /// <summary>
        /// Returns the size represented by this index.
        /// </summary>
        readonly long IIndex.Size => LongSize;
<# } else { #>
        /// <summary>
        /// Returns the size represented by this index.
        /// </summary>
        public readonly long Size =>
            <#= def.Expression(" * ", p => p) #>;
<# } #>

        /// <summary>
        /// Returns the current index type.
        /// </summary>
        public readonly IndexType IndexType => (IndexType)<#= def.Kind #>;

        #endregion

        #region Index

<# if (def.IsIntIndex) { #>
        /// <summary>
        /// Converts this index to a long integer index.
        /// </summary>
        /// <returns>The resulting long integer representation.</returns>
        public readonly <#= otherName #> ToLongIndex() =>
            new <#= otherName #>(
                <#= def.Expression(", ", p => p) #>);
<# } else { #>
        /// <summary>
        /// Converts this index to an integer index.
        /// </summary>
        /// <returns>The resulting integer representation.</returns>
        public readonly <#= otherName #> ToIntIndex()
        {
<# for (int j = 0; j < dimension; ++j) { #>
            IndexTypeExtensions.AssertIntIndexRange(<#= IndexDimensions[j] #>);
<# } #>
            return new <#= otherName #>(
                <#= def.Expression(", ", p => $"(int){p}") #>);
        }
<# } #>

        #endregion

        #region ILinearizableIndex

        /// <summary>
        /// Computes the linear index of this index by using the provided n-D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <returns>The computed linear index of this index.</returns>
<# if (def.IsIntIndex) { #>
        public readonly int ComputeLinearIndex(<#= name #> dimension) =>
            ComputeLinearIndex(dimension, this);
<# } else { #>
        readonly int ILinearizableIndex<<#= name #>>.ComputeLinearIndex(
            <#= name #> dimension)
        {
            long linearIndex = ComputeLinearIndex(dimension, this);
            IndexTypeExtensions.AssertIntIndexRange(linearIndex);
            return (int)linearIndex;
        }

        /// <summary>
        /// Computes the linear index of this index by using the provided n-D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <returns>The computed linear index of this index.</returns>
        public readonly long ComputeLinearIndex(<#= name #> dimension) =>
            ComputeLongLinearIndex(dimension);
<# } #>

        /// <summary>
        /// Computes the linear index of this index by using the provided n-D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <returns>The computed linear index of this index.</returns>
        public readonly long ComputeLongLinearIndex(<#= name #> dimension) =>
            ComputeLinearIndex(dimension, this);

        /// <summary>
        /// Reconstructs an index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <returns>The reconstructed index.</returns>
        public readonly <#= name #> ReconstructIndex(int linearIndex) =>
            ReconstructIndex(linearIndex, this);

        /// <summary>
        /// Reconstructs an index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <returns>The reconstructed index.</returns>
        public readonly <#= name #> ReconstructIndex(long linearIndex) =>
            ReconstructIndex(linearIndex, this);

        #endregion

        #region IGenericIndex

        /// <summary>
        /// Returns true if the current index is greater than or equal to 0 and
        /// is less than the given dimension.
        /// </summary>
        /// <param name="dimension">The dimension bounds.</param>
        /// <returns>True if the current index is inside the given bounds.</returns>
        public readonly bool InBounds(<#= name #> dimension) =>
            <#= def.Expression(" & ", p => $"{p} >= 0 & {p} < dimension.{p}") #>;

        /// <summary>
        /// Returns true if the current index is greater than or equal to 0 and
        /// is less than or equal to the given dimension.
        /// </summary>
        /// <param name="dimension">The dimension bounds.</param>
        /// <returns>True if the current index is inside the given bounds.</returns>
        public readonly bool InBoundsInclusive(<#= name #> dimension) =>
            <#= def.Expression(" & ", p => $"{p} >= 0 & {p} <= dimension.{p}") #>;

        /// <summary>
        /// Computes this + right-hand side.
        /// </summary>
        /// <param name="rhs">The right-hand side of the addition.</param>
        /// <returns>The added index.</returns>
        public readonly <#= name #> Add(<#= name #> rhs) => this + rhs;

        /// <summary>
        /// Computes this - right-hand side.
        /// </summary>
        /// <param name="rhs">The right-hand side of the subtraction.</param>
        /// <returns>The subtracted index.</returns>
        public readonly <#= name #> Subtract(<#= name #> rhs) => this - rhs;

        /// <summary>
        /// The given <paramref name="extent"/> describes a chunk of contiguous memory
        /// of elements with size <paramref name="elementSize"/>. The parameter
        /// <paramref name="newElementSize"/> describes the requested new element size.
        /// The result of this function is a new extent dimension that represents the
        /// given extent in the context of the new element size.
        /// </summary>
        /// <param name="extent">The current extent.</param>
        /// <param name="elementSize">
        /// The current element size in the scope of the current extent.
        /// </param>
        /// <param name="newElementSize">The new element size.</param>
        /// <returns>The adjusted extent to match the new element size.</returns>
        public readonly <#= name #> ComputedCastedExtent(
            <#= name #> extent,
            int elementSize,
            int newElementSize)
        {
            <#= baseType #> xExtent =
                (<#= baseType #>)(extent.X * elementSize / newElementSize);
            return new <#= name #>(
                xExtent
<# for (int j = 1; j < dimension; ++j) { #>
                , extent.<#= IndexDimensions[j] #>
<# } #>
            );
        }

        #endregion
<# if (dimension > 1) { #>

        #region ValueTuple

        /// <summary>
        /// Returns a value tuple that stores all dimensions.
        /// </summary>
        /// <returns>The constructed value tuple.</returns>
        public (<#= def.Expression(", ", p => $"{baseType} {p}") #>) ToValueTuple() =>
            (<#= def.Expression(", ", p => p) #>);

        /// <summary>
        /// Deconstructs the current instance into a tuple.
        /// </summary>
        <#= def.Expression(
            $"{Environment.NewLine}        ",
            p =>
                $"/// <param name=\"{p.ToLower()}\">The {p.ToLower()} value.</param>") #>
        public void Deconstruct(
            <#= def.Expression(", ", p => $"out {baseType} {p.ToLower()}") #>)
        {
            <#= def.Expression(
                $"{Environment.NewLine}            ",
                p => $"{p.ToLower()} = {p};") #>
        }

        #endregion
<# } #>

        #region IEquatable

        /// <summary>
        /// Returns true if the given index is equal to the current index.
        /// </summary>
        /// <param name="other">The other index.</param>
        /// <returns>True, if the given index is equal to the current index.</returns>
        public readonly bool Equals(<#= name #> other) => this == other;

        #endregion

        #region IComparable

        /// <summary cref="IComparable{T}.CompareTo(T)"/>
        public readonly int CompareTo(<#= name #> other)
        {
            if (this < other)
                return -1;
            else if (this > other)
                return 1;
            Debug.Assert(this == other);
            return 0;
        }

        #endregion

        #region Object

        /// <summary>
        /// Returns true if the given object is equal to the current index.
        /// </summary>
        /// <param name="obj">The other object.</param>
        /// <returns>True, if the given object is equal to the current index.</returns>
        public readonly override bool Equals(object obj) =>
            obj is <#= name #> other && Equals(other);

        /// <summary>
        /// Returns the hash code of this index.
        /// </summary>
        /// <returns>The hash code of this index.</returns>
        public readonly override int GetHashCode() =>
            <#= def.Expression(" ^ ", p => $"{p}.GetHashCode()") #>;

        /// <summary>
        /// Returns the string representation of this index.
        /// </summary>
        /// <returns>The string representation of this index.</returns>
        public readonly override string ToString() =>
            $"(<#= def.Expression(", ", p => $"{{{p}}}") #>)";

        #endregion

        #region Operators

<# if (def.IsIntIndex) { #>
        /// <summary>
        /// Converts this index to a long integer index.
        /// </summary>
        /// <param name="index">The index to convert.</param>
        /// <returns>The resulting long integer representation.</returns>
        public static implicit operator <#= otherName #>(<#= name #> index) =>
            index.ToLongIndex();
<# } else { #>
        /// <summary>
        /// Converts this index to an integer index.
        /// </summary>
        /// <param name="index">The index to convert.</param>
        /// <returns>The resulting integer representation.</returns>
        public static explicit operator <#= otherName #>(<#= name #> index) =>
            index.ToIntIndex();
<# } #>

<# if (dimension > 1) { #>
        /// <summary>
        /// Converts the given value tuple into an equivalent <see cref="<#= name #>"/>.
        /// </summary>
        /// <param name="values">The values.</param>
        public static implicit operator <#= name #>(
            (<#= def.Expression(", ", p => $"{baseType}") #>) values) =>
            new <#= name #>(
                values.Item1
<# for (int j = 2; j <= dimension; ++j) { #>
                , values.Item<#= j #>
<# } #>
                );

<# } #>
        /// <summary>
        /// Adds two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The added index.</returns>
        public static <#= name #> Add(<#= name #> first, <#= name #> second) =>
            first + second;

        /// <summary>
        /// Adds two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The added index.</returns>
        public static <#= name #> operator +(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(", ", p => $"first.{p} + second.{p}") #>);

        /// <summary>
        /// Subtracts two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The subtracted index.</returns>
        public static <#= name #> Subtract(<#= name #> first, <#= name #> second) =>
            first - second;

        /// <summary>
        /// Subtracts two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The subtracted index.</returns>
        public static <#= name #> operator -(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(", ", p => $"first.{p} - second.{p}") #>);

        /// <summary>
        /// Multiplies two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The multiplied index.</returns>
        public static <#= name #> Multiply(<#= name #> first, <#= name #> second) =>
            first * second;

        /// <summary>
        /// Multiplies two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The multiplied index.</returns>
        public static <#= name #> operator *(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(", ", p => $"first.{p} * second.{p}") #>);

        /// <summary>
        /// Divides two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The divided index.</returns>
        public static <#= name #> Divide(<#= name #> first, <#= name #> second) =>
            first / second;

        /// <summary>
        /// Divides two indices.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>The divided index.</returns>
        public static <#= name #> operator /(<#= name #> first, <#= name #> second) =>
            new <#= name #>(
                <#= def.Expression(", ", p => $"first.{p} / second.{p}") #>);

        /// <summary>
        /// Returns true if the first and second index are the same.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>True, if the first and second index are the same.</returns>
        public static bool operator ==(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" & ", p => $"first.{p} == second.{p}") #>;

        /// <summary>
        /// Returns true if the first and second index are not the same.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>True, if the first and second index are not the same.</returns>
        public static bool operator !=(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" | ", p => $"first.{p} != second.{p}") #>;

        /// <summary>
        /// Returns true if the first index is smaller than the second index.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>True, if the first index is smaller than the second index.</returns>
        public static bool operator <(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" & ", p => $"first.{p} < second.{p}") #>;

        /// <summary>
        /// Returns true if the first index is smaller than or equal to the second index.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>
        /// True, if the first index is smaller than or equal to the second index.
        /// </returns>
        public static bool operator <=(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" & ", p => $"first.{p} <= second.{p}") #>;

        /// <summary>
        /// Returns true if the first index is greater than the second index.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>True, if the first index is greater than the second index.</returns>
        public static bool operator >(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" & ", p => $"first.{p} > second.{p}") #>;

        /// <summary>
        /// Returns true if the first index is greater than or equal to the second index.
        /// </summary>
        /// <param name="first">The first index.</param>
        /// <param name="second">The second index.</param>
        /// <returns>
        /// True, if the first index is greater than or equal to the second index.
        /// </returns>
        public static bool operator >=(<#= name #> first, <#= name #> second) =>
            <#= def.Expression(" & ", p => $"first.{p} >= second.{p}") #>;

        #endregion
    }

<#  } #>

    // Basic index extensions

<#  foreach (var def in IndexDefinitions1D) { #>
<#      var name = def.Name; #>
<#      var baseType = def.BaseTypeName; #>
    partial struct <#= name #>
    {
        /// <summary>
        /// Computes the linear index of this 1D index by using the provided 1D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <param name="index">The base index.</param>
        /// <returns>The computed linear index of this 1D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= baseType #> ComputeLinearIndex(
            <#= name #> dimension,
            <#= name #> index) =>
            index;

        /// <summary>
        /// Reconstructs a 1D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 1D dimension for reconstruction.</param>
        /// <returns>The reconstructed 1D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            <#= baseType #> linearIndex,
            <#= name #> dimension) =>
            linearIndex;

<# if (def.IsIntIndex) { #>
        /// <summary>
        /// Reconstructs a 1D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 1D dimension for reconstruction.</param>
        /// <returns>The reconstructed 1D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            long linearIndex,
            <#= name #> dimension) {
            IndexTypeExtensions.AssertIntIndexRange(linearIndex);
            return (<#= name #>)linearIndex;
        }
<# } #>

        /// <summary>
        /// Implicitly converts an index to an int.
        /// </summary>
        /// <param name="idx">The index to convert.</param>
        public static implicit operator <#= baseType #>(<#= name #> idx) => idx.X;

        /// <summary>
        /// Implicitly converts an int to an index.
        /// </summary>
        /// <param name="idx">The int to convert.</param>
        public static implicit operator <#= name #>(<#= baseType #> idx) =>
            new <#= name #>(idx);

        /// <summary>
        /// Implicitly converts an index to an unsigned value.
        /// </summary>
        /// <param name="idx">The index to convert.</param>
        [CLSCompliant(false)]
        public static explicit operator u<#= baseType #>(<#= name #> idx) =>
            (u<#= baseType #>)idx.X;
    }

<#  } #>
<#  foreach (var def in IndexDefinitions2D) { #>
<#      var name = def.Name; #>
<#      var baseType = def.BaseTypeName; #>
    partial struct <#= name #>
    {
        /// <summary>
        /// Computes the linear index of this 2D index by using the provided 2D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <param name="index">The base index.</param>
        /// <returns>The computed linear index of this 2D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= baseType #> ComputeLinearIndex(
            <#= name #> dimension,
            <#= name #> index) =>
            index.Y * dimension.X + index.X;

        /// <summary>
        /// Reconstructs a 2D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 2D dimension for reconstruction.</param>
        /// <returns>The reconstructed 2D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            <#= baseType #> linearIndex,
            <#= name #> dimension)
        {
            <#= baseType #> x = linearIndex % dimension.X;
            <#= baseType #> y = linearIndex / dimension.X;
            return new <#= name #>(x, y);
        }

<# if (def.IsIntIndex) { #>
        /// <summary>
        /// Reconstructs a 2D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 2D dimension for reconstruction.</param>
        /// <returns>The reconstructed 2D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            long linearIndex,
            <#= name #> dimension)
        {
            long x = linearIndex % dimension.X;
            long y = linearIndex / dimension.X;
            IndexTypeExtensions.AssertIntIndexRange(y);
            return new <#= name #>((int)x, (int)y);
        }
<# } #>
    }

<#  } #>
<#  foreach (var def in IndexDefinitions3D) { #>
<#      var name = def.Name; #>
<#      var baseType = def.BaseTypeName; #>
    partial struct <#= name #>
    {
        /// <summary>
        /// Computes the linear index of this 3D index by using the provided 3D dimension.
        /// </summary>
        /// <param name="dimension">The dimension for index computation.</param>
        /// <param name="index">The base index.</param>
        /// <returns>The computed linear index of this 3D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= baseType #> ComputeLinearIndex(
            <#= name #> dimension,
            <#= name #> index) =>
            ((index.Z * dimension.Y) + index.Y) * dimension.X + index.X;

        /// <summary>
        /// Reconstructs a 3D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 3D dimension for reconstruction.</param>
        /// <returns>The reconstructed 3D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            <#= baseType #> linearIndex,
            <#= name #> dimension)
        {
            <#= baseType #> x = linearIndex % dimension.X;
            <#= baseType #> yz = linearIndex / dimension.X;
            <#= baseType #> y = yz % dimension.Y;
            <#= baseType #> z = yz / dimension.Y;
            return new <#= name #>(x, y, z);
        }

<# if (def.IsIntIndex) { #>
        /// <summary>
        /// Reconstructs a 3D index from a linear index.
        /// </summary>
        /// <param name="linearIndex">The linear index.</param>
        /// <param name="dimension">The 3D dimension for reconstruction.</param>
        /// <returns>The reconstructed 3D index.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= name #> ReconstructIndex(
            long linearIndex,
            <#= name #> dimension)
        {
            long x = linearIndex % dimension.X;
            long yz = linearIndex / dimension.X;
            long y = yz % dimension.Y;
            long z = yz / dimension.Y;
            IndexTypeExtensions.AssertIntIndexRange(z);
            return new <#= name #>((int)x, (int)y, (int)z);
        }
<# } #>
    }

<#  } #>
}