// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: DllImports.tt/DllImports.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TypeInformation.ttinclude" #>
<#@ include file="DllImporter.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath(".");
var importFiles = ImportFiles.Load(rootPath, "DllImports.xml");

SetMakeImportNameFunc(importName => $"{importName}_Import");
#>
using ILGPU.Resources;
using System;
using System.Runtime.InteropServices;

#pragma warning disable CA5393 // Do not use unsafe DllImportSearchPath value
#pragma warning disable IDE1006 // Naming
#pragma warning disable CA2101 // Specify marshaling for P/Invoke string arguments

<# foreach (var importFile in importFiles) { #>
<#      var imports = Imports.Load(rootPath, importFile); #>
<#      var libNames = imports.LibraryNames; #>
<#      var platformMapping = libNames.ToMapping(); #>
<#      var className = imports.ClassName; #>
namespace <#= imports.Namespace #>
{
    public unsafe abstract partial class <#= className #> : RuntimeAPI
    {
        #region Constants

<#      foreach (var (platformName, libName) in libNames.Platforms) { #>
        /// <summary>
        /// Represents the driver library name on <#= platformName #>.
        /// </summary>
        public const string LibName<#= platformName #> = "<#= libName #>";

<#      } #>
        #endregion

        #region Native Methods

<#
        PushIndent(2);
        foreach (var entryPoint in imports.EntryPoints)
            WriteMethodDeclaration(entryPoint);
        PopIndent();
#>
        #endregion

        #region Static

        /// <summary>
        /// Returns the driver API for the current platform.
        /// </summary>
        public static <#= className #> CurrentAPI { get; } =
            LoadRuntimeAPI<
            <#= className #>,
<#      foreach (var (id, _) in platformMapping) { #>
            <#= className #>_<#= id #>,
<#      } #>
            <#= className #>_NotSupported>();

        #endregion
    }

    // Platform implementations

<#      foreach (var (id, platformName) in platformMapping.Distinct()) { #>
    sealed unsafe class <#= className #>_<#= id #> : <#= className #>
    {
        #region Native Methods

<#
        PushIndent(2);
        foreach (var entryPoint in imports.EntryPoints)
            WriteMethodNativeImport($"LibName{platformName}", entryPoint);
        PopIndent();
#>
        #endregion

        #region RuntimeAPI

        /// <summary>
        /// Returns true.
        /// </summary>
        public override bool IsSupported => true;

        #endregion

        #region Implementations

<#
        PushIndent(2);
        foreach (var entryPoint in imports.EntryPoints)
            WriteMethodImplementation(entryPoint);
        PopIndent();
#>
        #endregion
    }

<#      } #>
    /// <summary>
    /// The NotSupported implementation of the <#= className #> wrapper.
    /// </summary>
    sealed unsafe class <#= className #>_NotSupported : <#= className #>
    {
        #region RuntimeAPI

        /// <summary>
        /// Returns false.
        /// </summary>
        public override bool IsSupported => false;

        #endregion

        #region Implementations

<#      foreach (var entryPoint in imports.EntryPoints) { #>
        internal sealed override <#= entryPoint.ReturnType #>
            <#= entryPoint.Name #>(
<#          foreach (var (param, suffix) in entryPoint.ParamBodyExpressions) { #>
            <#= param #><#= suffix #>
<#          } #>
            throw new NotSupportedException(<#= imports.NotSupportedException #>);
        
<#      } #>

        #endregion
    }
}

<# } #>

#pragma warning restore CA2101 // Specify marshaling for P/Invoke string arguments
#pragma warning restore CA5393 // Do not use unsafe DllImportSearchPath value
#pragma warning restore IDE1006 // Naming

<#+

[XmlRoot("ImportFiles")]
public class ImportFiles
{
    internal static string[] Load(string rootPath, string fileName) =>
        XmlHelper.Load<ImportFiles>(rootPath, fileName).Files;

    [XmlElement("File")]
    public string[] Files { get; set; }
}

[XmlRoot("Imports")]
public class Imports
{
    internal static Imports Load(string rootPath, string fileName)
    {
        var imports = XmlHelper.Load<Imports>(rootPath, fileName);

        // Setup default return types.
        foreach (var entryPoint in imports.EntryPoints)
            entryPoint.ReturnType ??= imports.DefaultReturnType;

        return imports;
    }

    [XmlAttribute]
    public string Namespace { get; set; }

    [XmlAttribute]
    public string ClassName { get; set; }

    [XmlAttribute]
    public string DefaultReturnType { get; set; }

    [XmlAttribute]
    public string NotSupportedException { get; set;}

    [XmlElement("LibraryNames")]
    public LibraryNames LibraryNames { get; set; }

    [XmlElement("Import")]
    public EntryPoint[] EntryPoints { get; set; }
}

public class LibraryNames
{
    [XmlElement]
    public string Windows { get; set; }

    [XmlElement]
    public string Linux { get; set; }

    [XmlElement]
    public string MacOS { get; set; }

    [XmlIgnore]
    public IEnumerable<(string, string)> Platforms
    {
        get
        {
            yield return (nameof(Windows), Windows);
            yield return (nameof(Linux), Linux);
            yield return (nameof(MacOS), MacOS);
        }
    }

    public IEnumerable<(int, string)> ToMapping()
    {
        var mapping = new Dictionary<string, (int, string)>();
        foreach (var (name, libName) in Platforms)
        {
            if (!mapping.TryGetValue(libName, out var entry))
            {
                entry = (mapping.Count, name);
                mapping.Add(libName, entry);
            }
            yield return entry;
        }
    }
}

#>