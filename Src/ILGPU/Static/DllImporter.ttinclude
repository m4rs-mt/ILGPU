// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: DllImporter.ttinclude
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ include file="TextTemplateHelpers.ttinclude" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Xml.Serialization" #>
<#+

public class EntryPoint
{
    public static readonly string FallbackAccessModifier = "internal";

    public static readonly string FallbackDllImportSearchPath =
        nameof(System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior);

    [XmlAttribute]
    public string Name { get; set; }

    [XmlAttribute]
    public string DisplayName { get; set; }

    [XmlAttribute]
    public string ReturnType { get; set; }

    [XmlAttribute]
    public string AccessModifier { get; set; }
    
    [XmlAttribute]
    public string DllImportSearchPath { get; set; }

    [XmlAttribute]
    public bool Unsafe { get; set; } = false;

    [XmlAttribute]
    public CharSet CharSet { get; set; } = CharSet.Auto;

    [XmlAttribute]
    public bool BestFitMapping { get; set; } = true;

    [XmlAttribute]
    public bool ThrowOnUnmappableChar { get; set; } = false;

    [XmlElement("Parameter")]
    public Parameter[] Parameters { get; set; }

    [XmlIgnore]
    public IEnumerable<(Parameter, string)> ParamExpressions =>
        GetParamExpr(");");

    [XmlIgnore]
    public IEnumerable<(Parameter, string)> ParamBodyExpressions =>
        GetParamExpr(") =>");

    private IEnumerable<(Parameter, string)> GetParamExpr(string endOfLine)
    {
        if ((Parameters?.Length ?? 0) < 1)
        {
            yield return (
                new Parameter() { DllFlags = ParameterDllFlags.None },
                endOfLine);
        }
        else
        {
            for (int i = 0, e = Parameters?.Length ?? 0; i < e; ++i)
                yield return (Parameters[i], i + 1 < e ? "," : endOfLine);
        }
    }
}

public enum ParameterDllFlags
{
    None = -1,

    In = 0,
    Out,
    InOut,
}

public enum ParameterFlags
{
    None = 0,
    Out,
    Ref
}

public class Parameter
{
    [XmlAttribute]
    public string Name { get; set; }

    [XmlAttribute]
    public ParameterDllFlags DllFlags { get; set; }

    [XmlAttribute]
    public ParameterFlags Flags { get; set; }

    [XmlAttribute]
    public string Type { get; set; }

    [XmlIgnore]
    public string FlagsExpression =>
        Flags switch
        {
            ParameterFlags.Out => "out ",
            ParameterFlags.Ref => "ref ",
            _ => string.Empty
        };

    [XmlIgnore]
    public string DllFlagsExpression =>
        DllFlags switch
        {
            ParameterDllFlags.None => string.Empty,
            ParameterDllFlags.Out => "[Out]",
            ParameterDllFlags.InOut => "[In, Out]",
            _ => Flags == ParameterFlags.Out
                ? "[Out]"
                : "[In]"
        };

    public override string ToString() =>
        $"{DllFlagsExpression} {FlagsExpression}{Type} {Name}";

    public string ToExprString() =>
        $"{FlagsExpression}{Name}";
}

/// <summary>
/// Sets transformation function for native import method names.
/// </summary>
private Func<string, string> _makeImportName = importName => importName;
public void SetMakeImportNameFunc(Func<string, string> func) =>
    _makeImportName = func ?? new Func<string, string>(importName => importName);

/// <summary>
/// Sets transformation function for class method names.
/// </summary>
private Func<string, string> _makeMethodName = methodName => methodName;
public void SetMakeMethodNameFunc(Func<string, string> func) =>
    _makeMethodName = func ?? new Func<string, string>(methodName => methodName);

/// <summary>
/// Writes the native import declaration.
/// </summary>
public void WriteMethodNativeImport(string libName, EntryPoint entryPoint)
{
    WriteLine($"[DllImport({libName},");
    PushIndent();
    WriteLine($"EntryPoint = \"{entryPoint.Name}\"");
    if (!entryPoint.BestFitMapping)
        WriteLine(", BestFitMapping = false");
    if (entryPoint.CharSet != CharSet.Auto)
        WriteLine($", CharSet = CharSet.{entryPoint.CharSet}");
    if (entryPoint.ThrowOnUnmappableChar)
        WriteLine(", ThrowOnUnmappableChar = true");
    WriteLine(")]");
    PopIndent();

    Write("[DefaultDllImportSearchPaths(DllImportSearchPath.");
    Write(entryPoint.DllImportSearchPath ?? EntryPoint.FallbackDllImportSearchPath);
    WriteLine(")]");
    Write("internal");
    if (entryPoint.Unsafe)
        Write(" unsafe");
    Write($" static extern {entryPoint.ReturnType}");
    WriteLine($" {_makeImportName(entryPoint.Name)}(");

    PushIndent();
    foreach (var (param, suffix) in entryPoint.ParamExpressions)
        WriteLine($"{param}{suffix}");
    PopIndent();

    WriteLine();
}

/// <summary>
/// Writes the abstract method declaration.
/// </summary>
public void WriteMethodDeclaration(EntryPoint entryPoint)
{
    Write(entryPoint.AccessModifier ?? EntryPoint.FallbackAccessModifier);
    if (entryPoint.Unsafe)
        Write(" unsafe");
    Write($" abstract {entryPoint.ReturnType}");
    WriteLine($" {entryPoint.DisplayName ?? _makeMethodName(entryPoint.Name)}(");

    PushIndent();
    foreach (var (param, suffix) in entryPoint.ParamExpressions)
        WriteLine($"{param}{suffix}");
    PopIndent();

    WriteLine();
}

/// <summary>
/// Writes the method implementation of the abstract base method.
/// </summary>
public void WriteMethodImplementation(EntryPoint entryPoint)
{
    Write(entryPoint.AccessModifier ?? EntryPoint.FallbackAccessModifier);
    if (entryPoint.Unsafe)
        Write(" unsafe");
    Write($" sealed override {entryPoint.ReturnType}");
    WriteLine($" {entryPoint.DisplayName ?? _makeMethodName(entryPoint.Name)}(");

    PushIndent();
    foreach (var (param, suffix) in entryPoint.ParamBodyExpressions)
        WriteLine($"{param}{suffix}");

    WriteLine($"{_makeImportName(entryPoint.Name)}(");
    PushIndent();
    foreach (var (param, suffix) in entryPoint.ParamExpressions)
        WriteLine($"{param.ToExprString()}{suffix}");
    PopIndent();
    PopIndent();

    WriteLine();
}

#>