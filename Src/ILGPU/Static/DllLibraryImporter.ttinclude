// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: DllLibraryImporter.ttinclude
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ include file="TypeInformation.ttinclude" #>
<#@ include file="DllImporter.ttinclude" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Xml.Serialization" #>
<#+

[XmlRoot("ImportLibrary")]
public class ImportLibrary
{
    internal static ImportLibrary Load(string rootPath, string fileName)
    {
        var importLib = XmlHelper.Load<ImportLibrary>(rootPath, fileName);

        // Setup default return types and access modifiers.
        foreach (var region in importLib.Regions)
        {
            foreach (var entryPoint in region.EntryPoints)
            {
                entryPoint.ReturnType ??= importLib.DefaultReturnType;
                entryPoint.AccessModifier ??= importLib.DefaultMethodAccessModifier;
                entryPoint.DllImportSearchPath ??= importLib.DefaultDllImportSearchPath;
            }
        }

        // Setup library class names.
        foreach (var ver in importLib.LibraryVersions)
            ver.ClassName = $"{importLib.ClassName}_{ver.Platform}_{ver.Name}";

        return importLib;
    }

    [XmlAttribute]
    public string Namespace { get; set; }

    [XmlAttribute]
    public string ClassName { get; set; }

    [XmlAttribute]
    public string DefaultReturnType { get; set; }

    [XmlAttribute]
    public string DefaultMethodAccessModifier { get; set; }

    [XmlAttribute]
    public string DefaultDllImportSearchPath { get; set; }

    [XmlAttribute]
    public string VersionType { get; set; }

    public LibraryVersion[] LibraryVersions { get; set; }

    [XmlElement("Region")]
    public Region[] Regions { get; set; }
}

public class Region
{
    [XmlAttribute]
    public string Name { get; set; }

    [XmlElement("Import")]
    public EntryPoint[] EntryPoints { get; set; }
}

public enum Platform
{
    Windows,
    Linux,
    OSX
}

public class LibraryVersion
{
    [XmlAttribute]
    public string Name { get; set; }

    [XmlAttribute]
    public Platform Platform { get; set; }

    [XmlAttribute]
    public string LibName { get; set; }

    [XmlIgnore]
    public string ClassName { get; set; }
}

public void WriteLibrary(ImportLibrary importLib)
{
    WriteLine($"namespace {importLib.Namespace}");
    WriteLine("{");
    PushIndent();

    WriteLibraryVersionEnum(importLib);

    // Write the base class
    WriteLine($"partial class {importLib.ClassName}");
    WriteLine("{");
    PushIndent();
    WriteLibraryCreateInternal(importLib);
    WriteLibraryRegionDeclarations(importLib);
    PopIndent();
    WriteLine("}");
    WriteLine();

    // Write the library version implementations
    foreach (var libVer in importLib.LibraryVersions)
    {
        WriteLine($"internal sealed class {libVer.ClassName} : {importLib.ClassName}");
        WriteLine("{");
        PushIndent();

        WriteLine("#region Constants");
        WriteLine();
        WriteLine($"public const string LibName = \"{libVer.LibName}\";");
        WriteLine();
        WriteLine("#endregion");
        WriteLine();

        WriteLibraryRegionImplementation(importLib);

        PopIndent();
        WriteLine("}");
        WriteLine();
    }

    PopIndent();
    WriteLine("}");
    WriteLine();
}

/// <summary>
/// Writes the enum of the library versions.
/// </summary>
public void WriteLibraryVersionEnum(ImportLibrary importLib)
{
    WriteLine($"public enum {importLib.VersionType}");
    WriteLine("{");
    foreach (var versionName in importLib.LibraryVersions.Select(x => x.Name).Distinct())
    {
        WriteLine($"    {versionName},");
    }
    WriteLine("}");
    WriteLine();
}

/// <summary>
/// Writes the creation of the library versions.
/// </summary>
public void WriteLibraryCreateInternal(ImportLibrary importLib)
{
    WriteLine($"#region Creation");
    WriteLine();

    Write($"private static {importLib.ClassName} CreateInternal(");
    WriteLine($"{importLib.VersionType} version)");
    WriteLine("{");

    PushIndent();
    var first = true;
    foreach (var libVer in importLib.LibraryVersions)
    {
        if (first)
        {
            first = false;
        }
        else
        {
            Write("else ");
        }
        Write($"if (RuntimeInformation.IsOSPlatform(OSPlatform.{libVer.Platform})");
        WriteLine(" &&");
        WriteLine($"    version == {importLib.VersionType}.{libVer.Name})");
        WriteLine("{");
        WriteLine($"    return new {libVer.ClassName}();");
        WriteLine("}");
    }

    PopIndent();
    WriteLine("    return null;");
    WriteLine("}");
    WriteLine();
    WriteLine("#endregion");
    WriteLine();
}

/// <summary>
/// Writes the declarations for each region of the library.
/// </summary>
public void WriteLibraryRegionDeclarations(ImportLibrary importLib)
{
    WriteLibraryRegions(
        importLib,
        region =>
        {
            foreach (var entryPoint in region.EntryPoints)
                WriteMethodDeclaration(entryPoint);
        });
}

/// <summary>
/// Writes the implementations for each region of the library.
/// </summary>
public void WriteLibraryRegionImplementation(ImportLibrary importLib)
{
    WriteLibraryRegions(
        importLib,
        region =>
        {
            foreach (var entryPoint in region.EntryPoints)
            {
                WriteMethodNativeImport("LibName", entryPoint);
                WriteMethodImplementation(entryPoint);
            }
        });
}

/// <summary>
/// Helper function to write each region.
/// </summary>
private void WriteLibraryRegions(ImportLibrary importLib, Action<Region> writeRegion)
{
    foreach (var region in importLib.Regions)
    {
        WriteLine($"#region {region.Name}");
        WriteLine();

        writeRegion(region);

        WriteLine("#endregion");
        WriteLine();
    }
}

#>