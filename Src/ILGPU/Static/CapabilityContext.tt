// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CapabilityContext.tt/CapabilityContext.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TypeInformation.ttinclude" #>
<#@ include file="CapabilitiesImporter.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath(".");
var capabilities = Capabilities.Load(rootPath, "Capabilities.xml");

var commonCapabilities =
    capabilities.Where(x => !x.IsCudaOnly && !x.IsOpenCLOnly).ToArray();
var cudaCapabilities = capabilities.Where(x => x.IsCudaOnly).ToArray();
var clCapabilities = capabilities.Where(x => x.IsOpenCLOnly).ToArray();
#>
using System;
using System.Collections.Immutable;
using ILGPU.Backends;
using ILGPU.Resources;

namespace ILGPU.Runtime
{
    /// <summary>
    /// Represents general capabilities available to all accelerators.
    /// </summary>
    public abstract class CapabilityContext
    {
        #region Properties

<# foreach (var c in commonCapabilities) { #>
        /// <summary>
        /// <#= c.Summary #>
        /// </summary>
        public bool <#= c.Name #> { get; internal set; }

<# } #>
        #endregion

        #region Methods

<# foreach (var c in commonCapabilities) { #>
        /// <summary>
        /// Creates exception for '<#= c.Name #>'.
        /// </summary>
        public static Exception GetNotSupported<#= c.Name #>Exception() =>
            new CapabilityNotSupportedException(
                ErrorMessages.CapabilityNotSupported<#= c.Name #>);

<# } #>
        #endregion
    }
}

namespace ILGPU.Runtime.CPU
{
    /// <summary>
    /// Represents capabilities available to the CPU accelerator.
    /// </summary>
    public sealed class CPUCapabilityContext : CapabilityContext
    {
        #region Instance

        internal CPUCapabilityContext()
        {
<# foreach (var c in commonCapabilities) { #>
            <#= c.Name #> = true;
<# } #>
        }

        #endregion
    }
}

namespace ILGPU.Runtime.Cuda
{
    /// <summary>
    /// Represents capabilities available to Cuda accelerators.
    /// </summary>
    public sealed class CudaCapabilityContext : CapabilityContext
    {
        #region Instance

        internal CudaCapabilityContext(CudaArchitecture arch)
        {
<# foreach (var c in commonCapabilities.Concat(cudaCapabilities)) { #>
            <#= c.Name #> = arch >= CudaArchitecture.<#= c.Cuda.MinPTX #>;
<# } #>
        }

        #endregion

        #region Properties

<# foreach (var c in cudaCapabilities) { #>
        /// <summary>
        /// <#= c.Summary #>
        /// </summary>
        public bool <#= c.Name #> { get; internal set; }

<# } #>
        #endregion

        #region Methods

<# foreach (var c in cudaCapabilities) { #>
        /// <summary>
        /// Creates exception for '<#= c.Name #>'.
        /// </summary>
        public static Exception GetNotSupported<#= c.Name #>Exception() =>
            new CapabilityNotSupportedException(
                string.Format(ErrorMessages.CapabilityNotSupportedCuda,
                    "<#= c.FeatureName #>",
                    CudaArchitecture.<#= c.Cuda.MinPTX #>));

<# } #>
        #endregion
    }
}

namespace ILGPU.Runtime.OpenCL
{
    /// <summary>
    /// Represents capabilities available to OpenCL accelerators.
    /// </summary>
    public sealed class CLCapabilityContext : CapabilityContext
    {
        #region Static

<#
    foreach (var c in commonCapabilities.Concat(clCapabilities)) {
        if (!c.OpenCL.Manual) {
            var extensionList = string.Join(
                ", ",
                c.OpenCL.Extensions.Select(x => $"\"{x}\""));
#>
        /// <summary>
        /// Extensions for <#= c.Name #>.
        /// </summary>
        internal static readonly ImmutableArray<string> <#= c.Name #>Extensions =
            ImmutableArray.Create(<#= extensionList #>);

<#
        }
    }
#>
        #endregion

        #region Instance

        internal CLCapabilityContext(CLDevice device)
        {
            var extensions = ImmutableArray.CreateBuilder<string>();
<#
    foreach (var c in commonCapabilities.Concat(clCapabilities)) {
        if (c.OpenCL.Manual) {
#>
            <#= c.Name #> = false;
<#      } else { #>
            <#= c.Name #> = device.HasAllExtensions(<#= c.Name #>Extensions);
            if (<#= c.Name #>)
                extensions.AddRange(<#= c.Name #>Extensions);
<#
        }
    }
#>
            Extensions = extensions.ToImmutable();
        }

        #endregion

        #region Properties

        /// <summary>
        /// List of OpenCL extensions.
        /// </summary>
        public ImmutableArray<string> Extensions { get; }

<# foreach (var c in clCapabilities) { #>
        /// <summary>
        /// <#= c.Summary #>
        /// </summary>
        public bool <#= c.Name #> { get; internal set; }

<# } #>
        #endregion

        #region Methods

<# foreach (var c in clCapabilities) { #>
        /// <summary>
        /// Creates exception for '<#= c.Name #>'.
        /// </summary>
        public static Exception GetNotSupported<#= c.Name #>Exception() =>
            new CapabilityNotSupportedException(
                string.Format(ErrorMessages.CapabilityNotSupported,
                    "<#= c.FeatureName #>"));

<# } #>
        #endregion
    }
}