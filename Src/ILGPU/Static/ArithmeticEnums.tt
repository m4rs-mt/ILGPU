// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ArithmeticEnums.tt/ArithmeticEnums.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath(".");
var unaryOps = GetUnaryMathOps(rootPath);
var binaryOps = GetBinaryMathOps(rootPath);
var ternaryOps = GetTernaryMathOps(rootPath);
#>
using ILGPU.IR.Values;

namespace ILGPU.IR.Values
{
    /// <summary>
    /// Represents the kind of an unary operation.
    /// </summary>
    public enum UnaryArithmeticKind
    {
<# foreach (var op in unaryOps) { #>
        /// <summary>
        /// <#= op.Summary #>
        /// </summary>
        <#= op.Name #>,

<# } #>
    }

    /// <summary>
    /// Represents the kind of a binary operation.
    /// </summary>
    public enum BinaryArithmeticKind
    {
<# foreach (var op in binaryOps) { #>
        /// <summary>
        /// <#= op.Summary #>
        /// </summary>
        <#= op.Name #>,

<# } #>
    }

    /// <summary>
    /// Represents the kind of a ternary operation.
    /// </summary>
    public enum TernaryArithmeticKind
    {
<# foreach (var op in ternaryOps) { #>
        /// <summary>
        /// <#= op.Summary #>
        /// </summary>
        <#= op.Name #>,

<# } #>
    }

    /// <summary>
    /// Contains several extensions for arithmetic kinds.
    /// </summary>
    public static class ArithmeticKindExtensions
    {
        /// <summary>
        /// Returns true if the given kind is commutative.
        /// </summary>
        /// <param name="kind">The kind to test.</param>
        /// <returns>True, if the given kind is commutative.</returns>
        public static bool IsCommutative(this BinaryArithmeticKind kind) =>
            kind switch
            {
<# foreach (var op in binaryOps.Where(t => t.IsCommutative)) { #>
                BinaryArithmeticKind.<#= op.Name #> => true,
<# } #>
                _ => false
            };

        /// <summary>
        /// Returns true if the given kind is commutative.
        /// </summary>
        /// <param name="kind">The kind to test.</param>
        /// <returns>True, if the given kind is commutative.</returns>
        public static bool IsCommutative(this TernaryArithmeticKind kind) =>
            kind switch
            {
<# foreach (var op in ternaryOps.Where(t => t.IsCommutative)) { #>
                TernaryArithmeticKind.<#= op.Name #> => true,
<# } #>
                _ => false
            };
    }
}

namespace ILGPU.Frontend.Intrinsic
{
    enum MathIntrinsicKind
    {
<# foreach (var op in unaryOps) { #>
        <#= op.Name #> = UnaryArithmeticKind.<#= op.Name #>,
<# } #>

        _BinaryFunctions,

<# foreach (var op in binaryOps) { #>
        <#= op.Name #>,
<# } #>
    }
}