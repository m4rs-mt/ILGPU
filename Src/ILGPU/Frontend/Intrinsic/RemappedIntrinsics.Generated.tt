// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: RemappedIntrinsics.Generated.tt/RemappedIntrinsics.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var unaryMathFunctions = new (string, TypeInformation, TypeInformation, string)[]
    {
        ("Abs",     null,          SignedIntTypes[0], "MathType"),
        ("Abs",     null,          SignedIntTypes[1], "MathType"),
        ("Abs",     null,          SignedIntTypes[2], "MathType"),
        ("Abs",     null,          SignedIntTypes[3], "MathType"),
        ("Abs",     FloatTypes[1], FloatTypes[1],     "MathType"),
        ("Abs",     null,          FloatTypes[2],     "MathType"),
        ("Sqrt",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Sin",     FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Sinh",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Asin",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Cos",     FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Cosh",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Acos",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Tan",     FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Tanh",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Atan",    FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Exp",     FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Floor",   FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Ceiling", FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Log",     FloatTypes[1], FloatTypes[2],     "CPUMathType"),
        ("Log10",   FloatTypes[1], FloatTypes[2],     "CPUMathType")
    };

var binaryMathFunctions = new (string, TypeInformation, TypeInformation, string)[]
    {
        ("Min",   null,          SignedIntTypes[0],   "MathType"),
        ("Min",   null,          SignedIntTypes[1],   "MathType"),
        ("Min",   null,          SignedIntTypes[2],   "MathType"),
        ("Min",   null,          SignedIntTypes[3],   "MathType"),
        ("Min",   null,          UnsignedIntTypes[0], "MathType"),
        ("Min",   null,          UnsignedIntTypes[1], "MathType"),
        ("Min",   null,          UnsignedIntTypes[2], "MathType"),
        ("Min",   null,          UnsignedIntTypes[3], "MathType"),
        ("Min",   FloatTypes[1], FloatTypes[1],       "MathType"),
        ("Min",   null,          FloatTypes[2],       "MathType"),
        ("Max",   null,          SignedIntTypes[0],   "MathType"),
        ("Max",   null,          SignedIntTypes[1],   "MathType"),
        ("Max",   null,          SignedIntTypes[2],   "MathType"),
        ("Max",   null,          SignedIntTypes[3],   "MathType"),
        ("Max",   null,          UnsignedIntTypes[0], "MathType"),
        ("Max",   null,          UnsignedIntTypes[1], "MathType"),
        ("Max",   null,          UnsignedIntTypes[2], "MathType"),
        ("Max",   null,          UnsignedIntTypes[3], "MathType"),
        ("Max",   FloatTypes[1], FloatTypes[1],       "MathType"),
        ("Max",   null,          FloatTypes[2],       "MathType"),
        ("Atan2", FloatTypes[1], FloatTypes[2],       "CPUMathType"),
        ("Pow",   FloatTypes[1], FloatTypes[2],       "CPUMathType"),
        ("Log",   FloatTypes[1], FloatTypes[2],       "CPUMathType")
    };


var interlockedFunctions = new (string, bool, bool, int, Type)[]
    {
        // netstandard2.1
        ( "Add",             false, true,  2, typeof(int) ),
        ( "Add",             false, true,  2, typeof(long) ),
        ( "CompareExchange", false, true,  3, typeof(int) ),
        ( "CompareExchange", false, true,  3, typeof(long) ),
        ( "CompareExchange", false, true,  3, typeof(float) ),
        ( "CompareExchange", false, true,  3, typeof(double) ),
        ( "Decrement",       true,  true,  1, typeof(int) ),
        ( "Decrement",       true,  true,  1, typeof(long) ),
        ( "Exchange",        false, true,  2, typeof(int) ),
        ( "Exchange",        false, true,  2, typeof(long) ),
        ( "Exchange",        false, true,  2, typeof(float) ),
        ( "Exchange",        false, true,  2, typeof(double) ),
        ( "Increment",       true,  true,  1, typeof(int) ),
        ( "Increment",       true,  true,  1, typeof(long) ),

        // net5.0
        ( "Add",             false, false, 2, typeof(uint) ),
        ( "Add",             false, false, 2, typeof(ulong) ),
        ( "And",             false, false, 2, typeof(int) ),
        ( "And",             false, false, 2, typeof(long) ),
        ( "And",             false, false, 2, typeof(uint) ),
        ( "And",             false, false, 2, typeof(ulong) ),
        ( "CompareExchange", false, false, 3, typeof(uint) ),
        ( "CompareExchange", false, false, 3, typeof(ulong) ),
        ( "Decrement",       true,  false, 1, typeof(uint) ),
        ( "Decrement",       true,  false, 1, typeof(ulong) ),
        ( "Exchange",        false, false, 2, typeof(uint) ),
        ( "Exchange",        false, false, 2, typeof(ulong) ),
        ( "Increment",       true,  false, 1, typeof(uint) ),
        ( "Increment",       true,  false, 1, typeof(ulong) ),
        ( "Or",              false, false, 2, typeof(int) ),
        ( "Or",              false, false, 2, typeof(long) ),
        ( "Or",              false, false, 2, typeof(uint) ),
        ( "Or",              false, false, 2, typeof(ulong) ),
    };
#>
using System;

namespace ILGPU.Frontend.Intrinsic
{
    partial class RemappedIntrinsics
    {
        private static void RegisterMathRemappings()
        {
            var systemMathType = typeof(Math);

<# foreach (var (method, _, type, className) in unaryMathFunctions) { #>
            AddRemapping(
                systemMathType,
                <#= className #>,
                "<#= method #>",
                typeof(<#= type.Type #>));
<# } #>
<# foreach (var (method, _, type, className) in binaryMathFunctions) { #>
            AddRemapping(
                systemMathType,
                <#= className #>,
                "<#= method #>",
                typeof(<#= type.Type #>),
                typeof(<#= type.Type #>));
<# } #>
#if !NETFRAMEWORK
            var systemMathFType = typeof(MathF);

<# foreach (var (method, type, _, className) in unaryMathFunctions
    .Where(t => t.Item2 != null)) { #>
                AddRemapping(
                systemMathFType,
                <#= className #>,
                "<#= method #>",
                typeof(<#= type.Type #>));
<# } #>
<# foreach (var (method, type, _, className) in binaryMathFunctions
    .Where(t => t.Item2 != null)) { #>
            AddRemapping(
                systemMathFType,
                <#= className #>,
                "<#= method #>",
                typeof(<#= type.Type #>),
                typeof(<#= type.Type #>));
<# } #>
#endif
        }

        private static void RegisterInterlockedRemappings()
        {
            var sourceType = typeof(System.Threading.Interlocked);
            var targetType = typeof(Atomic);
            var customTargetType = typeof(Interlocked);

<# foreach (var (method, custom, required, numParams, type) in interlockedFunctions) { #>
            AddRemapping(
                sourceType,
<#      if (custom) { #>
                customTargetType,
<#      } else { #>
                targetType,
<#      } #>
                "<#= method #>",
                required: <#= required ? "true" : "false" #>,
                <#=
                    // First parameter of Interlocked functions uses 'ref' modifier.
                    string.Join(
                        ", ",
                        new[] { $"typeof({type}).MakeByRefType()" }
                        .Concat(
                            Enumerable.Repeat(type, numParams - 1)
                            .Select(x => $"typeof({x})")
                        ))
                #>);
<# } #>
        }
    }
}