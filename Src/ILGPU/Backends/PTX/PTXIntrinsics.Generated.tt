// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: PTXIntrinsics.Generated.tt/PTXIntrinsics.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var fp16Ops = new (string, string, string, string)[]
{
    ("Unary", "Neg", "Neg", "SM_53"),
    ("Unary", "Abs", "Abs", "SM_53"),
    ("Unary", "IsInfF", "IsInfinity", null),
    ("Unary", "IsNaNF", "IsNaN", null),
    ("Unary", "Exp2F", "Exp2FP32", "SM_75"),
    ("Unary", "TanhF", "TanhFP32", "SM_75"),

    ("Binary", "Add", "AddFP32", "SM_53"),
    ("Binary", "Sub", "SubFP32", "SM_53"),
    ("Binary", "Mul", "MulFP32", "SM_53"),
    ("Binary", "Div", "DivFP32", null),
    ("Binary", "Min", "MinFP32", "SM_80"),
    ("Binary", "Max", "MaxFP32", "SM_80"),

    ("Ternary", "MultiplyAdd", "FmaFP32", "SM_53"),
};

var unaryMathFunctions = new (string, string, TypeInformation)[]
{
    ("AcosF",       "Acos",     FloatTypes[5]),
    ("AsinF",       "Asin",     FloatTypes[5]),
    ("AtanF",       "Atan",     FloatTypes[5]),
    ("CeilingF",    "Ceil",     FloatTypes[5]),
    ("CosF",        "Cos",      FloatTypes[5]),
    ("CoshF",       "Cosh",     FloatTypes[5]),
    ("ExpF",        "Exp",      FloatTypes[5]),
    ("Exp2F",       "Exp2",     FloatTypes[5]),
    ("FloorF",      "Floor",    FloatTypes[5]),
    ("LogF",        "Log",      FloatTypes[5]),
    ("Log2F",       "Log2",     FloatTypes[5]),
    ("Log10F",      "Log10",    FloatTypes[5]),
    ("RsqrtF",      "Rsqrt",    FloatTypes[5]),
    ("SinF",        "Sin",      FloatTypes[5]),
    ("SinhF",       "Sinh",     FloatTypes[5]),
    ("SqrtF",       "Sqrt",     FloatTypes[5]),
    ("TanF",        "Tan",      FloatTypes[5]),
    ("TanhF",       "Tanh",     FloatTypes[5]),

    ("AcosF",       "Acos",     FloatTypes[4]),
    ("AsinF",       "Asin",     FloatTypes[4]),
    ("AtanF",       "Atan",     FloatTypes[4]),
    ("CeilingF",    "Ceil",     FloatTypes[4]),
    ("CosF",        "Cos",      FloatTypes[4]),
    ("CoshF",       "Cosh",     FloatTypes[4]),
    ("ExpF",        "Exp",      FloatTypes[4]),
    ("Exp2F",       "Exp2",     FloatTypes[4]),
    ("FloorF",      "Floor",    FloatTypes[4]),
    ("LogF",        "Log",      FloatTypes[4]),
    ("Log2F",       "Log2",     FloatTypes[4]),
    ("Log10F",      "Log10",    FloatTypes[4]),
    ("RsqrtF",      "Rsqrt",    FloatTypes[4]),
    ("SinF",        "Sin",      FloatTypes[4]),
    ("SinhF",       "Sinh",     FloatTypes[4]),
    ("SqrtF",       "Sqrt",     FloatTypes[4]),
    ("TanF",        "Tan",      FloatTypes[4]),
    ("TanhF",       "Tanh",     FloatTypes[4]),
};

var binaryMathFunctions = new (string, string, string, TypeInformation)[]
{
    ("Atan2F",      "Atan", null,                       FloatTypes[5]),
    ("BinaryLogF",  "Log",  "IntrinsicMath.BinaryLog",  FloatTypes[5]),
    ("PowF",        "Pow",  null,                       FloatTypes[5]),
    ("Rem",         "Fmod", null,                       FloatTypes[5]),

    ("Atan2F",      "Atan", null,                       FloatTypes[4]),
    ("BinaryLogF",  "Log",  "IntrinsicMath.BinaryLog",  FloatTypes[4]),
    ("PowF",        "Pow",  null,                       FloatTypes[4]),
    ("Rem",         "Fmod", null,                       FloatTypes[4]),
};

#>
using ILGPU.IR.Intrinsics;
using ILGPU.IR.Values;
using ILGPU.Runtime.Cuda;
using System.Runtime.CompilerServices;

namespace ILGPU.Backends.PTX
{
    partial class PTXIntrinsics
    {
        #region Warp Shuffles

        /// <summary>
        /// Registers all PTX warp intrinsics with the given manager.
        /// </summary>
        /// <param name="manager">The target implementation manager.</param>
        private static void RegisterWarpShuffles(IntrinsicImplementationManager manager)
        {
<# foreach (var (operation, kind) in ShuffleOperations) { #>
            manager.RegisterWarpShuffle(
                ShuffleKind.<#= kind #>,
                BasicValueType.Int64,
                CreateIntrinsic(
                    nameof(Warp<#= operation #>Int64),
                    IntrinsicImplementationMode.Redirect));
            manager.RegisterWarpShuffle(
                ShuffleKind.<#= kind #>,
                BasicValueType.Float64,
                CreateIntrinsic(
                    nameof(Warp<#= operation #>Float64),
                    IntrinsicImplementationMode.Redirect));

            manager.RegisterSubWarpShuffle(
                ShuffleKind.<#= kind #>,
                BasicValueType.Int64,
                CreateIntrinsic(
                    nameof(Warp<#= operation #>Int64),
                    IntrinsicImplementationMode.Redirect));
            manager.RegisterSubWarpShuffle(
                ShuffleKind.<#= kind #>,
                BasicValueType.Float64,
                CreateIntrinsic(
                    nameof(Warp<#= operation #>Float64),
                    IntrinsicImplementationMode.Redirect));

<# } #>
        }

<# foreach (var (operation, _) in ShuffleOperations) { #>
        /// <summary>
        /// Wraps a single warp-shuffle operation.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static ulong Warp<#= operation #>Int64(ulong value, int idx)
        {
            var parts = IntrinsicMath.Decompose(value);
            parts.Lower = Warp.<#= operation #>(parts.Lower, idx);
            parts.Upper = Warp.<#= operation #>(parts.Upper, idx);
            return parts.ToULong();
        }

        /// <summary>
        /// Wraps a single warp-shuffle operation.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static double Warp<#= operation #>Float64(double value, int idx)
        {
            var shuffled = Warp<#= operation #>Int64(Interop.FloatAsInt(value), idx);
            return Interop.IntAsFloat(shuffled);
        }

        /// <summary>
        /// Wraps a single sub-warp-shuffle operation.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static ulong SubWarp<#= operation #>Int64(ulong value, int idx, int width)
        {
            var parts = IntrinsicMath.Decompose(value);
            parts.Lower = Warp.<#= operation #>(parts.Lower, idx, width);
            parts.Upper = Warp.<#= operation #>(parts.Upper, idx, width);
            return parts.ToULong();
        }

        /// <summary>
        /// Wraps a single sub-warp-shuffle operation.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static double SubWarp<#= operation #>Float64(
            double value,
            int idx,
            int width)
        {
            var shuffled = SubWarp<#= operation #>Int64(
                Interop.FloatAsInt(value),
                idx,
                width);
            return Interop.IntAsFloat(shuffled);
        }

<# } #>

        #endregion

        #region FP16

        /// <summary>
        /// Registers all FP16 intrinsics with the given manager.
        /// </summary>
        /// <param name="manager">The target implementation manager.</param>
        private static void RegisterFP16(IntrinsicImplementationManager manager)
        {
<# foreach (var (type, kind, name, sm) in fp16Ops) { #>
            manager.Register<#= type #>Arithmetic(
                <#= type #>ArithmeticKind.<#= kind #>,
                BasicValueType.Float16,
                CreateFP16Intrinsic(
                    nameof(HalfExtensions.<#= name #>),
                    <#= sm != null ? $"CudaArchitecture.{sm}" : "null" #>));
<# } #>
        }

        #endregion

        #region Math

        /// <summary>
        /// Registers all Math intrinsics with the given manager.
        /// </summary>
        /// <param name="manager">The target implementation manager.</param>
        private static void RegisterMathFunctions(IntrinsicImplementationManager manager)
        {
<# foreach (var (kind, methodName, type) in unaryMathFunctions) { #>
            manager.RegisterUnaryArithmetic(
                UnaryArithmeticKind.<#= kind #>,
                BasicValueType.<#= type.GetBasicValueType() #>,
                CreateLibDeviceMathIntrinsic(
                    nameof(LibDevice.<#= methodName #>),
                    typeof(<#= type.Type #>)));
<# } #>

<# foreach (var (kind, methodName, baseClass, type) in binaryMathFunctions) { #>
            manager.RegisterBinaryArithmetic(
                BinaryArithmeticKind.<#= kind #>,
                BasicValueType.<#= type.GetBasicValueType() #>,
    <# if (baseClass == null) { #>
                CreateLibDeviceMathIntrinsic(
                    nameof(LibDevice.<#= methodName #>),
                    typeof(<#= type.Type #>),
                    typeof(<#= type.Type #>)));
    <# } else { #>
                CreateMathIntrinsic(
                    typeof(<#= baseClass #>),
                    nameof(<#= baseClass #>.<#= methodName #>),
                    typeof(<#= type.Type #>),
                    typeof(<#= type.Type #>)));
    <# } #>
<# } #>
        }

        #endregion
    }
}