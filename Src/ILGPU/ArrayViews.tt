// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: ArrayViews.tt/ArrayViews.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using ILGPU.Runtime;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ILGPU
{
<#  foreach (var dim in IndexDimensions.Skip(1)) { #>
<#      var dimension = dim.Dimension; #>
<#      var typeName = $"ArrayView{dimension}D"; #>
<#      var intIndexType = $"Index{dimension}"; #>
<#      var indexType = "Long" + intIndexType; #>
    /// <summary>
    /// Represents a general view to an array on an accelerator.
    /// </summary>
    /// <typeparam name="T">The element type.</typeparam>
    [DebuggerTypeProxy(typeof(DebugArrayView<>))]
    [DebuggerDisplay("Extent = {Extent}, Length = {Length}")]
    [StructLayout(LayoutKind.Sequential)]
    public readonly partial struct <#= typeName #><T> :
        IArrayView<T, <#= intIndexType #>, <#= indexType #>>
        where T : unmanaged
    {
        #region Constants

        /// <summary>
        /// Represents the native size of a single element.
        /// </summary>
        public static int ElementSize => ArrayView<T, <#= indexType #>>.ElementSize;

        #endregion

        #region Instance

        /// <summary>
        /// Constructs a new <#= dimension #>D array view.
        /// </summary>
        /// <param name="baseView">The source view.</param>
        public <#= typeName #>(ArrayView<T, <#= indexType #>> baseView)
        {
            IndexTypeExtensions.AssertIntIndexRange(baseView.Length);
            BaseView = baseView;
        }

        #endregion

        #region Properties

        /// <summary>
        /// Returns the associated buffer.
        /// </summary>
        public ArrayView<T, <#= indexType #>> BaseView { get; }

        /// <summary>
        /// Returns true if this view points to a valid location.
        /// </summary>
        public readonly bool IsValid => BaseView.IsValid;

        /// <summary>
        /// Returns the length of this array view.
        /// </summary>
        public readonly long Length => BaseView.Length;

        /// <summary>
        /// Returns the 32-bit length of this array view.
        /// </summary>
        public readonly int IntLength => BaseView.IntLength;

        /// <summary>
        /// Returns the extent of this view.
        /// </summary>
        public readonly <#= indexType #> Extent => BaseView.Extent;

        /// <summary>
        /// Returns the 32-bit extent of this view.
        /// </summary>
        public readonly <#= intIndexType #> IntExtent => BaseView.Extent.ToIntIndex();

        /// <summary>
        /// Returns the length of this array view in bytes.
        /// </summary>
        public readonly long LengthInBytes => BaseView.LengthInBytes;

        /// <summary>
        /// Access the element at the given index.
        /// </summary>
        /// <param name="index">The element index.</param>
        /// <returns>The element at the given index.</returns>
        public readonly ref T this[<#= intIndexType #> index] => ref ToIntView()[index];

        /// <summary>
        /// Access the element at the given index.
        /// </summary>
        /// <param name="index">The element index.</param>
        /// <returns>The element at the given index.</returns>
        public readonly ref T this[<#= indexType #> index] => ref BaseView[index];

        #endregion

        #region Methods

        /// <summary>
        /// Returns a sub view of the current view starting at the given offset.
        /// </summary>
        /// <param name="index">The starting offset.</param>
        /// <param name="subViewExtent">The extent of the new sub view.</param>
        /// <returns>The new raw sub view.</returns>
        /// <remarks>
        /// Note that this function interprets the memory view as a linear contiguous
        /// chunk of memory that does not pay attention to the actual
        /// <see cref="Extent"/>. Instead, it converts the (potentially multidimensional)
        /// indices to linear indices and returns a raw view that spans a contiguous
        /// region of memory.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly ArrayView<T> GetSubView(
            <#= indexType #> index,
            long subViewExtent) =>
            BaseView.GetSubView(index, subViewExtent);

        /// <summary>
        /// Casts the current array view into another array-view type.
        /// </summary>
        /// <typeparam name="TOther">The target type.</typeparam>
        /// <returns>The casted array view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly <#= typeName #><TOther> Cast<TOther>()
            where TOther : unmanaged =>
            new <#= typeName #><TOther>(BaseView.Cast<TOther>());

        /// <summary>
        /// Converts the current view into a linear view.
        /// </summary>
        /// <returns>The converted linear view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly ArrayView<T> AsLinearView() =>
            BaseView.AsLinearView();

        /// <summary>
        /// Returns the associated 32-buffer view.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ArrayView<T, <#= intIndexType #>> ToIntView() =>
            new ArrayView<T, <#= intIndexType #>>(AsLinearView(), IntExtent);

        /// <summary>
        /// Returns a variable view that points to the element at the specified index.
        /// </summary>
        /// <param name="index">The variable index.</param>
        /// <returns>The resolved variable view.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly VariableView<T> GetVariableView(<#= indexType #> index) =>
            BaseView.GetVariableView(index);

        #endregion

        #region Object

        /// <summary>
        /// Returns the string representation of this view.
        /// </summary>
        /// <returns>The string representation of this view.</returns>
        public readonly override string ToString() => BaseView.ToString();

        #endregion

        #region Operators

        /// <summary>
        /// Converts the given specialized array view into a corresponding generic view.
        /// </summary>
        /// <returns>The corresponding generic view.</returns>
        public static implicit operator ArrayView<T, <#= indexType #>>(
            <#= typeName #><T> view) =>
            view.BaseView;

        /// <summary>
        /// Converts the given specialized array view into a corresponding generic view.
        /// </summary>
        /// <returns>The corresponding generic view.</returns>
        public static explicit operator ArrayView<T, <#= intIndexType #>>(
            <#= typeName #><T> view) =>
            view.ToIntView();

        /// <summary>
        /// Converts the given generic array view into a corresponding specialized view.
        /// </summary>
        /// <returns>The corresponding specialized view.</returns>
        public static implicit operator <#= typeName #><T>(
            ArrayView<T, <#= indexType #>> baseView) =>
            new <#= typeName #><T>(baseView);

        /// <summary>
        /// Converts the given specialized array view into a corresponding generic view.
        /// </summary>
        /// <returns>The corresponding generic view.</returns>
        public static implicit operator <#= typeName #><T>(
            ArrayView<T, <#= intIndexType #>> view) =>
            new <#= typeName #><T>(view.AsLinearView(), view.Extent);

        #endregion
    }

    namespace Runtime
    {
        partial class DebugArrayView<T>
        {
            /// <summary>
            /// Constructs a new debug view.
            /// </summary>
            /// <param name="source">The target array view.</param>
            public DebugArrayView(<#= typeName #><T> source)
                : base(source.AsLinearView())
            { }
        }
    }

<#  } #>
}