// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2019-2025 ILGPU Project
//                                    www.ilgpu.net
//
// File: ScanReduceOperations.tt/ScanReduceOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../Static/TypeInformation.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var reductionTypes = AtomicNumericTypes;
var operations = new []
    {
        new { Name = "And", Floats = false, NeutralElement = "0", Prefix = "", Operation = " & ", Suffix = "" },
        new { Name = "Or",  Floats = false, NeutralElement = "0", Prefix = "", Operation = " | ", Suffix = "" },
        new { Name = "Add", Floats = true,  NeutralElement = "0", Prefix = "", Operation = " + ", Suffix = "" },
        new { Name = "Max", Floats = true,  NeutralElement = "{0}.MinValue", Prefix = "XMath.Max(", Operation = ", ", Suffix = ")" },
        new { Name = "Min", Floats = true,  NeutralElement = "{0}.MaxValue", Prefix = "XMath.Min(", Operation = ", ", Suffix = ")" },
    };
#>

// disable: max_line_length
#pragma warning disable IDE0004 // Cast is redundant

namespace ILGPU.ScanReduce;

<#  foreach (var type in reductionTypes) { #>
<#      foreach (var op in operations) { #>
<#          if (!op.Floats && type.IsFloat) continue; #>
/// <summary>
/// Represents an <#= op.Name #> reduction of type <#= type.Type #>.
/// </summary>
public readonly struct <#= op.Name #><#= type.Name #> : IScanReduceOperation<<#= type.Type #>>
{
    /// <summary>
    /// Returns the identity value (the neutral element of the operation), such that
    /// Apply(Apply(Identity, left), right) == Apply(left, right).
    /// </summary>
    public static <#= type.Type #> Identity => <#= string.Format(op.NeutralElement, type.Type) #>;

    /// <summary>
    /// Applies the current operation.
    /// </summary>
    /// <param name="first">The first operand.</param>
    /// <param name="second">The second operand.</param>
    /// <returns>The result of the operation.</returns>
    public static <#= type.Type #> Apply(<#= type.Type #> first, <#= type.Type #> second) =>
        (<#= type.Type #>)(<#= op.Prefix #>first<#= op.Operation #>second<#= op.Suffix #>);

    /// <summary>
    /// Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
    /// </summary>
    /// <param name="target">The target address to update.</param>
    /// <param name="value">The value.</param>
    public static void AtomicApply(ref <#= type.Type #> target, <#= type.Type #> value) =>
        Atomic.<#= op.Name #>(ref target, value);
}

<#      } #>
<#  } #>

#pragma warning restore IDE0004