// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ArithmeticOperations.tt/ArithmeticOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../../Static/TypeInformation.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string rootPath = Host.ResolvePath("../../Static");
var unaryOps = GetUnaryMathOps(rootPath);
var binaryOps = GetBinaryMathOps(rootPath);
var ternaryOps = GetTernaryMathOps(rootPath);

// Rewriter settings
var binaryOpRewriterSettings = new[]
{
    new { Name = "LHS", Left = "PrimitiveValue", Right = "Value", Value = 0 },
    new { Name = "RHS", Left = "Value", Right = "PrimitiveValue", Value = 1 },
};
var binaryOpNestedRewriterSettings = new[]
{
    new
    {
        Name = "LHS",
        Left = "BinaryArithmeticValue",
        Right = "Value",
        Mode = MathOpRewriterMode.CombineNestedLeftConstant
    },
    new
    {
        Name = "RHS",
        Left = "Value",
        Right = "BinaryArithmeticValue",
        Mode = MathOpRewriterMode.CombineNestedRightConstant
    },
};
#>

using ILGPU.IR.Values;
using ILGPU.Util;
using System.Diagnostics;
using System.Runtime.CompilerServices;

// disable: max_line_length
#pragma warning disable IDE0046 // Convert to conditional expression
#pragma warning disable IDE0047 // Remove unnecessary parentheses
#pragma warning disable IDE0066 // Convert switch statement to expression

namespace ILGPU.IR.Construction
{
    partial class IRBuilder
    {
        private ValueReference UnaryArithmeticFoldConstants(
            Location location,
            PrimitiveValue value,
            UnaryArithmeticKind kind)
        {
            switch (kind)
            {
<#    foreach (var op in unaryOps) { #>
                case UnaryArithmeticKind.<#= op.Name #>:
                    return UnaryArithmeticFoldConstants_<#= op.Name #>(location, value);
<#    } #>
                default:
                    throw location.GetArgumentException(nameof(kind));
            }
        }

<#    foreach (var op in unaryOps) { #>
        private ValueReference UnaryArithmeticFoldConstants_<#= op.Name #>(
            Location location,
            PrimitiveValue value)
        {
            switch (value.BasicValueType)
            {
<#          if (op.HasFloats) { #>
                case BasicValueType.Float16:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "value.Float16Value") #>);
                case BasicValueType.Float32:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "value.Float32Value") #>);
                case BasicValueType.Float64:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "value.Float64Value") #>);
<#          } if (op.HasBools) { #>
                case BasicValueType.Int1:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(true, "value.Int1Value") #>);
<#          } if (op.HasInts) { #>
                case BasicValueType.Int8:
                    return CreatePrimitiveValue(
                        location,
                        (sbyte)<#= op.GetOpOrCall(false, "value.Int8Value") #>);
                case BasicValueType.Int16:
                    return CreatePrimitiveValue(
                        location,
                        (short)<#= op.GetOpOrCall(false, "value.Int16Value") #>);
                case BasicValueType.Int32:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "value.Int32Value") #>);
                case BasicValueType.Int64:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "value.Int64Value") #>);
<#          } #>
            }
            throw location.GetInvalidOperationException();
        }

<#    } #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private Value UnaryArithmeticSimplify(
            Location location,
            Value value,
            UnaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
            switch (kind)
            {
<#    foreach (var op in unaryOps.Where(t => t.HasRewriters)) { #>
                case UnaryArithmeticKind.<#= op.Name #>:
<#          foreach (var rewriter in op.Rewriters) { #>
<#              if (rewriter.Mode == MathOpRewriterMode.CombineOperation) { #>
                    {
                        if (value is <#= rewriter.Type #> nested &&
                            <#= rewriter.MakeSourceExpr("value", "nested") #>)
                        {
                            return <#= rewriter.MakeTargetExpr("value", "nested") #>;
                        }
                    }
<#              } else { #>
                    if (<#= rewriter.MakeSourceExpr("value", "nested") #>)
                        return <#= rewriter.MakeTargetExpr("value", "nested") #>;
<#              } #>
<#          } #>
                    break;
<#    } #>
            }
            return null;
        }

        private ValueReference BinaryArithmeticFoldConstants(
            Location location,
            PrimitiveValue left,
            PrimitiveValue right,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
            switch (kind)
            {
<#    foreach (var op in binaryOps) { #>
                case BinaryArithmeticKind.<#= op.Name #>:
                    return BinaryArithmeticFoldConstants_<#= op.Name #>(
                        location,
                        left,
                        right,
                        kind,
                        flags);
<#    } #>
                default:
                    throw location.GetArgumentException(nameof(kind));
            }
        }

<#    foreach (var settings in binaryOpRewriterSettings) { #>
<#          var entries = binaryOps.
                SelectMany(t => t.GetRewriters(settings.Value).
                    Select(t2 => (t, t2))).
                ToLookup(t => t.Item2.Mode); #>
        /// <summary>
        /// Simplifies the <#= settings.Name #> of a binary expression.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private Value BinaryArithmeticSimplify_<#= settings.Name #>(
            Location location,
            <#= settings.Left #> left,
            <#= settings.Right #> right,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
            switch (kind)
            {
<#          foreach (var entry in entries[MathOpRewriterMode.Default].
                GroupBy(t => t.Item1, t => t.Item2)) { #>
                case BinaryArithmeticKind.<#= entry.Key.Name #>:
<#              foreach (var rewriter in entry) { #>
                    if (<#= rewriter.MakeSourceExpr("left", "right") #>)
                        return <#= rewriter.MakeTargetExpr("left", "right") #>;
<#              } #>
                    break;
<#          } #>
            }
            return null;
        }

<#    } #>
<#    foreach (var settings in binaryOpNestedRewriterSettings) { #>
<#          var entries = binaryOps.
                Select(t => (t, t.GetRewriters(settings.Mode).FirstOrDefault())).
                Where(t => t.Item2 != null); #>
        /// <summary>
        /// Simplifies the <#= settings.Name #> of a binary expression.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private Value BinaryArithmeticSimplify_<#= settings.Name #>(
            Location location,
            BinaryArithmeticValue arithmeticValue,
            PrimitiveValue firstValue,
            PrimitiveValue secondValue,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
            switch (kind)
            {
<#          foreach (var (op, rewriter) in entries) { #>
                case BinaryArithmeticKind.<#= op.Name #>:
                    return CreateArithmetic(
                        location,
<#              if (settings.Mode == MathOpRewriterMode.CombineNestedLeftConstant) { #>
                        BinaryArithmeticFoldConstants(
                            location,
                            secondValue,
                            firstValue,
                            BinaryArithmeticKind.<#= rewriter.Target #>,
                            flags),
                        arithmeticValue.Right,
<#              } else { #>
                        arithmeticValue.Left,
                        BinaryArithmeticFoldConstants(
                            location,
                            firstValue,
                            secondValue,
                            BinaryArithmeticKind.<#= rewriter.Target #>,
                            flags),
<#              } #>
                        <#= rewriter.Source != null
                        ? "BinaryArithmeticKind." + rewriter.Source
                        : "kind" #>,
                        flags);
<#          } #>
            }
            return null;
        }

<#    } #>
        [Conditional("DEBUG")]
        private static void VerifyBinaryArithmeticOperands(
            Location location,
            Value left,
            Value right,
            BinaryArithmeticKind kind)
        {
            switch (kind)
            {
<#    foreach (var op in binaryOps) { #>
                case BinaryArithmeticKind.<#= op.Name #>:
                    location.Assert(
                        <#= string.Join(" || ", op.EnumerateFlags(f =>
                            f switch
                            {
                                MathOpFlags.Bools => "left.BasicValueType == BasicValueType.Int1",
                                MathOpFlags.Ints => "left.BasicValueType.IsInt()",
                                MathOpFlags.Floats => "left.BasicValueType.IsFloat()",
                                MathOpFlags.Pointers => "left.Type.IsPointerType",
                                _ => throw new NotSupportedException()
                            })) #>
                    );
                    break;
<#    } #>
            }
        }

<#    foreach (var op in binaryOps) { #>
        private ValueReference BinaryArithmeticFoldConstants_<#= op.Name #>(
            Location location,
            PrimitiveValue left,
            PrimitiveValue right,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
<#          if (op.HasInts) { #>
            var isUnsigned = (flags & ArithmeticFlags.Unsigned) == ArithmeticFlags.Unsigned;
<#          } #>
            switch (left.BasicValueType)
            {
<#          if (op.HasFloats) { #>
                case BasicValueType.Float16:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "left.Float16Value", "right.Float16Value") #>);
                case BasicValueType.Float32:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "left.Float32Value", "right.Float32Value") #>);
                case BasicValueType.Float64:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(false, "left.Float64Value", "right.Float64Value") #>);
<#          } if (op.HasBools) { #>
                case BasicValueType.Int1:
                    return CreatePrimitiveValue(
                        location,
                        <#= op.GetOpOrCall(true, "left.Int1Value", "right.Int1Value") #>);
<#          } if (op.HasInts) { #>
                case BasicValueType.Int8:
                    if (isUnsigned)
                    {
                        return CreatePrimitiveValue(
                            location,
                            (byte)(<#= op.GetOpOrCall(false, "left.UInt8Value", "right.UInt8Value") #>));
                    }
                    else
                    {
                        return CreatePrimitiveValue(
                            location,
                            (sbyte)(<#= op.GetOpOrCall(false, "left.Int8Value", "right.Int8Value") #>));
                    }
                case BasicValueType.Int16:
                    if (isUnsigned)
                    {
                        return CreatePrimitiveValue(
                            location,
                            (ushort)(<#= op.GetOpOrCall(false, "left.UInt16Value", "right.UInt16Value") #>));
                    }
                    else
                    {
                        return CreatePrimitiveValue(
                            location,
                            (short)(<#= op.GetOpOrCall(false, "left.Int16Value", "right.Int16Value") #>));
                    }
                case BasicValueType.Int32:
                    if (isUnsigned)
                    {
                        return CreatePrimitiveValue(
                            location,
                            <#= op.GetOpOrCall(false, "left.UInt32Value", "right.UInt32Value") #>);
                    }
                    else
                    {
                        return CreatePrimitiveValue(
                            location,
                            <#= op.GetOpOrCall(false, "left.Int32Value", "right.Int32Value") #>);
                    }
                case BasicValueType.Int64:
                    if (isUnsigned)
                    {
                        return CreatePrimitiveValue(
                            location,
                            <#= op.GetOpOrCall(false, "left.UInt64Value", "right.UInt64Value") #>);
                    }
                    else
                    {
                        return CreatePrimitiveValue(
                            location,
                            <#= op.GetOpOrCall(false, "left.Int64Value", "right.Int64Value") #>);
                    }
<#          } #>
            }
            throw location.GetInvalidOperationException();
        }

<#    } #>


    }
}

#pragma warning restore IDE0066 // Convert switch statement to expression
#pragma warning restore IDE0046 // Convert to conditional expression
#pragma warning restore IDE0047 // Remove unnecessary parentheses