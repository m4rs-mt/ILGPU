// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ValueTuples.tt/ValueTuples.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Reflection;
<#
    var MaxParams = 8;
    var types =
        from n in Enumerable.Range(1, MaxParams)
        let range = Enumerable.Range(1, n)
        select new
        {
            NumParams = n,
            Range = range,
            TypeParams = string.Join(", ", from r in range select $"T{r}")
        };
#>

namespace ILGPU.IR.Types
{
    /// <summary>
    /// Contains helper functions for supporting System.ValueTuple.
    /// </summary>
    internal static class ValueTuples
    {
        #region Static

        /// <summary>
        /// Retrieves the offsets for the fields in a value tuple that use the supplied
        /// generic type arguments.
        /// </summary>
        /// <param name="types">The generic type arguments of the value tuple.</param>
        /// <returns>Offsets for the fields of the value tuple.</returns>
        public static int[] GetOffsets(Type[] types)
        {
            var methodInfo = types.Length switch
            {
<#  foreach (var type in types) { #>
                <#= type.NumParams #> => GetOffsetsMethod<#= type.NumParams #>,
<#  } #>
                _ => throw new NotImplementedException()
            };
            var method = methodInfo.MakeGenericMethod(types);
            return (int[])method.Invoke(null, null);
        }

        private static unsafe int CalculateOffset(byte* current, byte* baseline) =>
            (int)(current - baseline);

<#  foreach (var type in types) { #>
        /// <summary>
        /// Retrieves the offsets for the fields in the given value tuple.
        /// </summary>
        private static unsafe int[] GetOffsets<#= type.NumParams #><
            <#= type.TypeParams #>>()
<#      for (var i = 0; i < type.NumParams; i++) { #>
            where T<#= i + 1 #> : unmanaged
<#      } #>
        {
            ValueTuple<<#= type.TypeParams #>> input;
            var offsets = new int[<#= type.NumParams #>];
            byte* baseline = (byte*)&input;
<#
        for (var i = 0; i < type.NumParams; i++) {
            var itemName = i + 1 == MaxParams ? "Rest" : $"Item{i + 1}";
#>
            offsets[<#= i #>] = CalculateOffset((byte*)&input.<#= itemName #>, baseline);
<#      } #>
            return offsets;
        }

        private static readonly MethodInfo GetOffsetsMethod<#= type.NumParams #> =
            typeof(ValueTuples).GetMethod(
                nameof(GetOffsets<#= type.NumParams #>),
                BindingFlags.NonPublic | BindingFlags.Static);

<#  } #>
        #endregion
    }
}