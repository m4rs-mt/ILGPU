// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: RoundingModes.tt/RoundingModes.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using ILGPU.Util;
using System;
using System.Runtime.CompilerServices;

<#
    var roundingFunctions = new []
    {
        new RoundingFunction("RoundToNegativeInfinity", "float"),
        new RoundingFunction("RoundToNegativeInfinity", "double"),

        new RoundingFunction("RoundToPositiveInfinity", "float"),
        new RoundingFunction("RoundToPositiveInfinity", "double"),

        new RoundingFunction("RoundAwayFromZero", "float"),
        new RoundingFunction("RoundAwayFromZero", "double"),

        new RoundingFunction("RoundToEven", "float"),
        new RoundingFunction("RoundToEven", "double"),
    };

    var midpointRoundingFunctions = new []
    {
        new RoundingFunction("Round", "float"),
        new RoundingFunction("Round", "double"),
    };
#>

namespace ILGPU.Algorithms
{
    partial class XMath
    {
        /// <summary>
        /// Provides shared implementations for math rounding functions.
        /// </summary>
        internal class RoundingModes
        {
            internal const ulong DoubleSignMask = 0x8000_0000_0000_0000;
            internal const ulong DoubleExponentMask = 0x7FF0_0000_0000_0000;
            internal const ulong DoubleMantissaMask = 0x000F_FFFF_FFFF_FFFF;
            internal const int DoubleExponentBias = 1023;
            internal const int DoubleNumMantissaBits = 52;

            internal const uint FloatSignMask = 0x8000_0000;
            internal const uint FloatExponentMask = 0x7F80_0000;
            internal const uint FloatMantissaMask = 0x007F_FFFF;
            internal const int FloatExponentBias = 127;
            internal const int FloatNumMantissaBits = 23;

<# foreach (var function in roundingFunctions) { #>
            /// <summary>
<#      if (function.Name == "RoundToNegativeInfinity") { #>
            /// Rounds the given value towards negative infinity.
            /// If the value is positive, discard any fractional bits.
            /// If the value is negative, the fractional bits will round to the next
            /// smaller integer.
<#      } else if (function.Name == "RoundToPositiveInfinity") { #>
            /// Rounds the given value towards positive infinity.
            /// If the value is negative, discard any fractional bits.
            /// If the value is positive, the fractional bits will round to the next
            /// larger integer.
<#      } else if (function.Name == "RoundAwayFromZero") { #>
            /// Rounds the given value towards the nearest whole number.
            /// If the value is halfway, it is rounded away from zero.
<#      } else if (function.Name == "RoundToEven") { #>
            /// Rounds the given value towards the nearest whole number.
            /// If the value is halfway, it is rounded to the even number.
<#      } #>
            /// </summary>
            /// <param name="value">The value to round.</param>
            /// <returns>The rounded value.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static <#= function.FloatType #> <#= function.Name #>(
                <#= function.FloatType #> value)
            {
                <#= function.IntType #> bits = Interop.FloatAsInt(value);

                // If the value is +/- zero, return the original value.
                if ((bits & ~<#= function.FloatTypeName #>SignMask) == 0)
                    return value;

                // If exponent is negative, the result will be fractional.
                var exponent =
                    (int)((bits & <#= function.FloatTypeName #>ExponentMask)
                        >> <#= function.FloatTypeName #>NumMantissaBits)
                    - <#= function.FloatTypeName #>ExponentBias;
                if (exponent < 0)
                {
<#      if (function.Name == "RoundToNegativeInfinity") { #>
                    return Utilities.Select(
                        (bits & <#= function.FloatTypeName #>SignMask) == 0,
                        0.0<#= function.FloatValueSuffix #>,
                        -1.0<#= function.FloatValueSuffix #>);
<#      } else if (function.Name == "RoundToPositiveInfinity") { #>
                    return Utilities.Select(
                        (bits & <#= function.FloatTypeName #>SignMask) != 0,
                        0.0<#= function.FloatValueSuffix #>,
                        1.0<#= function.FloatValueSuffix #>);
<#      } else if (function.Name == "RoundAwayFromZero") { #>
                    // If the exponent is -1, it rounds to one.
                    // i.e. 2^(-1) = 0.5 (returns 1, round away from zero).
                    // Otherwise, the value is less than 0.5, round to zero.
                    //
                    // NB: Preserve the original +/- sign.
                    <#= function.IntType #> roundedValue = Utilities.Select(
                        exponent == -1,
                        Interop.FloatAsInt(1.0<#= function.FloatValueSuffix #>),
                        Interop.FloatAsInt(0.0<#= function.FloatValueSuffix #>));
                    return Interop.IntAsFloat(
                        (bits & <#= function.FloatTypeName #>SignMask) | roundedValue);
<#      } else if (function.Name == "RoundToEven") { #>
                    // If the exponent is -1, with no mantissa, it rounds
                    // to zero. i.e. 2^(-1) = 0.5 (returns 0, round to even).
                    //
                    // If there are mantissa bits, the value is greater than 0.5,
                    // so it rounds to one.
                    //
                    // NB: Preserve the original +/- sign.
                    var mantissa = bits & <#= function.FloatTypeName #>MantissaMask;
                    <#= function.IntType #> roundedValue = Utilities.Select(
                        exponent == -1 && mantissa != 0,
                        Interop.FloatAsInt(1.0<#= function.FloatValueSuffix #>),
                        Interop.FloatAsInt(0.0<#= function.FloatValueSuffix #>));
                    return Interop.IntAsFloat(
                        (bits & <#= function.FloatTypeName #>SignMask) | roundedValue);
<#      } else { #>
                    Debug.Assert(false);
                    return <#= function.FloatType #>.NaN;
<#      } #>
                }
                else if (exponent >= <#= function.FloatTypeName #>NumMantissaBits)
                {
                    // If the exponent is large enough, there will be no significant bits
                    // to represent fractions. Return the original value because it will
                    // round to itself.
                    return value;
                }
                else
                {
                    // The value has fractional bits, so we need to determine the
                    // rounding.
                    var mantissa = bits & <#= function.FloatTypeName #>MantissaMask;
                    var midpoint = 1<#= function.IntValueSuffix #>
                        << (<#= function.FloatTypeName #>NumMantissaBits - exponent - 1);
                    var fractionalMask = (midpoint << 1) - 1;
                    var fractional = mantissa & fractionalMask;
                    var truncatedValue = bits & ~fractionalMask;

<#      if (function.Name == "RoundToNegativeInfinity") { #>
                    // If the value is positive, discard any fractional bits.
                    // If the value is negative, the fractional bits will round to the
                    // next smaller integer.
                    return Utilities.Select(
                        (bits & <#= function.FloatTypeName #>SignMask) == 0
                        || fractional <= 0,
                        Interop.IntAsFloat(truncatedValue),
                        Interop.IntAsFloat(truncatedValue + (midpoint << 1)));
<#      } else if (function.Name == "RoundToPositiveInfinity") { #>
                    // If the value is negative, discard any fractional bits.
                    // If the value is positive, the fractional bits will round to the
                    // next larger integer.
                    return Utilities.Select(
                        (bits & <#= function.FloatTypeName #>SignMask) != 0
                        || fractional <= 0,
                        Interop.IntAsFloat(truncatedValue),
                        Interop.IntAsFloat(truncatedValue + (midpoint << 1)));
<#      } else if (function.Name == "RoundAwayFromZero") { #>
                    // If the fraction is < 0.5, round towards zero by discarding the
                    // fractional bits. Otherwise, the fraction is >= 0.5, so it should
                    // be rounded away from zero by adding "one".
                    return Utilities.Select(
                        fractional < midpoint,
                        Interop.IntAsFloat(truncatedValue),
                        Interop.IntAsFloat(truncatedValue + (midpoint << 1)));
<#      } else if (function.Name == "RoundToEven") { #>
                    // If the fraction is < 0.5, discarding the fractional bits.
                    // Otherwise, the fraction is > 0.5, so it should be rounded up by
                    // adding "one".
                    //
                    // If the fraction == 0.5, and the value is already even, discard the
                    // fractional bits. Otherwise, the number is odd, so round it to the
                    // next even number by adding "one".
                    if (fractional < midpoint)
                    {
                        return Interop.IntAsFloat(truncatedValue);
                    }
                    else if (fractional > midpoint)
                    {
                        return Interop.IntAsFloat(truncatedValue + (midpoint << 1));
                    }
                    else
                    {
                        // The fractional part is exactly x.5 - Round To Even.
                        var evenMask = midpoint << 1;
                        return Utilities.Select(
                            (mantissa & evenMask) == 0,
                            Interop.IntAsFloat(truncatedValue),
                            Interop.IntAsFloat(truncatedValue + (midpoint << 1)));
                    }
<#      } else { #>
                    Debug.Assert(false);
                    return <#= function.FloatType #>.NaN;
<#      } #>
                }
            }

<# } #>
<# foreach (var function in midpointRoundingFunctions) { #>
            /// <summary>
            /// Rounds the value to the nearest value (halfway cases are rounded to even).
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>The nearest value.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static <#= function.FloatType #> Round(
                <#= function.FloatType #> value) =>
                Round(value, MidpointRounding.ToEven);

            /// <summary>
            /// Rounds the value to the nearest value (halfway cases are rounded to even).
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="digits">
            /// The number of fractional digits in the return value.
            /// </param>
            /// <returns>The nearest value.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static <#= function.FloatType #> Round(
                <#= function.FloatType #> value,
                int digits) =>
                Round(value, digits, MidpointRounding.ToEven);

            /// <summary>
            /// Rounds the value to the nearest value.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="mode">
            /// Specifiies how to round value if it is midway between two numbers.
            /// </param>
            /// <returns>The nearest value.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static <#= function.FloatType #> Round(
                <#= function.FloatType #> value,
                MidpointRounding mode) =>
                Round(value, 0, mode);

            /// <summary>
            /// Rounds the value to the nearest value.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="digits">
            /// The number of fractional digits in the return value.
            /// </param>
            /// <param name="mode">
            /// Specifiies how to round value if it is midway between two numbers.
            /// </param>
            /// <returns>The nearest value.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static <#= function.FloatType #> Round(
                <#= function.FloatType #> value,
                int digits,
                MidpointRounding mode)
            {
                var result = value;

                // Only need to do work if the supplied value is smaller than the minimum
                // that we can round.
<#      int maxDigits = function.FloatType == "float" ? 6 : 15; #>
                if (XMath.Abs(result) <
                    1e<#= maxDigits + 1 #><#= function.FloatValueSuffix #>)
                {
                    // Shift the input value by the number of digits requested.
                    // If digits < 0, fallback to 0 digits.
                    // If digits > <#= maxDigits #>, fallback to <#= maxDigits #>.
                    <#= function.FloatType #> multiplier = digits switch
                        {
                            int d when d <= 0 => 1e0<#= function.FloatValueSuffix #>,
<#      for (var d = 1; d < maxDigits; d++) { #>
                            <#= d #> => 1e<#= d #><#= function.FloatValueSuffix #>,
<#      } #>
                            _ => 1e<#= maxDigits #><#= function.FloatValueSuffix #>
                        };

                    // NOTE: net471 and netstandard2.1 only support the first two modes:
                    // In order to fully support netcoreapp3.1 and net5.0, we convert
                    // the mode to an integer.
                    //
                    // This is also a workaround for the T4 template not supporting the
                    // newer rounding modes.
                    //
                    // This has the side effect of adding extra functionality to net471
                    // and netstandard2.1.
                    //
                    // 0 - MidpointRounding.ToEven
                    // 1 - MidpointRounding.AwayFromZero
                    // 2 - MidpointRounding.ToZero
                    // 3 - MidpointRounding.ToNegativeInfinity
                    // 4 - MidpointRounding.ToPositiveInfinity
                    //
                    // If the rounding mode is out of range, fallback to the
                    // default MidpointRounding.ToEven.
                    result *= multiplier;
                    result = (int)mode switch
                    {
                        0 => XMath.RoundToEven(result),
                        1 => XMath.RoundAwayFromZero(result),
                        2 => RoundToZero(result),
                        3 => RoundToNegativeInfinity(result),
                        4 => RoundToPositiveInfinity(result),
                        _ => XMath.RoundToEven(result)
                    };
                    result /= multiplier;
                }

                return result;
            }

<# } #>
            /// <summary>
            /// Rounds the value to the nearest value (halfway cases are rounded to zero).
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>The nearest value.</returns>
            public static double RoundToZero(double value) =>
                Truncate(value);

            /// <summary>
            /// Rounds the value to the nearest value (halfway cases are rounded to zero).
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>The nearest value.</returns>
            public static float RoundToZero(float value) =>
                Truncate(value);
        }
    }
}
<#+
    static string ToUpperFirst(string s)
    {
        if (string.IsNullOrEmpty(s))
            return string.Empty;

        char[] a = s.ToCharArray();
        a[0] = char.ToUpper(a[0]);
        return new string(a);
    }

    class RoundingFunction
    {
        public RoundingFunction(string name, string floatType)
        {
            Name = name;
            FloatType = floatType;
        }

        public string Name { get; }
        public string FloatType { get; }
        public string IntType => FloatType == "float" ? "uint" : "ulong";

        public string FloatValueSuffix => FloatType == "float" ? "f" : "";
        public string IntValueSuffix => FloatType == "float" ? "U" : "UL";

        public string FloatTypeName => $"{ToUpperFirst(FloatType)}";
    }
#>