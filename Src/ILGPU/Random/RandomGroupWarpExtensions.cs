// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2024-2025 ILGPU Project
//                                    www.ilgpu.net
//
// File: RandomGroupWarpExtensions.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

using ILGPU.Intrinsic.Providers;
using ILGPU.Random;
using ILGPU.Util;
using System;

#pragma warning disable CA1051 // Do not declare visible instance fields

namespace ILGPU;

partial class Group
{
    /// <summary>
    /// A wrapped random provider valid in the scope of the current warp.
    /// </summary>
    /// <typeparam name="TRandomProvider"></typeparam>
    public struct RandomScope<TRandomProvider> : IRandomProvider, IDisposable
        where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
    {
        private Warp.RandomScope<TRandomProvider> _scope;

        /// <summary>
        /// Constructs a new random scope.
        /// </summary>
        public RandomScope()
        {
            _scope = Warp.GetRandom<TRandomProvider>();
        }

        /// <summary>
        /// Generates a random int in [0..int.MaxValue].
        /// </summary>
        /// <returns>A random int in [0..int.MaxValue].</returns>
        public int Next() => _scope.Next();

        /// <summary>
        /// Generates a random long in [0..long.MaxValue].
        /// </summary>
        /// <returns>A random long in [0..long.MaxValue].</returns>
        public long NextLong() => _scope.NextLong();

        /// <summary>
        /// Generates a random float in [0..1).
        /// </summary>
        /// <returns>A random float in [0..1).</returns>
        public float NextFloat() => _scope.NextFloat();

        /// <summary>
        /// Generates a random double in [0..1).
        /// </summary>
        /// <returns>A random double in [0..1).</returns>
        public double NextDouble() => _scope.NextDouble();

        /// <summary>
        /// Shifts the current period.
        /// </summary>
        /// <param name="shift">The shift amount.</param>
        public void ShiftPeriod(int shift) => _scope.ShiftPeriod(shift);

        /// <summary>
        /// Creates a new non-zero random number that is masked by the group mask.
        /// </summary>
        /// <returns>A non-zero random number that is masked by the group mask.</returns>
        public int NextGroupMasked()
        {
            uint nextValue = (uint)Next();
            uint baseRandomMasked = nextValue & (uint)Mask;
            uint baseRandomShifted = nextValue << Dimension;
            return RandomExtensions.ToInt(
                Utilities.Select(
                    baseRandomMasked == 0,
                    baseRandomShifted,
                    baseRandomMasked));
        }

        /// <summary>
        /// Creates a new random number that is prefixed with the current group index.
        /// </summary>
        /// <returns>
        /// A new non-zero random number that is prefixed with the current group index.
        /// </returns>
        public int NextGroupThreadUnique() => NextGroupMasked() + Index;

        /// <summary>
        /// Commits changes and updates to this random provider to ensure new random
        /// values will be generated by future calls to
        /// <see cref="GetRandom{TRandomProvider}"/>.
        /// </summary>
        public readonly void Dispose() => _scope.Dispose();
    }

    /// <summary>
    /// Creates a new random number of the current warp.
    /// </summary>
    /// <typeparam name="TRandomProvider">
    /// The random number provider type.
    /// </typeparam>
    /// <returns>A permuted value from another random warp lane.</returns>
    public static RandomScope<TRandomProvider> GetRandom<TRandomProvider>()
        where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider> =>
        new();
}

partial class Warp
{
    /// <summary>
    /// A wrapped random provider valid in the scope of the current warp.
    /// </summary>
    /// <typeparam name="TRandomProvider"></typeparam>
    public struct RandomScope<TRandomProvider> : IRandomProvider, IDisposable
        where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider>
    {
        private readonly RandomProviderView<TRandomProvider> _view;

        /// <summary>
        /// The encapsulated random provider for reference operations.
        /// </summary>
        public TRandomProvider RandomProvider;

        /// <summary>
        /// Constructs a new random scope.
        /// </summary>
        public RandomScope()
        {
            _view = GetRandomProviderView<TRandomProvider>();

            var firstLaneValue = new FirstLaneValue<TRandomProvider>(_view[GlobalIndex]);
            var value = Broadcast(firstLaneValue);
            value.ShiftPeriod(LaneIndex);

            RandomProvider = value;
        }

        /// <summary>
        /// Generates a random int in [0..int.MaxValue].
        /// </summary>
        /// <returns>A random int in [0..int.MaxValue].</returns>
        public int Next() => RandomProvider.Next();

        /// <summary>
        /// Generates a random long in [0..long.MaxValue].
        /// </summary>
        /// <returns>A random long in [0..long.MaxValue].</returns>
        public long NextLong() => RandomProvider.NextLong();

        /// <summary>
        /// Generates a random float in [0..1).
        /// </summary>
        /// <returns>A random float in [0..1).</returns>
        public float NextFloat() => RandomProvider.NextFloat();

        /// <summary>
        /// Generates a random double in [0..1).
        /// </summary>
        /// <returns>A random double in [0..1).</returns>
        public double NextDouble() => RandomProvider.NextDouble();

        /// <summary>
        /// Shifts the current period.
        /// </summary>
        /// <param name="shift">The shift amount.</param>
        public void ShiftPeriod(int shift) => RandomProvider.ShiftPeriod(shift);

        /// <summary>
        /// Commits changes and updates to this random provider to ensure new random
        /// values will be generated by future calls to
        /// <see cref="GetRandom{TRandomProvider}"/>.
        /// </summary>
        public readonly void Dispose()
        {
            if (IsFirstLane)
                _view[GlobalIndex] = RandomProvider;
        }
    }

    /// <summary>
    /// Creates a new random number of the current warp.
    /// </summary>
    /// <typeparam name="TRandomProvider">
    /// The random number provider type.
    /// </typeparam>
    /// <returns>A permuted value from another random warp lane.</returns>
    public static RandomScope<TRandomProvider> GetRandom<TRandomProvider>()
        where TRandomProvider : unmanaged, IRandomProvider<TRandomProvider> =>
        new();
}

#pragma warning restore CA1051 // Do not declare visible instance fields
