// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: TypeInformation.ttinclude
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ include file="..//ILGPU/Static/TypeInformation.ttinclude" #>
<#+
// Math functions

public static readonly ValueTuple<string, Type[]>[] DefaultMathFunctions =
    {
        ("Abs",   new Type[] { typeof(sbyte) }),
        ("Abs",   new Type[] { typeof(byte) }),
        ("Abs",   new Type[] { typeof(short) }),
        ("Abs",   new Type[] { typeof(ushort) }),
        ("Abs",   new Type[] { typeof(int) }),
        ("Abs",   new Type[] { typeof(uint) }),
        ("Abs",   new Type[] { typeof(long) }),
        ("Abs",   new Type[] { typeof(ulong) }),
        ("Abs",   new Type[] { typeof(float) }),
        ("Abs",   new Type[] { typeof(double) }),

        ("Decompose",      new Type[] { typeof(long) }),
        ("Decompose",      new Type[] { typeof(ulong) }),

        ("Min",   new Type[] { typeof(sbyte),  typeof(sbyte) }),
        ("Min",   new Type[] { typeof(byte),   typeof(byte) }),
        ("Min",   new Type[] { typeof(short),  typeof(short) }),
        ("Min",   new Type[] { typeof(ushort), typeof(ushort) }),
        ("Min",   new Type[] { typeof(int),    typeof(int) }),
        ("Min",   new Type[] { typeof(uint),   typeof(uint) }),
        ("Min",   new Type[] { typeof(long),   typeof(long) }),
        ("Min",   new Type[] { typeof(ulong),  typeof(ulong) }),
        ("Min",   new Type[] { typeof(float),  typeof(float) }),
        ("Min",   new Type[] { typeof(double), typeof(double) }),

        ("Max",   new Type[] { typeof(sbyte),  typeof(sbyte) }),
        ("Max",   new Type[] { typeof(byte),   typeof(byte) }),
        ("Max",   new Type[] { typeof(short),  typeof(short) }),
        ("Max",   new Type[] { typeof(ushort), typeof(ushort) }),
        ("Max",   new Type[] { typeof(int),    typeof(int) }),
        ("Max",   new Type[] { typeof(uint),   typeof(uint) }),
        ("Max",   new Type[] { typeof(long),   typeof(long) }),
        ("Max",   new Type[] { typeof(ulong),  typeof(ulong) }),
        ("Max",   new Type[] { typeof(float),  typeof(float) }),
        ("Max",   new Type[] { typeof(double), typeof(double) }),

        ("Clamp", new Type[] { typeof(sbyte),  typeof(sbyte),  typeof(sbyte) }),
        ("Clamp", new Type[] { typeof(byte),   typeof(byte),   typeof(byte) }),
        ("Clamp", new Type[] { typeof(short),  typeof(short),  typeof(short) }),
        ("Clamp", new Type[] { typeof(ushort), typeof(ushort), typeof(ushort) }),
        ("Clamp", new Type[] { typeof(int),    typeof(int),    typeof(int) }),
        ("Clamp", new Type[] { typeof(uint),   typeof(uint),   typeof(uint) }),
        ("Clamp", new Type[] { typeof(long),   typeof(long),   typeof(long) }),
        ("Clamp", new Type[] { typeof(ulong),  typeof(ulong),  typeof(ulong) }),
        ("Clamp", new Type[] { typeof(float),  typeof(float),  typeof(float) }),
        ("Clamp", new Type[] { typeof(double), typeof(double), typeof(double) })
    };

public static readonly ValueTuple<string, Type, string, string>[] UnaryMathFunctions =
    {
        ("Floor", typeof(float), "FloorF", "Float32"),
        ("Floor", typeof(double), "FloorF", "Float64"),
        ("Ceiling", typeof(float), "CeilingF", "Float32"),
        ("Ceiling", typeof(double), "CeilingF", "Float64"),

        ("Log", typeof(float), "LogF", "Float32"),
        ("Log", typeof(double), "LogF", "Float64"),
        ("Log10", typeof(float), "Log10F", "Float32"),
        ("Log10", typeof(double), "Log10F", "Float64"),
        ("Log2", typeof(float), "Log2F", "Float32"),
        ("Log2", typeof(double), "Log2F", "Float64"),

        ("IsInfinity", typeof(float), "IsInfF", "Float32"),
        ("IsInfinity", typeof(double), "IsInfF", "Float64"),
        ("IsNaN", typeof(float), "IsNaNF", "Float32"),
        ("IsNaN", typeof(double), "IsNaNF", "Float64"),

        ("Exp", typeof(float), "ExpF", "Float32"),
        ("Exp", typeof(double), "ExpF", "Float64"),
        ("Exp2", typeof(float), "Exp2F", "Float32"),
        ("Exp2", typeof(double), "Exp2F", "Float64"),

        ("Rcp", typeof(float), "RcpF", "Float32"),
        ("Rcp", typeof(double), "RcpF", "Float64"),

        ("Sqrt", typeof(float), "SqrtF", "Float32"),
        ("Sqrt", typeof(double), "SqrtF", "Float64"),
        ("Rsqrt", typeof(float), "RsqrtF", "Float32"),
        ("Rsqrt", typeof(double), "RsqrtF", "Float64"),

        ("Sin", typeof(float), "SinF", "Float32"),
        ("Sin", typeof(double), "SinF", "Float64"),
        ("Asin", typeof(float), "AsinF", "Float32"),
        ("Asin", typeof(double), "AsinF", "Float64"),
        ("Sinh", typeof(float), "SinhF", "Float32"),
        ("Sinh", typeof(double), "SinhF", "Float64"),

        ("Cos", typeof(float), "CosF", "Float32"),
        ("Cos", typeof(double), "CosF", "Float64"),
        ("Acos", typeof(float), "AcosF", "Float32"),
        ("Acos", typeof(double), "AcosF", "Float64"),
        ("Cosh", typeof(float), "CoshF", "Float32"),
        ("Cosh", typeof(double), "CoshF", "Float64"),

        ("Tan", typeof(float), "TanF", "Float32"),
        ("Tan", typeof(double), "TanF", "Float64"),
        ("Atan", typeof(float), "AtanF", "Float32"),
        ("Atan", typeof(double), "AtanF", "Float64"),
        ("Tanh", typeof(float), "TanhF", "Float32"),
        ("Tanh", typeof(double), "TanhF", "Float64")
    };

public static readonly ValueTuple<string, Type, string, string>[] BinaryMathFunctions =
    {
        ("Rem", typeof(float), "Rem", "Float32"),
        ("Rem", typeof(double), "Rem", "Float64"),

        ("Pow", typeof(float), "PowF", "Float32"),
        ("Pow", typeof(double), "PowF", "Float64"),

        ("Atan2", typeof(float), "Atan2F", "Float32"),
        ("Atan2", typeof(double), "Atan2F", "Float64"),

        ("Log", typeof(float), "BinaryLogF", "Float32"),
        ("Log", typeof(double), "BinaryLogF", "Float64")
    };

// Group functions

public static readonly string[] GroupFunctions =
    {
        "Reduce",
        "AllReduce",

        "ExclusiveScan",
        "InclusiveScan",

        "ExclusiveScanWithBoundaries",
        "InclusiveScanWithBoundaries",

        "ExclusiveScanNextIteration",
        "InclusiveScanNextIteration",
    };

// Warp functions

public static readonly string[] WarpFunctions =
    {
        "Reduce",
        "AllReduce",

        "ExclusiveScan",
        "InclusiveScan"
    };
#>