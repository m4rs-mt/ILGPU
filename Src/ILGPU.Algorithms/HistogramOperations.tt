// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: HistogramOperations.tt/HistogramOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="TypeInformation.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

<#
var incrementTypes = AtomicNumericTypes;
#>
namespace ILGPU.Algorithms.HistogramOperations
{
<# foreach (var type in incrementTypes) { #>
    /// <summary>
    /// Represents atomically incrementing a histogram bin of type <#= type.Type #>.
    /// </summary>
<# if (!type.IsCLSCompliant) { #>
    [CLSCompliant(false)]
<# } #>
    public readonly struct HistogramIncrement<#= type.Name #> :
        IIncrementOperation<<#= type.Type #>>
    {
        /// <summary>
        /// Atomically increments a histogram bin of type <#= type.Type #>.
        /// </summary>
        public void Increment(ref <#= type.Type #> target, out bool incrementOverflow)
        {
            var oldValue = Atomic.Add(ref target, 1);
            incrementOverflow = oldValue == <#= type.Type #>.MaxValue;
        }
    }

<# } #>
}