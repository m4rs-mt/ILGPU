// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: UniqueLaunchers.tt/UniqueLaunchers.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="TypeInformation.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using ILGPU.Algorithms.ComparisonOperations;
using ILGPU.Runtime;
using System;

<#
var comparisonTypes = NumericTypes;
#>
namespace ILGPU.Algorithms
{
    /// <summary>
    /// Contains extension methods for unique operations.
    /// </summary>
    partial class UniqueExtensions
    {
<# foreach (var type in comparisonTypes) { #>
        /// <summary>
        /// Removes consecutive duplicate elements in a supplied input view.
        /// </summary>
        /// <param name="accelerator">The accelerator.</param>
        /// <param name="stream">The accelerator stream.</param>
        /// <param name="input">The input view.</param>
        /// <returns>The new/valid length of the input view.</returns>
<# if (!type.IsCLSCompliant) { #>
        [CLSCompliant(false)]
<# } #>
        public static long Unique(
            this Accelerator accelerator,
            AcceleratorStream stream,
            ArrayView<<#= type.Type #>> input) =>
            accelerator.Unique<
                <#= type.Type #>,
                Comparison<#= type.Name #>>(
                    stream,
                    input);

<# } #>
    }
}