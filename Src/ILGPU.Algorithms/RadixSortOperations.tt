// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2019-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: RadixSortOperations.tt/RadixSortOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="TypeInformation.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.CompilerServices;

#pragma warning disable IDE0004 // Cast is redundant

namespace ILGPU.Algorithms.RadixSortOperations
{
<#  foreach (var type in NumericTypes) { #>
    /// <summary>
    /// Represents an ascending radix sort operation of type <#= type.Type #>.
    /// </summary>
<#      if (!type.IsCLSCompliant) { #>
    [CLSCompliant(false)]
<#      } #>
    public readonly struct Ascending<#=type.Name #> :
        IRadixSortOperation<<#= type.Type #>>
    {
        /// <summary>
        /// Returns the number of bits to sort.
        /// </summary>
        public int NumBits => <#= type.SizeOfType #> * 8;

        /// <summary>
        /// The default element value.
        /// </summary>
        public <#= type.Type #> DefaultValue => <#= type.DefaultValue #>;

        /// <summary>
        /// Converts the given value to a radix-sort compatible value.
        /// </summary>
        /// <param name="value">The value to map.</param>
        /// <param name="shift">The shift amount in bits.</param>
        /// <param name="bitMask">The lower bit mask bit use.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int ExtractRadixBits(<#= type.Type #> value, int shift, int bitMask)
        {
<# if (type.IsSignedInt) { #>
            // Negative integers are stored using two's complement, so they are already in
            // the correct order (within negative numbers). However, the sign-bit causes
            // negative integers to be incorrected sorted after positive numbers. So, we
            // flip the sign-bit, causing negative numbers to be ordered before positive
            // numbers.
<# } else if (type.IsFloat) { #>
            // Floating point numbers have a sign-bit, causing negative integers to be
            // incorrected sorted after positive numbers. So, we flip the sign-bit,
            // causing negative numbers to be ordered before positive numbers.
            //
            // In addition, the exponent and mantissa are always stored as positive
            // numbers, incorrectly causing larger negative numbers to be ordered after
            // smaller negative numbers. So, if the number is negative, we apply a one's
            // complement to the exponent and mantissa (flip the bits), causing larger
            // negative numbers to be ordered before smaller negative numbers.
            //
            // In order to flip the exponent and mantissa only for negative numbers, we
            // build as mask by right-shifting the sign-bit all the way to the end. If the
            // sign-bit was set, it will be extended to fill all the bits. If the sign-bit
            // was not set, it will be zero all the way. Finally, we OR this with the
            // sign-bit flipping because we still want negative numbers before positive
            // numbers.
<# } #>

<# if (type.IsSignedInt && type.Name == "Int64") { #>
            var bits = value ^ (1L << (NumBits - 1));
<# } else if (type.IsSignedInt) { #>
            var bits = value ^ (1 << (NumBits - 1));
<# } else if (type.IsFloat && type.Name == "Half") { #>
            var signMask = 1U << (NumBits - 1);
            var onesComplementMask =
                ((uint)~(Interop.FloatAsInt(value)) >> (NumBits - 1));
            var bits = Interop.FloatAsInt(value) ^ (signMask | onesComplementMask);
<# } else if (type.IsFloat) { #>
            var signMask = 1<#= type.Name == "Double" ? "UL" : "U" #> << (NumBits - 1);
            var onesComplementMask = (~(Interop.FloatAsInt(value)) >> (NumBits - 1));
            var bits = Interop.FloatAsInt(value) ^ (signMask | onesComplementMask);
<# } else { #>
            var bits = value;
<# } #>
            return (int)(bits >> shift) & bitMask;
        }
    }

    /// <summary>
    /// Represents a descending radix sort operation of type <#= type.Type #>.
    /// </summary>
<#      if (!type.IsCLSCompliant) { #>
    [CLSCompliant(false)]
<#      } #>
    public readonly struct Descending<#= type.Name #> :
        IRadixSortOperation<<#= type.Type #>>
    {
        /// <summary>
        /// Returns the number of bits to sort.
        /// </summary>
        public int NumBits => <#= type.SizeOfType #> * 8;

        /// <summary>
        /// The default element value.
        /// </summary>
        public <#= type.Type #> DefaultValue => <#= type.DefaultValue #>;

        /// <summary>
        /// Converts the given value to a radix-sort compatible value.
        /// </summary>
        /// <param name="value">The value to map.</param>
        /// <param name="shift">The shift amount in bits.</param>
        /// <param name="bitMask">The lower bit mask bit use.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int ExtractRadixBits(<#= type.Type #> value, int shift, int bitMask)
        {
            Ascending<#= type.Name #> operation = default;
            return (~operation.ExtractRadixBits(value, shift, bitMask)) & bitMask;
        }
    }

<#  } #>
}

#pragma warning restore IDE0004