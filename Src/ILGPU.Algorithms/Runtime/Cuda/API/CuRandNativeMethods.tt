// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                        Copyright (c) 2020-2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CuRandNativeMethods.tt/CuRandNativeMethods.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var apis = new (string, string, string, string)[]
{
    ("CuRand_WindowsAPI_V9",  "curand64_9",         "Windows", "V9"),
    ("CuRand_LinuxAPI_V9",    "libcurand.so.9",     "Linux",   "V9"),
    ("CuRand_MacOSAPI_V9",    "libcurand.9.dylib",  "OSX",     "V9"),

    ("CuRand_WindowsAPI_V10", "curand64_10",        "Windows", "V10"),
    ("CuRand_LinuxAPI_V10",   "libcurand.so.10",    "Linux",   "V10"),
    ("CuRand_MacOSAPI_V10",   "libcurand.10.dylib", "OSX",     "V10"),

    ("CuRand_WindowsAPI_V11", "curand64_11",        "Windows", "V11"),
    ("CuRand_LinuxAPI_V11",   "libcurand.so.11",    "Linux",   "V11"),
    ("CuRand_MacOSAPI_V11",   "libcurand.11.dylib", "OSX",     "V11"),
};
#>

using System;
using System.Runtime.InteropServices;

// disable: max_line_length
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable CA1707 // Identifiers should not contain underscores

namespace ILGPU.Runtime.Cuda.API
{
    partial class CuRandAPI
    {
        private static CuRandAPI CreateInternal(CuRandAPIVersion version)
        {
<# foreach (var (className, _, platform, version) in apis) { #>
            if (RuntimeInformation.IsOSPlatform(OSPlatform.<#= platform #>) &&
                version == CuRandAPIVersion.<#= version #>)
            {
                return new <#= className #>();
            }
<# } #>
            return null;
        }
    }

<# foreach (var (className, libName, _, _) in apis) { #>
    internal unsafe class <#= className #> : CuRandAPI
    {
        #region Constants

        /// <summary>
        /// Represents the cuBlas library name.
        /// </summary>
        public const string LibName = "<#= libName #>";

        #endregion

        #region Imports

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandCreateGenerator(
            out IntPtr generator,
            CuRandRngType rngType);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandCreateGeneratorHost(
            out IntPtr generator,
            CuRandRngType rngType);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandDestroyGenerator(IntPtr generator);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGetVersion(out int version);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandSetStream(
            IntPtr generator,
            IntPtr stream);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandSetPseudoRandomGeneratorSeed(
            IntPtr generator,
            long seed);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateSeeds(IntPtr generator);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerate(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateLongLong(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateUniform(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateUniformDouble(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateNormal(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length,
            float mean,
            float stddev);

        [DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
        [DllImport(LibName)]
        internal static extern CuRandStatus curandGenerateNormalDouble(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length,
            double mean,
            double stddev);

        #endregion

        #region Methods

        public override CuRandStatus CreateGenerator(
            out IntPtr generator,
            CuRandRngType rngType) =>
            curandCreateGenerator(out generator, rngType);

        public override CuRandStatus CreateGeneratorHost(
            out IntPtr generator,
            CuRandRngType rngType) =>
            curandCreateGeneratorHost(out generator, rngType);

        public override CuRandStatus DestoryGenerator(IntPtr generator) =>
            curandDestroyGenerator(generator);

        public override CuRandStatus GetVersion(out int version) =>
            curandGetVersion(out version);

        public override CuRandStatus SetStream(
            IntPtr generator,
            IntPtr stream) =>
            curandSetStream(generator, stream);

        public override CuRandStatus SetSeed(
            IntPtr generator,
            long seed) =>
            curandSetPseudoRandomGeneratorSeed(generator, seed);

        public override CuRandStatus GenerateSeeds(IntPtr generator) =>
            curandGenerateSeeds(generator);

        public override CuRandStatus GenerateUInt(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length) =>
            curandGenerate(generator, outputPtr, length);

        public override CuRandStatus GenerateULong(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length) =>
            curandGenerateLongLong(generator, outputPtr, length);

        public override CuRandStatus GenerateUniformFloat(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length) =>
            curandGenerateUniform(generator, outputPtr, length);

        public override CuRandStatus GenerateUniformDouble(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length) =>
            curandGenerateUniformDouble(generator, outputPtr, length);

        public override CuRandStatus GenerateNormalFloat(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length,
            float mean,
            float stddev) =>
            curandGenerateNormal(
                generator,
                outputPtr,
                length,
                mean,
                stddev);

        public override CuRandStatus GenerateNormalDouble(
            IntPtr generator,
            IntPtr outputPtr,
            IntPtr length,
            double mean,
            double stddev) =>
            curandGenerateNormalDouble(
                generator,
                outputPtr,
                length,
                mean, stddev);

        #endregion
    }

<# } #>
}

#pragma warning restore CA1707 // Identifiers should not contain underscores
#pragma warning restore IDE1006 // Naming Styles