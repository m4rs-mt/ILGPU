// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CuFFTWAPI.Generated.tt/CuFFTWAPI.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="CuFFTW.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using ILGPU.Util;
using System;
using System.Numerics;

namespace ILGPU.Runtime.Cuda.API
{
    partial class CuFFTWAPI
    {
        #region Basic Interface - Complex to Complex

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a 1D complex to complex plan.
        /// </summary>
        /// <param name="nx">The transform size.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_1d(
            int nx,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_1d(
                    nx,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 2D complex to complex plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_2d(
            int nx,
            int ny,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_2d(
                    nx,
                    ny,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 3D complex to complex plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="nz">The transform size in the z dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_3d(
            int nx,
            int ny,
            int nz,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_3d(
                    nx,
                    ny,
                    nz,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom complex to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft(
            int rank,
            ReadOnlySpan<int> n,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft(
                    rank,
                    n_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Basic Interface - Real to Complex

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a 1D real to complex plan.
        /// </summary>
        /// <param name="nx">The transform size.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_r2c_1d(
            int nx,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_r2c_1d(
                    nx,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 2D real to complex plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_r2c_2d(
            int nx,
            int ny,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_r2c_2d(
                    nx,
                    ny,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 3D real to complex plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="nz">The transform size in the z dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_r2c_3d(
            int nx,
            int ny,
            int nz,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_r2c_3d(
                    nx,
                    ny,
                    nz,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom real to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_r2c(
            int rank,
            ReadOnlySpan<int> n,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_r2c(
                    rank,
                    n_ptr,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Basic Interface - Complex to Real

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a 1D complex to real plan.
        /// </summary>
        /// <param name="nx">The transform size.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_c2r_1d(
            int nx,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_c2r_1d(
                    nx,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 2D complex to real plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_c2r_2d(
            int nx,
            int ny,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_c2r_2d(
                    nx,
                    ny,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a 3D complex to real plan.
        /// </summary>
        /// <param name="nx">The transform size in the x dimension.</param>
        /// <param name="ny">The transform size in the y dimension.</param>
        /// <param name="nz">The transform size in the z dimension.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_c2r_3d(
            int nx,
            int ny,
            int nz,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_c2r_3d(
                    nx,
                    ny,
                    nz,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom complex to real plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_dft_c2r(
            int rank,
            ReadOnlySpan<int> n,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_dft_c2r(
                    rank,
                    n_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Advanced Interface

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a custom complex to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="batch">The number of transforms.</param>
        /// <param name="in">The input array.</param>
        /// <param name="inembed">The storage dimensions of the input data.</param>
        /// <param name="istride">The stride of the input data.</param>
        /// <param name="idist">The distance of the input data.</param>
        /// <param name="out">The output array.</param>
        /// <param name="onembed">The storage dimensions of the output data.</param>
        /// <param name="ostride">The stride of the output data.</param>
        /// <param name="odist">The distance of the output data.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_many_dft(
            int rank,
            ReadOnlySpan<int> n,
            int batch,
            Span<<#= type.ComplexType #>> @in,
            ReadOnlySpan<int> inembed,
            int istride,
            int idist,
            Span<<#= type.ComplexType #>> @out,
            ReadOnlySpan<int> onembed,
            int ostride,
            int odist,
            int sign,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (int* inembed_ptr = inembed)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            fixed (int* onembed_ptr = onembed)
            {
                var plan = <#= type.Prefix #>_plan_many_dft(
                    rank,
                    n_ptr,
                    batch,
                    (<#= type.RealType #>*)in_ptr,
                    inembed_ptr,
                    istride,
                    idist,
                    (<#= type.RealType #>*)out_ptr,
                    onembed_ptr,
                    ostride,
                    odist,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom real to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="batch">The number of transforms.</param>
        /// <param name="in">The input array.</param>
        /// <param name="inembed">The storage dimensions of the input data.</param>
        /// <param name="istride">The stride of the input data.</param>
        /// <param name="idist">The distance of the input data.</param>
        /// <param name="out">The output array.</param>
        /// <param name="onembed">The storage dimensions of the output data.</param>
        /// <param name="ostride">The stride of the output data.</param>
        /// <param name="odist">The distance of the output data.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_many_dft_r2c(
            int rank,
            ReadOnlySpan<int> n,
            int batch,
            Span<<#= type.RealType #>> @in,
            ReadOnlySpan<int> inembed,
            int istride,
            int idist,
            Span<<#= type.ComplexType #>> @out,
            ReadOnlySpan<int> onembed,
            int ostride,
            int odist,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (int* inembed_ptr = inembed)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            fixed (int* onembed_ptr = onembed)
            {
                var plan = <#= type.Prefix #>_plan_many_dft_r2c(
                    rank,
                    n_ptr,
                    batch,
                    in_ptr,
                    inembed_ptr,
                    istride,
                    idist,
                    (<#= type.RealType #>*)out_ptr,
                    onembed_ptr,
                    ostride,
                    odist,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom complex to real plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="n">The transform dimensions.</param>
        /// <param name="batch">The number of transforms.</param>
        /// <param name="in">The input array.</param>
        /// <param name="inembed">The storage dimensions of the input data.</param>
        /// <param name="istride">The stride of the input data.</param>
        /// <param name="idist">The distance of the input data.</param>
        /// <param name="out">The output array.</param>
        /// <param name="onembed">The storage dimensions of the output data.</param>
        /// <param name="ostride">The stride of the output data.</param>
        /// <param name="odist">The distance of the output data.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_many_dft_c2r(
            int rank,
            ReadOnlySpan<int> n,
            int batch,
            Span<<#= type.ComplexType #>> @in,
            ReadOnlySpan<int> inembed,
            int istride,
            int idist,
            Span<<#= type.RealType #>> @out,
            ReadOnlySpan<int> onembed,
            int ostride,
            int odist,
            uint flags)
        {
            fixed (int* n_ptr = n)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (int* inembed_ptr = inembed)
            fixed (<#= type.RealType #>* out_ptr = @out)
            fixed (int* onembed_ptr = onembed)
            {
                var plan = <#= type.Prefix #>_plan_many_dft_c2r(
                    rank,
                    n_ptr,
                    batch,
                    (<#= type.RealType #>*)in_ptr,
                    inembed_ptr,
                    istride,
                    idist,
                    out_ptr,
                    onembed_ptr,
                    ostride,
                    odist,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Guru Interface

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a custom complex to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru_dft(
            int rank,
            ReadOnlySpan<iodim> dims,
            int batch_rank,
            ReadOnlySpan<iodim> batch_dims,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (iodim* dims_ptr = dims)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (iodim* batch_dims_ptr = batch_dims)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru_dft(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom real to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru_dft_r2c(
            int rank,
            ReadOnlySpan<iodim> dims,
            int batch_rank,
            ReadOnlySpan<iodim> batch_dims,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (iodim* dims_ptr = dims)
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (iodim* batch_dims_ptr = batch_dims)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru_dft_r2c(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom complex to real plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru_dft_c2r(
            int rank,
            ReadOnlySpan<iodim> dims,
            int batch_rank,
            ReadOnlySpan<iodim> batch_dims,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (iodim* dims_ptr = dims)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (iodim* batch_dims_ptr = batch_dims)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru_dft_c2r(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Guru 64-bit Interface

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Creates a custom complex to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="sign">The sign of the exponent in the formula.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru64_dft(
            int rank,
            ReadOnlySpan<iodim64> dims,
            int batch_rank,
            ReadOnlySpan<iodim64> batch_dims,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            int sign,
            uint flags)
        {
            fixed (iodim64* dims_ptr = dims)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (iodim64* batch_dims_ptr = batch_dims)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru64_dft(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    sign,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom real to complex plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru64_dft_r2c(
            int rank,
            ReadOnlySpan<iodim64> dims,
            int batch_rank,
            ReadOnlySpan<iodim64> batch_dims,
            Span<<#= type.RealType #>> @in,
            Span<<#= type.ComplexType #>> @out,
            uint flags)
        {
            fixed (iodim64* dims_ptr = dims)
            fixed (<#= type.RealType #>* in_ptr = @in)
            fixed (iodim64* batch_dims_ptr = batch_dims)
            fixed (<#= type.ComplexType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru64_dft_r2c(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    in_ptr,
                    (<#= type.RealType #>*)out_ptr,
                    flags);
                return plan;
            }
        }

        /// <summary>
        /// Creates a custom complex to real plan.
        /// </summary>
        /// <param name="rank">The transform rank.</param>
        /// <param name="dims">The transform dimensions.</param>
        /// <param name="batch_rank">The batch rank.</param>
        /// <param name="batch_dims">The batch dimensions.</param>
        /// <param name="in">The input array.</param>
        /// <param name="out">The output array.</param>
        /// <param name="flags">The planner flags.</param>
        /// <returns>The created plan.</returns>
        public unsafe IntPtr <#= type.Prefix #>_plan_guru64_dft_c2r(
            int rank,
            ReadOnlySpan<iodim64> dims,
            int batch_rank,
            ReadOnlySpan<iodim64> batch_dims,
            Span<<#= type.ComplexType #>> @in,
            Span<<#= type.RealType #>> @out,
            uint flags)
        {
            fixed (iodim64* dims_ptr = dims)
            fixed (<#= type.ComplexType #>* in_ptr = @in)
            fixed (iodim64* batch_dims_ptr = batch_dims)
            fixed (<#= type.RealType #>* out_ptr = @out)
            {
                var plan = <#= type.Prefix #>_plan_guru64_dft_c2r(
                    rank,
                    dims_ptr,
                    batch_rank,
                    batch_dims_ptr,
                    (<#= type.RealType #>*)in_ptr,
                    out_ptr,
                    flags);
                return plan;
            }
        }

<# } #>
        #endregion

        #region Plan Execution

<# foreach (var type in FloatTypes) { #>
        /// <summary>
        /// Executes the plan on different arrays (complex to complex).
        /// </summary>
        /// <param name="plan">The plan handle.</param>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public unsafe void <#= type.Prefix #>_execute_dft(
            IntPtr plan,
            Span<<#= type.ComplexType #>> idata,
            Span<<#= type.ComplexType #>> odata)
        {
            fixed (<#= type.ComplexType #>* idataPtr = idata)
            fixed (<#= type.ComplexType #>* odataPtr = odata)
            {
                <#= type.Prefix #>_execute_dft(
                    plan,
                    (<#= type.RealType #>*)idataPtr,
                    (<#= type.RealType #>*)odataPtr);
            }
        }

        /// <summary>
        /// Executes the plan on different arrays (real to complex).
        /// </summary>
        /// <param name="plan">The plan handle.</param>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public unsafe void <#= type.Prefix #>_execute_dft_r2c(
            IntPtr plan,
            Span<<#= type.RealType #>> idata,
            Span<<#= type.ComplexType #>> odata)
        {
            fixed (<#= type.RealType #>* idataPtr = idata)
            fixed (<#= type.ComplexType #>* odataPtr = odata)
            {
                <#= type.Prefix #>_execute_dft_r2c(
                    plan,
                    idataPtr,
                    (<#= type.RealType #>*)odataPtr);
            }
        }

        /// <summary>
        /// Executes the plan on different arrays (complex to real).
        /// </summary>
        /// <param name="plan">The plan handle.</param>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public unsafe void <#= type.Prefix #>_execute_dft_c2r(
            IntPtr plan,
            Span<<#= type.ComplexType #>> idata,
            Span<<#= type.RealType #>> odata)
        {
            fixed (<#= type.ComplexType #>* idataPtr = idata)
            fixed (<#= type.RealType #>* odataPtr = odata)
            {
                <#= type.Prefix #>_execute_dft_c2r(
                    plan,
                    (<#= type.RealType #>*)idataPtr,
                    odataPtr);
            }
        }

<# } #>
        #endregion
    }
}