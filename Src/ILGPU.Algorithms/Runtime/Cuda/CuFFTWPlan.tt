// ---------------------------------------------------------------------------------------
//                                   ILGPU Algorithms
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CuFFTWPlan.tt/CuFFTWPlan.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="./API/CuFFTW.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using ILGPU.Runtime.Cuda.API;
using ILGPU.Util;
using System;
using System.Numerics;

#pragma warning disable CA1707 // Identifiers should not contain underscores

namespace ILGPU.Runtime.Cuda
{
<#
    foreach (var typeGroup in FloatTypes.GroupBy(x => x.RealType)) {
        var realType = typeGroup.Key;
        var prefix = typeGroup.First().Prefix;
        var suffix = typeGroup.First().Suffix;
#>
    /// <summary>
    /// Represents a cuFFTW plan for "<#= realType #>" type.
    /// </summary>
    [CLSCompliant(false)]
    public sealed class CuFFTWPlan<#= suffix #> : DisposeBase
    {
        /// <summary>
        /// Constructs a new instance to wrap a cuFFT plan.
        /// </summary>
        internal CuFFTWPlan<#= suffix #>(CuFFTWAPI api, IntPtr plan)
        {
            API = api;
            PlanHandle = plan;
        }

        /// <inheritdoc />
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                API.<#= prefix #>_destroy_plan(PlanHandle);
                PlanHandle = IntPtr.Zero;
            }
            base.Dispose(disposing);
        }
        
        /// <summary>
        /// The underlying API wrapper.
        /// </summary>
        public CuFFTWAPI API { get; }

        /// <summary>
        /// The native plan handle.
        /// </summary>
        public IntPtr PlanHandle { get; private set; }

        /// <summary>
        /// Executes the plan.
        /// </summary>
        public void Execute() =>
            API.<#= prefix #>_execute(PlanHandle);

<#      foreach (var type in typeGroup) { #>
        /// <summary>
        /// Executes the plan on different arrays (complex to complex).
        /// </summary>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public void Execute(
            Span<<#= type.ComplexType #>> idata,
            Span<<#= type.ComplexType #>> odata) =>
            API.<#= prefix #>_execute_dft(PlanHandle, idata, odata);

        /// <summary>
        /// Executes the plan on different arrays (real to complex).
        /// </summary>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public void Execute_R2C(
            Span<<#= type.RealType #>> idata,
            Span<<#= type.ComplexType #>> odata) =>
            API.<#= type.Prefix #>_execute_dft_r2c(PlanHandle, idata, odata);

        /// <summary>
        /// Executes the plan on different arrays (complex to real).
        /// </summary>
        /// <param name="idata">The input array.</param>
        /// <param name="odata">The output array.</param>
        public void Execute_C2R(
            Span<<#= type.ComplexType #>> idata,
            Span<<#= type.RealType #>> odata) =>
            API.<#= prefix #>_execute_dft_c2r(PlanHandle, idata, odata);

<# } #>
    }

<# } #>
}

#pragma warning restore CA1707 // Identifiers should not contain underscores