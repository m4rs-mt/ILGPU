// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: SpecializedKernels.Generated.tt/SpecializedKernels.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    var MaxParams = 14;
#>
using ILGPU.Runtime;
using Xunit;

namespace ILGPU.Tests
{
    // Ensure that we support loading kernels with a large number of
    // SpecializedValue generic arguments.
    //
    // Action<> supports up to 16 generic arguments. ILGPU uses one argument for
    // AcceleratorStream, and one argument for Index. That leaves up to 14 arguments
    // that can use SpecializedValue.
    partial class SpecializedKernels
    {
<#
    foreach (var numParams in Enumerable.Range(1, MaxParams)) {
        var kernelName = $"SpecializedGenericArgument{numParams}Kernel";
        var testName = $"SpecializedGenericArgument{numParams}";
#>
        internal static void <#= kernelName #>(
            Index1D _index
<#      for (var i = 1; i <= numParams; i++) { #>
            , SpecializedValue<int> _<#= i #>
<#      } #>
            )
        { }

        [Fact]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>()
        {
            var kernel = Accelerator.LoadAutoGroupedKernel<
                Index1D
<#      for (var i = 1; i <= numParams; i++) { #>
                , SpecializedValue<int>
<#      } #>
                >(<#= kernelName #>);
            kernel(
                Accelerator.DefaultStream
                , Index1D.One
<#      for (var i = 1; i <= numParams; i++) { #>
                , new SpecializedValue<int>(<#= i #>)
<#      } #>
                );
        }

<#  } #>
    }
}