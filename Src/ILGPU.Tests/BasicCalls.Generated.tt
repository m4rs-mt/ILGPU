// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: BasicCalls.Generated.tt/BasicCalls.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<# var smallIntTypes =
    // sbyte and short
    SignedIntTypes.Take(2).Concat(
    // byte and ushort
    UnsignedIntTypes.Take(2)).ToArray(); #>
using ILGPU.Runtime;
using System.Linq;
using Xunit;

namespace ILGPU.Tests
{
    partial class BasicCalls
    {
        private static T GetCallValue<T, TStructure>(TStructure value)
            where T : struct
            where TStructure : struct, IValueStructure<T> =>
            value.NestedValue;

<# foreach (var type in smallIntTypes) { #>
<#      var structName = $"TestStruct<{type.Type}>"; #>
        internal static void CallReturn<#= type.Name #>Kernel(
            Index1D index,
            ArrayView1D<<#= structName #>, Stride1D.Dense> source,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> target1,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> target2)
        {
            float val1 = source[index].Val1;
            target1[index] = (<#= type.Type #>)val1;

            float val2 = GetCallValue<
                <#= type.Type #>,
                TestStruct<<#= type.Type #>>>(source[index]);
            target2[index] = (<#= type.Type #>)val2;
        }

        [Theory]
<#      if (type.Kind == TypeInformationKind.SignedInt) { #>
        [InlineData(0)]
<#      } #>
        [InlineData(<#= type.Type #>.MinValue)]
        [InlineData(<#= type.Type #>.MaxValue)]
        [KernelMethod(nameof(CallReturn<#= type.Name #>Kernel))]
        public void CallReturn<#= type.Name #>(<#= type.Type #> value)
        {
            var dataStruct = new <#= structName #>()
            {
                Val0 = byte.MaxValue,
                Val1 = value,
                Val2 = short.MaxValue,
            };

            using var source = Accelerator.Allocate1D<<#= structName #>>(
                Enumerable.Repeat(dataStruct, Length).ToArray());
            using var target1 = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var target2 = Accelerator.Allocate1D<<#= type.Type #>>(Length);

            Execute(source.Length, source.View, target1.View, target2.View);

            var expected = Enumerable.Repeat(dataStruct.Val1, Length).ToArray();
            Verify(target1.View, expected);
            Verify(target2.View, expected);
        }

<# } #>
    }
}