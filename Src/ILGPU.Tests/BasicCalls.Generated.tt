<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<# var smallIntTypes =
    // sbyte and short
    SignedIntTypes.Take(2).Concat(
    // byte and ushort
    UnsignedIntTypes.Take(2)).ToArray(); #>
using ILGPU.Runtime;
using System.Linq;
using Xunit;

namespace ILGPU.Tests
{
    partial class BasicCalls
    {
        private static T GetCallValue<T, TStructure>(TStructure value)
            where T : struct
            where TStructure : struct, IValueStructure<T> =>
            value.NestedValue;

<# foreach (var type in smallIntTypes) { #>
<#      var structName = $"TestStruct<{type.Type}>"; #>
        internal static void CallReturn<#= type.Name #>Kernel(
            Index1 index,
            ArrayView<<#= structName #>> source,
            ArrayView<<#= type.Type #>> target1,
            ArrayView<<#= type.Type #>> target2)
        {
            float val1 = source[index].Val1;
            target1[index] = (<#= type.Type #>)val1;

            float val2 = GetCallValue<
                <#= type.Type #>,
                TestStruct<<#= type.Type #>>>(source[index]);
            target2[index] = (<#= type.Type #>)val2;
        }

        [Theory]
<#      if (type.Kind == TypeInformationKind.SignedInt) { #>
        [InlineData(0)]
<#      } #>
        [InlineData(<#= type.Type #>.MinValue)]
        [InlineData(<#= type.Type #>.MaxValue)]
        [KernelMethod(nameof(CallReturn<#= type.Name #>Kernel))]
        public void CallReturn<#= type.Name #>(<#= type.Type #> value)
        {
            var dataStruct = new <#= structName #>()
            {
                Val0 = byte.MaxValue,
                Val1 = value,
                Val2 = short.MaxValue,
            };

            using var source = Accelerator.Allocate<<#= structName #>>(
                Enumerable.Repeat(dataStruct, Length).ToArray());
            using var target1 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var target2 = Accelerator.Allocate<<#= type.Type #>>(Length);

            Execute(source.Length, source.View, target1.View, target2.View);

            var expected = Enumerable.Repeat(dataStruct.Val1, Length).ToArray();
            Verify(target1, expected);
            Verify(target2, expected);
        }

<# } #>
    }
}
