<#@ assembly name="System.Core" #>
<#@ include file="../../ILGPU/Static/TypeInformation.ttinclude" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#+
public static IEnumerable<string> GetFloatRanges(
    TypeInformation type,
    bool maxRanges,
    bool useZero = true,
    bool useInfinity = true,
    bool useMultiplesOfPi = true,
    bool useNaN = true)
{
    var isFloat = type == FloatTypes[1];
    var pi = isFloat ? "(float)Math.PI" : "Math.PI";
    IEnumerable<string> result = new string[]
        {
            type.FormatNumber("-1.0"),
            type.FormatNumber("1.0"),
            type.Prefix + pi,
            type.Prefix + "(-" + pi + ")",
        };
    if (useZero)
    {
        result = new string[]
            {
                type.FormatNumber("0.0"),
            }.Concat(result);
    }
    if (useInfinity)
    {
        result = result.Concat(new string[]
            {
                type.Type + ".PositiveInfinity",
                type.Type + ".NegativeInfinity",
            });
    }
    if (maxRanges)
    {
        result = result.Concat(new string[]
            {
                type.Type + ".MaxValue",
                type.Type + ".MinValue",
                type.Type + ".Epsilon",
            });
    }
    if (useMultiplesOfPi)
    {
        result = result.Concat(new string[]
            {
                "(" + type.Type + ")(" + type.FormatNumber("2.0") + " * " + pi + ")",
                "(" + type.Type + ")(" + type.FormatNumber("-2.0") + " * " + pi + ")",
                "(" + type.Type + ")(" + type.FormatNumber("0.5") + " * " + pi + ")",
                "(" + type.Type + ")(" + type.FormatNumber("-0.5") + " * " + pi + ")",
            });
    }
    if (useNaN)
    {
        result = result.Concat(new string[]
        {
            type.Type + ".NaN"
        });
    }
    return result;
}

public sealed class TestConfig
{
    public static readonly string TestParallelizationEnvironmentVariable =
        "ILGPU_TEST_PARALLELIZATION_LEVEL";

    private const int DefaultParallelizationLevel = 4;

    public static Lazy<int> ParallelizationLevel =>
        new Lazy<int>(() =>
        {
            var levelString = Environment.GetEnvironmentVariable(
                TestParallelizationEnvironmentVariable);
            int result = DefaultParallelizationLevel;
            if (int.TryParse(levelString, out int level))
                result =Math.Max(result, level);
            return result;
        });

    public static readonly string[] OptimizationLevels =
    {
        "Debug",
        "Release",
        "O2"
    };

    private static string GetLevelConfig(string level, int index) =>
        index > 0 ? $"{level}_{index + 1}" : level;

    public static IEnumerable<(string, string)> AllConfigurations =>
        Enumerable
            .Range(0, ParallelizationLevel.Value)
            .SelectMany(t =>
                OptimizationLevels.Select(level =>
                    (GetLevelConfig(level, t), level)));

    public static TestConfig Parse(string fileName) =>
        Parse(System.IO.File.ReadAllLines(fileName));

    public static TestConfig Parse(string[] lines)
    {
        var results = new List<string>(lines.Length);
        for (int i = 0, e = lines.Length; i < e; ++i)
        {
            var line = lines[i].Trim();
            if (line.StartsWith("//") || line.Length < 1)
                continue;
            results.Add(line);
        }
        return new TestConfig(results.ToArray());
    }

    private TestConfig(string[] tests)
    {
        Tests = tests;
    }

    public string[] Tests { get; }

    public IEnumerator<(string, string, string)> GetEnumerator()
    {
        // Switch between the different contexts
        var mapping = new Dictionary<string, int>();
        foreach (var level in OptimizationLevels)
            mapping.Add(level, 0);

        foreach (var test in Tests)
        {
            foreach (var level in OptimizationLevels)
            {
                int levelIndex = mapping[level];
                yield return (test, level, GetLevelConfig(level, levelIndex));
                mapping[level] = (levelIndex + 1) % ParallelizationLevel.Value;
            }
        }
        yield break;
    }
}
#>