// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ValueTuples.tt/ValueTuples.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;
<#
    // Pick one representative for each 8/16/34/64-bit type.
    // This reduces our permutations, since Float64 will behave the same as Int64.
    var types = NumericTypes.Where(x => x.Name == "UInt8")
        .Concat(NumericTypes.Where(x => x.Name == "Int16"))
        .Concat(NumericTypes.Where(x => x.Name == "Int32"))
        .Concat(NumericTypes.Where(x => x.Name == "Int64"))
        .ToArray();

    var permutations =
        Enumerable.Range(1, types.Length)
        .SelectMany(length => GetPermutations(types, length))
        .ToArray();
#>
namespace ILGPU.Tests
{
    public abstract class ValueTuples : TestBase
    {
        protected ValueTuples(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

        public const int Length = 64;
        private static readonly Random rnd = new Random();

        private static unsafe byte GetRandomUInt8()
        {
#if NETFRAMEWORK
            byte[] bytes = new byte[1];
            rnd.NextBytes(bytes);
            return bytes[0];
#else
            Span<byte> bytes = stackalloc byte[1];
            rnd.NextBytes(bytes);
            return bytes[0];
#endif
        }

        private static unsafe short GetRandomInt16()
        {
#if NETFRAMEWORK
            byte[] bytes = new byte[2];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt16(bytes, 0);
#else
            Span<byte> bytes = stackalloc byte[2];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt16(bytes);
#endif
        }

        private static unsafe int GetRandomInt32()
        {
#if NETFRAMEWORK
            byte[] bytes = new byte[4];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt32(bytes, 0);
#else
            Span<byte> bytes = stackalloc byte[4];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt32(bytes);
#endif
        }

        private static unsafe long GetRandomInt64()
        {
#if NETFRAMEWORK
            byte[] bytes = new byte[8];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt64(bytes, 0);
#else
            Span<byte> bytes = stackalloc byte[8];
            rnd.NextBytes(bytes);
            return BitConverter.ToInt64(bytes);
#endif
        }

<#
    foreach (var permutation in permutations) {
        var permutationTypes = permutation.ToArray();
        var testTypeNames = string.Join("", permutationTypes.Select(x => x.Name));
        var testName = $"ValueTuple_{testTypeNames}";
        var kernelName = $"{testName}_Kernel";
        var permutationTypeNames =
            string.Join(", ", permutationTypes.Select(x => x.Type));
        var tupleType = $"ValueTuple<{permutationTypeNames}>";
#>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= tupleType #>, Stride1D.Dense> input,
            ArrayView1D<<#= tupleType #>, Stride1D.Dense> output)
        {
<#      for (var i = 1; i <= permutationTypes.Length; i++) { #>
            output[index].Item<#= i #> = input[index].Item<#= i #>;
<#      } #>
        }

        [Fact]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>()
        {
<#
        var rndParams =
            string.Join(", ", permutationTypes.Select(p => $"GetRandom{p.Name}()"));
#>
            var expected =
                Enumerable.Range(1, Length)
                .Select(n => new <#= tupleType #>(<#= rndParams #>))
                .ToArray();
            using var input = Accelerator.Allocate1D(expected);
            using var output = Accelerator.Allocate1D<<#= tupleType #>>(Length);
            output.MemSetToZero();
            Execute(Length, input.View, output.View);
            Verify(output.View, expected);
        }

<#
    }
#>
    }
}

<#+
    IEnumerable<IEnumerable<T>> GetPermutations<T>(
        IEnumerable<T> values,
        int length)
    {
        if (length == 1)
            return values.Select(x => new T[] { x });
        return GetPermutations(values, length - 1)
            .SelectMany(
                x => values, 
                (list, next) => list.Concat(new T[] { next }));
    }
#>