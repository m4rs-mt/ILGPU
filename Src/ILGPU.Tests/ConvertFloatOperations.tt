// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2021-2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: ConvertFloatOperations.tt/ConvertFloatOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var types = IntTypes.Concat(FloatTypes);
#>
namespace ILGPU.Tests
{
    public abstract class ConvertFloatOperations : TestBase
    {
        protected ConvertFloatOperations(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var type in FloatTypes) { #>
<#      foreach (var targetType in types) { #>
<#         bool isFP843 = type == FloatTypes[0] || targetType == FloatTypes[0]; #>
<#         bool isFP852 = type == FloatTypes[1] || targetType == FloatTypes[1]; #>
<#         bool isBFP16 = type == FloatTypes[2] || targetType == FloatTypes[2]; #>
<#         bool isFP16 = type == FloatTypes[3] || targetType == FloatTypes[3]; #>
<#         var baseName = "_" + type.Name + "_" + targetType.Name; #>
<#         var testName = "ConvertOperation" + baseName; #>
<#         var kernelName = "ConvertOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= targetType.Type #>, Stride1D.Dense> b)
        {
            b[index] = (<#= targetType.Type #>)a[index];
        }

<#      if (isFP16||isBFP16||isFP843||isFP852) { #>
        [SkippableTheory]
<#      } else { #>
        [Theory]
<#      } #>
        [InlineData(0.0f)]
        [InlineData(1.0f)]
        [InlineData((float)Math.PI)]
        [InlineData((float)float.Epsilon)]
        [InlineData(2.0f * (float)Math.PI)]
        [InlineData(0.5f * (float)Math.PI)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(float value)
        {
<#      if (isFP843) { #>
            Skip.If(!Accelerator.Capabilities.Float8E4M3);
<#      } #>
<#      if (isFP852) { #>
            Skip.If(!Accelerator.Capabilities.Float8E5M2);
<#      } #>
<#      if (isBFP16) { #>
            Skip.If(!Accelerator.Capabilities.BFloat16);
<#      } #>
<#      if (isFP16) { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
            var convertedValue = (<#= type.Type #>)value;
            const int Length = 32;
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var b = Accelerator.Allocate1D<<#= targetType.Type #>>(Length);
            Initialize(a.View, convertedValue);
            Execute(Length, a.View, b.View);

            var result = (<#= targetType.Type #>)convertedValue;
            var reference = Enumerable.Repeat(result, Length).ToArray();
            Verify(b.View, reference);
        }

<#      } #>
<# } #>
    }
}