<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };
#>
namespace ILGPU.Tests
{
    public abstract class CompareIntOperations : TestBase
    {
        protected CompareIntOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var type in IntTypes) { #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index1 index,
            ArrayView<<#= type.Type #>> a,
            ArrayView<<#= type.Type #>> b,
            ArrayView<int> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        [Theory]
        [InlineData(<#= type.Type #>.MaxValue, (<#= type.Type #>)1)]
        [InlineData(<#= type.Type #>.MinValue, <#= type.Type #>.MaxValue)]
        [InlineData(<#= type.Type #>.MinValue + 1, <#= type.Type #>.MaxValue)]
        [InlineData((<#= type.Type #>)0, <#= type.Type #>.MaxValue)]
        [InlineData((<#= type.Type #>)0, <#= type.Type #>.MaxValue - 1)]
        [InlineData((<#= type.Type #>)1, (<#= type.Type #>)1)]
        [InlineData((<#= type.Type #>)6, (<#= type.Type #>)2)]
        [InlineData((<#= type.Type #>)5, (<#= type.Type #>)19)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= type.Type #> left,
            <#= type.Type #> right)
        {
            const int length = 32;
            using var a = Accelerator.Allocate<<#= type.Type #>>(length);
            using var b = Accelerator.Allocate<<#= type.Type #>>(length);
            using var c = Accelerator.Allocate<int>(length);
            Initialize(a, left);
            Initialize(b, right);
            Execute(length, a.View, b.View, c.View);

            var result = left <#= infix #> right ? 1 : 0;
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(c, reference);
        }

<#      } #>
<# } #>
    }
}

#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to