// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CompareIntOperations.tt/CompareIntOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to
#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };
var testValueFormats = new (int, string, string)[]
    {
        (0, "{0}.MaxValue", "({0})1"),
        (1, "{0}.MinValue", "{0}.MaxValue"),
        (2, "{0}.MinValue + 1", "{0}.MaxValue"),
        (3, "({0})0", "{0}.MaxValue"),
        (4, "({0})0", "{0}.MaxValue - 1"),
        (5, "({0})1", "({0})1"),
        (6, "({0})6", "({0})2"),
        (7, "({0})5", "({0})19")
    };
#>
namespace ILGPU.Tests
{
    public abstract class CompareIntOperations : TestBase
    {
        private const int Length = 32;

        protected CompareIntOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var type in IntTypes) { #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> b,
            ArrayView1D<int, Stride1D.Dense> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        [Theory]
<#          foreach (var (_, lhs, rhs) in testValueFormats) { #>
        [InlineData(
            <#= string.Format(lhs, type.Type) #>,
            <#= string.Format(rhs, type.Type) #>)]
<#          } #>
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= type.Type #> left,
            <#= type.Type #> right)
        {
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var b = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var c = Accelerator.Allocate1D<int>(Length);
            Initialize(a.View, left);
            Initialize(b.View, right);
            Execute(Length, a.View, b.View, c.View);

            var result = left <#= infix #> right ? 1 : 0;
            var reference = Enumerable.Repeat(result, Length).ToArray();
            Verify(c.View, reference);
        }

        internal static void <#= kernelName #>_Const(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView2D<int, Stride2D.DenseX> b,
            ArrayView2D<int, Stride2D.DenseX> c)
        {
<#          foreach (var (index, lhs, rhs) in testValueFormats) { #>
            b[index, <#= index #>] = (<#= string.Format(lhs, type.Type) #> <#= infix #>
                a[index]) ? 1 : 0;
            c[index, <#= index #>] = (a[index] <#= infix #>
                <#= string.Format(rhs, type.Type) #>) ? 1 : 0;
<#          } #>
        }

        [Theory]
<#          foreach (var (_, lhs, rhs) in testValueFormats) { #>
        [InlineData(<#= string.Format(lhs, type.Type) #>)]
        [InlineData(<#= string.Format(rhs, type.Type) #>)]
<#          } #>
        [KernelMethod(nameof(<#= kernelName #>_Const))]
        public void <#= testName #>_Const(<#= type.Type #> value)
        {
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var b = Accelerator.Allocate2DDenseX<int>((
                Length,
                <#= testValueFormats.Length #>));
            using var c = Accelerator.Allocate2DDenseX<int>((
                Length,
                <#= testValueFormats.Length #>));
            Initialize(a.View, value);
            Execute(Length, a.View, b.View, c.View);

            // Generate reference data
            var expectedB = new int[Length, <#= testValueFormats.Length #>];
            var expectedC = new int[Length, <#= testValueFormats.Length #>];
            for (int index = 0; index < Length; ++index)
            {
<#          foreach (var (index, lhs, rhs) in testValueFormats) { #>
                expectedB[index, <#= index #>] = (<#= string.Format(lhs, type.Type) #>
                    <#= infix #> value) ? 1 : 0;
                expectedC[index, <#= index #>] = (value <#= infix #>
                    <#= string.Format(rhs, type.Type) #>) ? 1 : 0;
<#          } #>
            }

            Verify2D(b.View, expectedB);
            Verify2D(c.View, expectedC);
        }

<#      } #>
<# } #>
    }
}

#pragma warning restore CA1814 // Prefer jagged arrays over multidimensional
#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to