<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it belongs to

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };
#>
namespace ILGPU.Tests
{
    public abstract class CompareIntOperations : TestBase
    {
        public CompareIntOperations(
            ITestOutputHelper output,
            ContextProvider contextProvider)
            : base(output, contextProvider)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var (typeName, type) in IntTypes) { #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index index,
            ArrayView<<#= typeName #>> a,
            ArrayView<<#= typeName #>> b,
            ArrayView<int> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        [Theory]
        [InlineData(<#= typeName #>.MaxValue, (<#= typeName #>)1)]
        [InlineData(<#= typeName #>.MinValue, <#= typeName #>.MaxValue)]
        [InlineData(<#= typeName #>.MinValue + 1, <#= typeName #>.MaxValue)]
        [InlineData((<#= typeName #>)0, <#= typeName #>.MaxValue)]
        [InlineData((<#= typeName #>)0, <#= typeName #>.MaxValue - 1)]
        [InlineData((<#= typeName #>)1, (<#= typeName #>)1)]
        [InlineData((<#= typeName #>)6, (<#= typeName #>)2)]
        [InlineData((<#= typeName #>)5, (<#= typeName #>)19)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= typeName #> left,
            <#= typeName #> right)
        {
            const int length = 32;
            using (var a = Accelerator.Allocate<<#= typeName #>>(length))
            {
                using (var b = Accelerator.Allocate<<#= typeName #>>(length))
                {
                    using (var c = Accelerator.Allocate<int>(length))
                    {
                        Initialize(a, left);
                        Initialize(b, right);
                        Execute(length, a.View, b.View, c.View);

                        var result = left <#= infix #> right ? 1 : 0;
                        var reference = Enumerable.Repeat(result, length).ToArray();
                        Verify(c, reference);
                    }
                }
            }
        }

<#      } #>
<# } #>
    }
}

#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it belongs to