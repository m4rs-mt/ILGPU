<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };
#>
namespace ILGPU.Tests
{
    public abstract class CompareFloatOperations : TestBase
    {
        public CompareFloatOperations(
            ITestOutputHelper output,
            ContextProvider contextProvider)
            : base(output, contextProvider)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var (typeName, type, suffix) in FloatTypes) { #>
<#         var floatRanges = GetFloatRanges(typeName, suffix, true, true, true, false); #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index index,
            ArrayView<<#= typeName #>> a,
            ArrayView<<#= typeName #>> b,
            ArrayView<int> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        [Theory]
<#          foreach (var range in floatRanges) { #>
<#              foreach (var range2 in floatRanges) { #>
        [InlineData(<#= range #>, <#= range2 #>)]
<#              } #>
<#          } #>
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= typeName #> left,
            <#= typeName #> right)
        {
            const int length = 32;
            using (var a = Accelerator.Allocate<<#= typeName #>>(length))
            {
                using (var b = Accelerator.Allocate<<#= typeName #>>(length))
                {
                    using (var c = Accelerator.Allocate<int>(length))
                    {
                        Initialize(a, left);
                        Initialize(b, right);
                        Execute(length, a.View, b.View, c.View);

                        var result = left <#= infix #> right ? 1 : 0;
                        var reference = Enumerable.Repeat(result, length).ToArray();
                        Verify(c, reference);
                    }
                }
            }
        }

<#      } #>
<# } #>
    }
}