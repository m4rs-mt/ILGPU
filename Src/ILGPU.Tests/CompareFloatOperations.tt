<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };

// Test name and format string
//  {0} is the type name e.g. float or double
//  {1} is the type suffix e.g. f
var floatLimits = new (string, string)[]
    {
        ("PositiveInfinity", "{0}.PositiveInfinity"),
        ("NegativeInfinity", "{0}.NegativeInfinity"),
        ("MaxValue", "{0}.MaxValue"),
        ("MinValue", "{0}.MinValue"),
        ("Epsilon", "{0}.Epsilon"),
        ("Precision9", "123456.789{1}"),
        ("Precision17", "1.0000000000000002{1}"),
    };
#>
namespace ILGPU.Tests
{
    public abstract class CompareFloatOperations : TestBase
    {
        protected CompareFloatOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var (typeName, type, suffix) in FloatTypes) { #>
<#         var floatRanges = GetFloatRanges(typeName, suffix, true, true, true, false); #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index1 index,
            ArrayView<<#= typeName #>> a,
            ArrayView<<#= typeName #>> b,
            ArrayView<int> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        [Theory]
<#          foreach (var range in floatRanges) { #>
<#              foreach (var range2 in floatRanges) { #>
        [InlineData(<#= range #>, <#= range2 #>)]
<#              } #>
<#          } #>
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= typeName #> left,
            <#= typeName #> right)
        {
            const int length = 32;
            using var a = Accelerator.Allocate<<#= typeName #>>(length);
            using var b = Accelerator.Allocate<<#= typeName #>>(length);
            using var c = Accelerator.Allocate<int>(length);
            Initialize(a, left);
            Initialize(b, right);
            Execute(length, a.View, b.View, c.View);

            var result = left <#= infix #> right ? 1 : 0;
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(c, reference);
        }

<#      } #>
<# } #>

<# foreach (var (typeName, type, suffix) in FloatTypes) { #>
<#      foreach (var (limitName, limitFormat) in floatLimits) { #>
<#          var baseName = "_" + limitName + "_" + type.Name; #>
<#          var testName = "Constant" + baseName; #>
<#          var kernelName = "ConstantKernel" + testName; #>
<#          var testValue = string.Format(limitFormat, typeName, suffix); #>
        internal static void <#= kernelName #>(
            Index1 index,
            ArrayView<<#= typeName #>> input,
            ArrayView<int> output)
        {
            output[index] = input[index] == <#= testValue #> ? 1 : 0;
        }

        [Fact]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>()
        {
            var inputArray = new [] { 0.0<#= suffix #>, <#= testValue #> };
            var expected = inputArray.Select(x => x == <#= testValue #> ? 1 : 0).ToArray();

            using var input = Accelerator.Allocate<<#= typeName #>>(inputArray.Length);
            using var output = Accelerator.Allocate<int>(inputArray.Length);
            input.CopyFrom(inputArray, 0, 0, inputArray.Length);

            Execute(input.Length, input.View, output.View);
            Verify(output, expected);
        }

<#      } #>
<# } #>
    }
}