// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2021-2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: CompareFloatOperations.tt/CompareFloatOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };

// Test name and format string
//  {0} is the type name e.g. float or double
//  {1} is the type suffix e.g. f
var floatLimits = new (string, string)[]
    {
        ("PositiveInfinity", "{0}.PositiveInfinity"),
        ("NegativeInfinity", "{0}.NegativeInfinity"),
        ("MaxValue", "{0}.MaxValue"),
        ("MinValue", "{0}.MinValue"),
        ("Epsilon", "{0}.Epsilon"),
        ("Precision9", "{2}123456.789{1}"),
        ("Precision17", "{2}1.0000000000000002{1}"),
    };
#>

//#pragma warning disable IDE0047 // Remove unnecessary parentheses

namespace ILGPU.Tests
{
    public abstract class CompareFloatOperations : TestBase
    {
        protected CompareFloatOperations(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var type in FloatTypes) { #>
<#         bool isFP843 = type == FloatTypes[0];
           bool isFP852 = type == FloatTypes[1];
           bool isBFP16 = type == FloatTypes[2];
           bool isFP16 = type == FloatTypes[3]; #>
<#         var floatRanges
            = GetFloatRanges(type, true, true, type!=FloatTypes[0], false); #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> b,
            ArrayView1D<int, Stride1D.Dense> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        public static TheoryData<<#= type.Type #>, <#= type.Type #>>
            <#= testName #>Data =>
            new TheoryData<<#= type.Type #>, <#= type.Type #>>
            {
<#          foreach (var range in floatRanges) { #>
<#              foreach (var range2 in floatRanges) { #>
                { <#= range #>, <#= range2 #> },
<#              } #>
<#          } #>
            };

<#      if (isFP16 || isBFP16 || isFP843 || isFP852) { #>
        [SkippableTheory]
<#      } else { #>
        [Theory]
<#      } #>
        [MemberData(nameof(<#= testName #>Data))]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= type.Type #> left,
            <#= type.Type #> right)
        {
<#      if (isFP843) { #>
            Skip.If(!Accelerator.Capabilities.Float8E4M3);
<#      } #>
<#      if (isFP852) { #>
            Skip.If(!Accelerator.Capabilities.Float8E5M2);
<#      } #>
<#      if (isBFP16) { #>
            Skip.If(!Accelerator.Capabilities.BFloat16);
<#      } #>
<#      if (isFP16) { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
            const int Length = 32;
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var b = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var c = Accelerator.Allocate1D<int>(Length);
            Initialize(a.View, left);
            Initialize(b.View, right);
            Execute(Length, a.View, b.View, c.View);

            var result = left <#= infix #> right ? 1 : 0;
            var reference = Enumerable.Repeat(result, Length).ToArray();
            Verify(c.View, reference);
        }

<#      } #>
<# } #>

<# foreach (var type in FloatTypes) { #>
<#      bool isFP843 = type == FloatTypes[0]; #>
<#      bool isFP852 = type == FloatTypes[1]; #>
<#      bool isBFP16 = type == FloatTypes[2]; #>
<#      bool isFP16 = type == FloatTypes[3]; #>
<#      foreach (var (limitName, limitFormat) in floatLimits) { #>
<#          if (limitName.Contains("Infinity") && type == FloatTypes[0]) continue; #>
<#          var baseName = "_" + limitName + "_" + type.Name; #>
<#          var testName = "Constant" + baseName; #>
<#          var kernelName = "ConstantKernel" + testName; #>
<#          var testValue = string.Format(
                limitFormat,
                type.Type,
                type.Suffix,
                type.Prefix); #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> input,
            ArrayView1D<int, Stride1D.Dense> output)
        {
            output[index] = input[index] == <#= testValue #> ? 1 : 0;
        }

<#      if (isFP16||isFP843||isFP852||isBFP16) { #>
        [SkippableFact]
<#      } else { #>
        [Fact]
<#      } #>
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>()
        {
<#      if (isFP843) { #>
            Skip.If(!Accelerator.Capabilities.Float8E4M3);
<#      } #>
<#      if (isFP852) { #>
            Skip.If(!Accelerator.Capabilities.Float8E5M2);
<#      } #>
<#      if (isBFP16) { #>
            Skip.If(!Accelerator.Capabilities.BFloat16);
<#      } #>
<#      if (isFP16) { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
            var inputArray = new [] { <#= type.FormatNumber("0.0") #>, <#= testValue #> };
            var expected = inputArray.Select(
                x => x == <#= testValue #> ? 1 : 0).ToArray();

            using var input = Accelerator.Allocate1D<<#= type.Type #>>(inputArray.Length);
            using var output = Accelerator.Allocate1D<int>(inputArray.Length);
            input.CopyFromCPU(inputArray);

            Execute(input.IntExtent, input.View, output.View);
            Verify(output.View, expected);
        }

<#      } #>
<# } #>
    }
}


//#pragma warning restore IDE0047 // Remove unnecessary parentheses