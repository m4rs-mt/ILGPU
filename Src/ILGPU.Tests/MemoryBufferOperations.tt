// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: MemoryBufferOperations.tt/MemoryBufferOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Xunit;
using Xunit.Abstractions;

// disable: max_line_length
<#
// var copyOperations = new string[] { "CopyFrom", "CopyTo" };
var copyOperations = new string[] { };
var strides = new int[] { 1, 2, 3 };
var lengths = new int[] { 33, 67, 124 };
var copyTypes = SignedIntTypes.Select(t => (t.Name, t.Type));
var twoDDimensions = new string[]
{
    IndexDimensions[0].PropertyName,
    IndexDimensions[1].PropertyName
};
#>
namespace ILGPU.Tests
{
    public abstract class MemoryBufferOperations : TestBase
    {
        private static T[] InitializeArray1D<T>(
            int length,
            int stride,
            Func<int, T> builder)
        {
            int counter = 0;
            int strideCounter = 0;
            if (stride > 1)
                length = (length - 1) * stride + 1;
            var src = new T[length];
            for (int i = 0; i < length; i++)
                src[i] = (strideCounter++) % stride == 0 ? builder(counter++) : default;
            return src;
        }

        [SuppressMessage(
            "Performance",
            "CA1814:Prefer jagged arrays over multidimensional",
            Justification = "Required for test cases")]
        private static T[,] InitializeArray2D<T>(
            int length,
            Func<int, T> builder)
        {
            int counter = 0;
            var src = new T[length, length];
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < length; j++)
                    src[i, j] = builder(counter++);
            }
            return src;
        }

        [SuppressMessage(
            "Performance",
            "CA1814:Prefer jagged arrays over multidimensional",
            Justification = "Required for test cases")]
        private static T[,,] InitializeArray3D<T>(
            int length,
            Func<int, T> builder)
        {
            int counter = 0;
            var src = new T[length, length, length];
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < length; j++)
                {
                    for (int k = 0; k < length; k++)
                        src[i, j, k] = builder(counter++);
                }
            }
            return src;
        }

        protected MemoryBufferOperations(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

        internal static void Copy1D_Kernel<T>(
            Index1D index,
            ArrayView1D<T, Stride1D.General> input,
            ArrayView1D<T, Stride1D.General> output)
            where T : unmanaged
        {
            output[index] = input[index];
        }

        internal static void ZeroLength_Kernel<T>(
            Index1D index,
            ArrayView1D<T, Stride1D.Dense> input,
            ArrayView1D<T, Stride1D.Dense> output)
            where T : unmanaged
        {
            if (index < input.Length & index < output.Length)
                output[index] = input[index];
        }

<#  foreach (var type in copyTypes) { #>
        [Theory]
<#      foreach (var length in lengths) { #>
        [InlineData(<#= length #>)]
<#      } #>
        [KernelMethod(nameof(ZeroLength_Kernel))]
        public void ZeroLength_<#= type.Name #>(int length)
        {
            using var source = Accelerator.Allocate1D<<#= type.Type #>>(0);
            using var target = Accelerator.Allocate1D<<#= type.Type #>>(0);
            var emptyData = Array.Empty<<#= type.Type #>>();

            source.CopyTo(Accelerator.DefaultStream, target);
            target.CopyFromCPU(Accelerator.DefaultStream, emptyData);

            Execute<Index1D, <#= type.Type #>>(
                length,
                source.View,
                target.View);
        }

<#  } #>

<#  foreach (var type in copyTypes) { #>
        [Theory]
<#      foreach (var stride in strides) { #>
<#          foreach (var length in lengths) { #>
        [InlineData(<#= stride #>, <#= length #>)]
<#          } #>
<#      } #>
        [KernelMethod(nameof(Copy1D_Kernel))]
        public void Copy1D_<#= type.Name #>(int stride, int length)
        {
            Func<int, <#= type.Type #>> converter = c => (<#= type.Type #>)c;
            var expected = InitializeArray1D(length, 1, converter);
            var stridedExpected = InitializeArray1D(length, stride, converter);
            using var sourceBuffer = Accelerator.Allocate1D<<#= type.Type #>>(length);
            using var denseBuffer = Accelerator.Allocate1D<<#= type.Type #>>(length);
            using var stridedBuffer = Accelerator.Allocate1D<
                <#= type.Type #>,
                Stride1D.General>(
                    length,
                    new Stride1D.General(stride));

            // Test strided copies
            stridedBuffer.CopyFromCPU(expected);
            Verify(stridedBuffer.View.AsContiguous(), stridedExpected);

            // Test strided copies and accesses via kernels
            stridedBuffer.MemSetToZero();

            // Copy to GPU
            sourceBuffer.CopyFromCPU(expected);

            // "Scatter" to dense buffer
            Execute<Index1D, <#= type.Type #>>(
                length,
                sourceBuffer.View.AsGeneral(),
                denseBuffer.View.AsGeneral());

            // Scatter to general buffer
            Execute<Index1D, <#= type.Type #>>(
                length,
                sourceBuffer.View.AsGeneral(),
                stridedBuffer.View);

            // Verify results
            Verify(sourceBuffer.View, expected);
            Verify(denseBuffer.View, expected);
            Verify(stridedBuffer.View.AsContiguous(), stridedExpected);
        }

        [Theory]
<#      foreach (var length in lengths) { #>
        [InlineData(<#= length #>)]
<#      } #>
        public unsafe void CopyFromToCPU_<#= type.Name #>(int length)
        {
            Func<int, <#= type.Type #>> converter = c => (<#= type.Type #>)(c + 1);
            var expected = InitializeArray1D(length, 1, converter);
            var temp = new <#= type.Type #>[length];
            using var buffer = Accelerator.Allocate1D(expected);
            var view = buffer.View;

            // Copy to CPU
            view.CopyToCPU(temp);
            Verify1D(temp, expected);

            // Copy each element to CPU
            for (int i = 0; i < length; ++i)
            {
                <#= type.Type #> element = default;
                view.SubView(i, 1).CopyToCPU(ref element, 1);
                Assert.Equal(element, expected[i]);
            }

            // Copy unsafe to CPU
            Array.Clear(temp, 0, length);
            fixed (<#= type.Type #>* ptr = temp)
            {
                view.AsContiguous().CopyToCPUUnsafeAsync(
                    ref Unsafe.AsRef<<#= type.Type #>>(ptr),
                    length);
                Accelerator.Synchronize();
                Verify1D(temp, expected);
            }

            // Copy from CPU
            view.MemSetToZero();
            view.CopyFromCPU(expected);
            Verify(view, expected);

            // Copy each element from CPU
            view.MemSetToZero();
            for (int i = 0; i < length; ++i)
            {
                var value = expected[i];
                view.SubView(i, 1).CopyFromCPU(ref value, 1);
            }
            Verify(view, expected);

            // Copy unsafe from CPU
            fixed (<#= type.Type #>* ptr = temp)
            {
                view.AsContiguous().CopyFromCPUUnsafeAsync(
                    ref Unsafe.AsRef<<#= type.Type #>>(ptr),
                    length);
                Accelerator.Synchronize();
                Verify(view, expected);
            }
        }

<#  } #>

        internal static void Copy2D_Kernel<T>(
            Index2D index,
            ArrayView2D<T, Stride2D.General> input,
            ArrayView2D<T, Stride2D.General> output)
            where T : unmanaged
        {
            output[index] = input[index];
        }

<#  foreach (var type in copyTypes) { #>
        [Theory]
<#      foreach (var length in lengths) { #>
        [InlineData(<#= length #>)]
<#      } #>
        [KernelMethod(nameof(Copy2D_Kernel))]
        public void Copy2D_<#= type.Name #>(int length)
        {
            var extent = new LongIndex2D(length, length);
            Func<int, <#= type.Type #>> converter = c => (<#= type.Type #>)c;
            var expected = InitializeArray2D(length, converter);
            var contiguousExpected = InitializeArray1D(length * length, 1, converter);

            using var denseX = Accelerator.Allocate2DDenseX(expected);
            using var denseX2 = Accelerator.Allocate2DDenseX<<#= type.Type #>>(extent);
            using var denseY = Accelerator.Allocate2DDenseY(expected);
            using var denseY2 = Accelerator.Allocate2DDenseY<<#= type.Type #>>(extent);
            denseX2.MemSetToZero();
            denseY2.MemSetToZero();

            // Test strided copies
            Verify(denseY.View.AsContiguous(), contiguousExpected);
            Verify2D(denseY.View, expected);
            Verify2D(denseX.GetAsArray2D(), denseY.GetAsArray2D());

            // "Scatter" to buffers
            Execute<Index2D, <#= type.Type #>>(
                extent.ToIntIndex(),
                denseX.View.AsGeneral(),
                denseY2.View.AsGeneral());
            Execute<Index2D, <#= type.Type #>>(
                extent.ToIntIndex(),
                denseY.View.AsGeneral(),
                denseX2.View.AsGeneral());

            Verify2D(denseY2.View, expected);
            Verify2D(denseX2.GetAsArray2D(), expected);

            // Test subview copies
            var expectedSub = InitializeArray2D(length / 2, converter);
            denseX.MemSetToZero();
            denseY.MemSetToZero();
            var subViewX = denseX.View.SubView(
                (1, 1),
                (length / 2, length / 2));
            var subViewY = denseY.View.SubView(
                (1, 1),
                (length / 2, length / 2));
            var subViewYGeneral = subViewY.AsGeneral();
            subViewX.CopyFromCPU(expectedSub);
            Assert.Throws<NotSupportedException>(() =>
                subViewY.CopyFromCPU(expectedSub));
            subViewYGeneral.CopyFromCPU(expectedSub);
            Verify2D(expectedSub, subViewX.GetAsArray2D());
            Assert.Throws<NotSupportedException>(() =>
                Verify2D(expectedSub, subViewY.GetAsArray2D()));
            Verify2D(expectedSub, subViewYGeneral.GetAsArray2D());
        }

<#  } #>

        internal static void Copy3D_Kernel<T>(
            Index3D index,
            ArrayView3D<T, Stride3D.General> input,
            ArrayView3D<T, Stride3D.General> output)
            where T : unmanaged
        {
            output[index] = input[index];
        }

<#  foreach (var type in copyTypes) { #>
        [Theory]
<#      foreach (var length in lengths) { #>
        [InlineData(<#= length #>)]
<#      } #>
        [KernelMethod(nameof(Copy3D_Kernel))]
        public void Copy3D_<#= type.Name #>(int length)
        {
            var extent = new LongIndex3D(length, length, length);
            Func<int, <#= type.Type #>> converter = c => (<#= type.Type #>)c;
            var expected = InitializeArray3D(length, converter);
            var contiguousExpected = InitializeArray1D(
                length * length * length,
                1,
                converter);

            using var denseX = Accelerator.Allocate3DDenseXY(expected);
            using var denseX2 = Accelerator.Allocate3DDenseXY<<#= type.Type #>>(extent);
            using var denseY = Accelerator.Allocate3DDenseZY(expected);
            using var denseY2 = Accelerator.Allocate3DDenseZY<<#= type.Type #>>(extent);
            denseX2.MemSetToZero();
            denseY2.MemSetToZero();

            // Test strided copies
            Verify(denseY.View.AsContiguous(), contiguousExpected);
            Verify3D(denseY.View, expected);
            Verify3D(denseX.GetAsArray3D(), denseY.GetAsArray3D());

            // "Scatter" to buffers
            Execute<Index3D, <#= type.Type #>>(
                extent.ToIntIndex(),
                denseX.View.AsGeneral(),
                denseY2.View.AsGeneral());
            Execute<Index3D, <#= type.Type #>>(
                extent.ToIntIndex(),
                denseY.View.AsGeneral(),
                denseX2.View.AsGeneral());

            Verify3D(denseY2.View, expected);
            Verify3D(denseX2.GetAsArray3D(), expected);

            // Test subview copies
            var expectedSub = InitializeArray3D(length / 2, converter);
            denseX.MemSetToZero();
            denseY.MemSetToZero();
            var subViewX = denseX.View.SubView(
                (1, 1, 1),
                (length / 2, length / 2, length / 2));
            var subViewY = denseY.View.SubView(
                (1, 1, 1),
                (length / 2, length / 2, length / 2));
            var subViewYGeneral = subViewY.AsGeneral();
            subViewX.CopyFromCPU(expectedSub);
            Assert.Throws<NotSupportedException>(() =>
                subViewY.CopyFromCPU(expectedSub));
            subViewYGeneral.CopyFromCPU(expectedSub);
            Verify3D(expectedSub, subViewX.GetAsArray3D());
            Assert.Throws<NotSupportedException>(() =>
                Verify3D(expectedSub, subViewY.GetAsArray3D()));
            Verify3D(expectedSub, subViewYGeneral.GetAsArray3D());
        }

<#  } #>
    }
}