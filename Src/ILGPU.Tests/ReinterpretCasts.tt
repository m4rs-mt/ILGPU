// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2021-2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: ReinterpretCasts.tt/ReinterpretCasts.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

namespace ILGPU.Tests
{
    public abstract class ReinterpretCasts : TestBase
    {
        private const int Length = 32;

        protected ReinterpretCasts(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (floatType, intType) in Enumerable.Range(0, FloatTypes.Length).
    Select(t => (FloatTypes[t], UnsignedIntTypes[t==0?1:t]))) { #>
        internal static void <#= floatType.Name #>AsIntKernel(
            Index1D index,
            ArrayView1D<<#= intType.Type #>, Stride1D.Dense> data,
            <#= floatType.Type #> value)
        {
<#
    if (floatType != FloatTypes[0])
    {
#>
            data[index] = Interop.FloatAsInt(value);
<#
    }
    if (floatType == FloatTypes[0]) {
#>
            data[index] = value.AsUShort;
<#
    }
#>
        }

        [SkippableFact]
        [KernelMethod(nameof(<#= floatType.Name #>AsIntKernel))]
        public void <#= floatType.Name #>AsInt()
        {
<#      if (floatType == FloatTypes[0] || floatType == FloatTypes[1] ) { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
            var floatValue = (<#= floatType.Type #>)2.0;
            using var data = Accelerator.Allocate1D<<#= intType.Type #>>(Length);
            Execute(Length, data.View, floatValue);

            var reference = Enumerable.Repeat(
<#
    if (floatType != FloatTypes[0])
    {
#>
                Interop.FloatAsInt(floatValue),
<#
    }
    if (floatType == FloatTypes[0]) {
#>
                floatValue.AsUShort,
<#
    }
#>
                Length).ToArray();
            Verify(data.View, reference);
        }

        internal static void IntAs<#= floatType.Name #>Kernel(
            Index1D index,
            ArrayView1D<<#= floatType.Type #>, Stride1D.Dense> data,
            <#= intType.Type #> value)
        {
<#
    if (floatType != FloatTypes[0])
    {
#>
            data[index] = Interop.IntAsFloat(value);
<#
    }
    if (floatType == FloatTypes[0]) {
#>
            data[index] = (BFloat16) value;
<#
    }
#>
        }

        [SkippableFact]
        [KernelMethod(nameof(IntAs<#= floatType.Name #>Kernel))]
        public void IntAs<#= floatType.Name #>()
        {
<#      if (floatType == FloatTypes[0] || floatType == FloatTypes[1]) { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
<#
    if (floatType != FloatTypes[0])
    {
#>
            var intValue = Interop.FloatAsInt((<#= floatType.Type #>)2.0);
<#
    }
    if (floatType == FloatTypes[0]) {
#>
            var intValue = ((<#= floatType.Type #>)2.0).AsUShort;
<#
    }
#>
            using var data = Accelerator.Allocate1D<<#= floatType.Type #>>(Length);
            Execute(Length, data.View, intValue);

            var reference = Enumerable.Repeat(
<#
    if (floatType != FloatTypes[0])
    {
#>
                Interop.IntAsFloat(intValue),
<#
    }
    if (floatType == FloatTypes[0]) {
#>
                (BFloat16) intValue,
<#
    }
#>
                Length).ToArray();
            Verify(data.View, reference);
        }

<# } #>
    }
}