<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

namespace ILGPU.Tests
{
    public abstract class ReinterpretCasts : TestBase
    {
        private const int Length = 32;

        protected ReinterpretCasts(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (floatType, intType) in Enumerable.Range(0, FloatTypes.Length).
    Select(t => (FloatTypes[t], UnsignedIntTypes[t + 1]))) { #>
        internal static void <#= floatType.Name #>AsIntKernel(
            Index1 index,
            ArrayView<<#= intType.Type #>> data,
            <#= floatType.Type #> value)
        {
            data[index] = Interop.FloatAsInt(value);
        }

        [Fact]
        [KernelMethod(nameof(<#= floatType.Name #>AsIntKernel))]
        public void <#= floatType.Name #>AsInt()
        {
            var floatValue = (<#= floatType.Type #>)2.0;
            using var data = Accelerator.Allocate<<#= intType.Type #>>(Length);
            Execute(Length, data.View, floatValue);

            var reference = Enumerable.Repeat(
                Interop.FloatAsInt(floatValue),
                Length).ToArray();
            Verify(data, reference);
        }

        internal static void IntAs<#= floatType.Name #>Kernel(
            Index1 index,
            ArrayView<<#= floatType.Type #>> data,
            <#= intType.Type #> value)
        {
            data[index] = Interop.IntAsFloat(value);
        }

        [Fact]
        [KernelMethod(nameof(IntAs<#= floatType.Name #>Kernel))]
        public void IntAs<#= floatType.Name #>()
        {
            var intValue = Interop.FloatAsInt((<#= floatType.Type #>)2.0);
            using var data = Accelerator.Allocate<<#= floatType.Type #>>(Length);
            Execute(Length, data.View, intValue);

            var reference = Enumerable.Repeat(
                Interop.IntAsFloat(intValue),
                Length).ToArray();
            Verify(data, reference);
        }

<# } #>
    }
}