// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2021-2024 ILGPU Project
//                                    www.ilgpu.net
//
// File: ReinterpretCasts.tt/ReinterpretCasts.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

namespace ILGPU.Tests
{
    public abstract class ReinterpretCasts : TestBase
    {
        private const int Length = 32;

        protected ReinterpretCasts(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (floatType, intType) in Enumerable.Range(0, FloatTypes.Length).
    Select(t => (FloatTypes[t], UnsignedIntTypes[t<2?0:(t<4?1:t-2)]))) { #>
        internal static void <#= floatType.Name #>AsIntKernel(
            Index1D index,
            ArrayView1D<<#= intType.Type #>, Stride1D.Dense> data,
            <#= floatType.Type #> value)
        {
<#
    if (floatType == FloatTypes[0] || floatType == FloatTypes[1])
    {
#>
            data[index] = value.AsByte;
<#
    }
    else if (floatType == FloatTypes[2])
    {
#>
            data[index] = value.AsUShort;
<#
    }
    else
    {
#>

            data[index] = Interop.FloatAsInt(value);
<#
    }
#>
        }

        [SkippableFact]
        [KernelMethod(nameof(<#= floatType.Name #>AsIntKernel))]
        public void <#= floatType.Name #>AsInt()
        {
<#      if (floatType == FloatTypes[0])
        { #>
            Skip.If(!Accelerator.Capabilities.Float8E4M3);
<#      }
        if (floatType == FloatTypes[1])
        { #>
            Skip.If(!Accelerator.Capabilities.Float8E5M2);
<#      }
        if (floatType == FloatTypes[2])
        { #>
            Skip.If(!Accelerator.Capabilities.BFloat16);
<#      }
        if (floatType == FloatTypes[3])
        { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>
            var floatValue = (<#= floatType.Type #>)2.0;
            using var data = Accelerator.Allocate1D<<#= intType.Type #>>(Length);
            Execute(Length, data.View, floatValue);

            var reference = Enumerable.Repeat(
               <#
    if (floatType == FloatTypes[0] || floatType == FloatTypes[1])
    {
#>
            floatValue.AsByte,
<#
    }
    else if (floatType == FloatTypes[2])
    {
#>
            floatValue.AsUShort,
<#
    }
    else
    {
#>
            Interop.FloatAsInt(floatValue),
<#
    }
#>
                Length).ToArray();
            Verify(data.View, reference);
        }

        internal static void IntAs<#= floatType.Name #>Kernel(
            Index1D index,
            ArrayView1D<<#= floatType.Type #>, Stride1D.Dense> data,
            <#= intType.Type #> value)
        {
<#
    if (floatType == FloatTypes[0])
    {
#>
            data[index] = (FP8E4M3) value;
<#
    }
    else if (floatType == FloatTypes[1])
    {
#>
            data[index] = (FP8E5M2) value;
<#
    }
    else if (floatType == FloatTypes[2])
    {
#>
            data[index] = (BF16) value;
<#
    }
    else
    {
#>
            data[index] = Interop.IntAsFloat(value);
<#
    }
#>
        }

        [SkippableFact]
        [KernelMethod(nameof(IntAs<#= floatType.Name #>Kernel))]
        public void IntAs<#= floatType.Name #>()
        {
<#      if (floatType == FloatTypes[0])
        { #>
            Skip.If(!Accelerator.Capabilities.Float8E4M3);
<#      } #>
<#      if (floatType == FloatTypes[1])
        { #>
            Skip.If(!Accelerator.Capabilities.Float8E5M2);
<#      } #>
<#      if (floatType == FloatTypes[2])
        { #>
            Skip.If(!Accelerator.Capabilities.BFloat16);
<#      } #>
<#      if (floatType == FloatTypes[3])
        { #>
            Skip.If(!Accelerator.Capabilities.Float16);
<#      } #>

<#
    if (floatType == FloatTypes[0])
    {
#>
            var two = FP8E4M3.One + FP8E4M3.One;
            var intValue = two.AsByte;
<#
    }
    else if (floatType == FloatTypes[1])
    {
#>
            var two = FP8E5M2.One + FP8E5M2.One;
            var intValue = two.AsByte;
<#
    }
    else if (floatType == FloatTypes[2])
    {
#>
            var two = BF16.One + BF16.One;
            var intValue = two.AsUShort;
<#
    }
    else
    {
#>
            var intValue = Interop.FloatAsInt((<#= floatType.Type #>)2.0);
<#
    }
#>
            using var data = Accelerator.Allocate1D<<#= floatType.Type #>>(Length);
            Execute(Length, data.View, intValue);

            var reference = Enumerable.Repeat(
<#
    if (floatType == FloatTypes[0])
    {
#>
            (FP8E4M3) intValue
<#
    }
    else if (floatType == FloatTypes[1])
    {
#>
            (FP8E5M2) intValue
<#
    }
    else if (floatType == FloatTypes[2])
    {
#>
            (BF16) intValue
<#
    }
    else
    {
#>
            Interop.IntAsFloat(intValue)

<#
    }
#>,
                Length).ToArray();
            Verify(data.View, reference);
        }

<# } #>
    }
}