<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using System.Runtime.CompilerServices;
using Xunit;
using Xunit.Abstractions;
<# int FixedBufferLength = 9; #>

#pragma warning disable CA1815 // Override equals and operator equals on value types
#pragma warning disable CA1051 // Do not declare visible instance fields
#pragma warning disable CA2231 // Overload operator equals on overriding value type Equals
#pragma warning disable CS0659 // Type overrides Object.Equals(object o) but does not
                               // override Object.GetHashCode()

namespace ILGPU.Tests
{
<# foreach (var type in IntTypes) { #>
    public unsafe struct FixedBufferStruct<#= type.Name #> :
        IXunitSerializable,
        IEquatable<FixedBufferStruct<#= type.Name #>>
    {
        public fixed <#= type.Type #> Data[FixedBuffers.Length];

        public FixedBufferStruct<#= type.Name #>(<#= type.Type #> data)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
                Data[i] = data;
        }

        public void Deserialize(IXunitSerializationInfo info)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
                Data[i] = info.GetValue<<#= type.Type #>>(nameof(Data) + i);
        }

        public void Serialize(IXunitSerializationInfo info)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
                info.AddValue(nameof(Data) + i, Data[i]);
        }

        public bool Equals(FixedBufferStruct<#= type.Name #> buffer)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
            {
                if (Data[i] != buffer.Data[i])
                    return false;
            }
            return true;
        }

        public override bool Equals(object obj) =>
            obj is FixedBufferStruct<#= type.Name #> fixedStruct &&
            Equals(fixedStruct);
    }

    public unsafe struct MultiFixedBufferStruct<#= type.Name #> :
        IXunitSerializable,
        IEquatable<MultiFixedBufferStruct<#= type.Name #>>
    {
        public fixed <#= type.Type #> A[FixedBuffers.Length];
        public fixed <#= type.Type #> B[FixedBuffers.Length];
        public fixed <#= type.Type #> C[FixedBuffers.Length];

        public MultiFixedBufferStruct<#= type.Name #>(<#= type.Type #> data)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
            {
                A[i] = data++;
                B[i] = data++;
                C[i] = data++;
            }
        }

        public void Deserialize(IXunitSerializationInfo info)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
            {
                A[i] = info.GetValue<<#= type.Type #>>(nameof(A) + i);
                B[i] = info.GetValue<<#= type.Type #>>(nameof(B) + i);
                C[i] = info.GetValue<<#= type.Type #>>(nameof(C) + i);
            }
        }

        public void Serialize(IXunitSerializationInfo info)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
            {
                info.AddValue(nameof(A) + i, A[i]);
                info.AddValue(nameof(B) + i, B[i]);
                info.AddValue(nameof(C) + i, C[i]);
            }
        }

        public bool Equals(MultiFixedBufferStruct<#= type.Name #> buffer)
        {
            for (int i = 0; i < FixedBuffers.Length; ++i)
            {
                if (A[i] != buffer.A[i])
                    return false;
                if (B[i] != buffer.B[i])
                    return false;
                if (C[i] != buffer.C[i])
                    return false;
            }
            return true;
        }

        public override bool Equals(object obj) =>
            obj is MultiFixedBufferStruct<#= type.Name #> fixedStruct &&
            Equals(fixedStruct);
    }

<# } #>

    public unsafe abstract class FixedBuffers : TestBase
    {
        public const int Length = <#= FixedBufferLength #>;

        protected FixedBuffers(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }
<# foreach (var type in IntTypes) { #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static void AdjustBuffer(
            ref FixedBufferStruct<#= type.Name #> value,
            <#= type.Type #> scalarValue)
        {
            for (int i = 0; i < Length; ++i)
                value.Data[i] += scalarValue;
        }

        internal static void FixedBuffer<#= type.Name #>Kernel(
            Index1 index,
            ArrayView<<#= type.Type #>> data,
            ArrayView<<#= type.Type #>> data2,
            ArrayView<<#= type.Type #>> data3,
            FixedBufferStruct<#= type.Name #> value,
            <#= type.Type #> scalarValue)
        {
            data[index] = value.Data[index];
            AdjustBuffer(ref value, scalarValue);
            data2[index] = value.Data[index];

            // Adjust buffer using C# compile-time constants
            var bufferStruct = new FixedBufferStruct<#= type.Name #>();
<#      for (int i = 0; i < FixedBufferLength; ++i) { #>
            bufferStruct.Data[<#= i #>] = scalarValue;
<#      } #>

            // Limit results to the main thread
            if (index > 0)
                return;

<#      for (int i = 0; i < FixedBufferLength; ++i) { #>
            data3[<#= i #>] = bufferStruct.Data[<#= i #>];
<#      } #>
        }

        [Fact]
        [KernelMethod(nameof(FixedBuffer<#= type.Name #>Kernel))]
        public void FixedBuffer<#= type.Name #>()
        {
            using var buffer1 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer2 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer3 = Accelerator.Allocate<<#= type.Type #>>(Length);

            <#= type.Type #> scalarValue = <#= type.Type #>.MaxValue;
            var fixedBufferData1 = new FixedBufferStruct<#= type.Name #>(scalarValue);
            Execute(
                Length,
                buffer1.View,
                buffer2.View,
                buffer3.View,
                fixedBufferData1,
                scalarValue);

            var expected1 = Enumerable.Repeat(scalarValue, Length).ToArray();
            var expected2 = Enumerable.Repeat(
                (<#= type.Type #>)(scalarValue + scalarValue),
                Length).ToArray();
            Verify(buffer1, expected1);
            Verify(buffer2, expected2);
            Verify(buffer3, expected1);
        }

        internal static void GetMultiFixedBuffer<#= type.Name #>Kernel(
            Index1 index,
            ArrayView<<#= type.Type #>> data,
            ArrayView<<#= type.Type #>> data2,
            ArrayView<<#= type.Type #>> data3,
            MultiFixedBufferStruct<#= type.Name #> value,
            <#= type.Type #> scalarValue)
        {
            data[index] = value.A[index];
            data2[index] = value.B[index];
            data3[index] = value.C[index];
        }

        [Fact]
        [KernelMethod(nameof(GetMultiFixedBuffer<#= type.Name #>Kernel))]
        public void GetMultiFixedBuffer<#= type.Name #>()
        {
            using var buffer1 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer2 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer3 = Accelerator.Allocate<<#= type.Type #>>(Length);

            <#= type.Type #> scalarValue = 2;
            var fixedBufferData = new MultiFixedBufferStruct<#= type.Name #>(scalarValue);
            Execute(
                Length,
                buffer1.View,
                buffer2.View,
                buffer3.View,
                fixedBufferData,
                scalarValue);

            var expected1 = new <#= type.Type #>[] { 2, 5, 8, 11, 14, 17, 20, 23, 26 };
            var expected2 = new <#= type.Type #>[] { 3, 6, 9, 12, 15, 18, 21, 24, 27 };
            var expected3 = new <#= type.Type #>[] { 4, 7, 10, 13, 16, 19, 22, 25, 28 };
            Verify(buffer1, expected1);
            Verify(buffer2, expected2);
            Verify(buffer3, expected3);
        }

        internal static void SetMultiFixedBuffer<#= type.Name #>Kernel(
            Index1 index,
            ArrayView<<#= type.Type #>> data,
            ArrayView<<#= type.Type #>> data2,
            ArrayView<<#= type.Type #>> data3,
            ArrayView<MultiFixedBufferStruct<#= type.Name #>> values)
        {
            values[0].A[index] = data[index];
            values[0].B[index] = data2[index];
            values[0].C[index] = data3[index];
        }

        [Fact]
        [KernelMethod(nameof(SetMultiFixedBuffer<#= type.Name #>Kernel))]
        public void SetMultiFixedBuffer<#= type.Name #>()
        {
            var expected1 = new <#= type.Type #>[] { 2, 5, 8, 11, 14, 17, 20, 23, 26 };
            var expected2 = new <#= type.Type #>[] { 3, 6, 9, 12, 15, 18, 21, 24, 27 };
            var expected3 = new <#= type.Type #>[] { 4, 7, 10, 13, 16, 19, 22, 25, 28 };
            using var buffer1 = Accelerator.Allocate(expected1);
            using var buffer2 = Accelerator.Allocate(expected2);
            using var buffer3 = Accelerator.Allocate(expected3);
            using var fixedBuffers =
                Accelerator.Allocate<MultiFixedBufferStruct<#= type.Name #>>(1);

            Execute(Length, buffer1.View, buffer2.View, buffer3.View, fixedBuffers.View);
                
            <#= type.Type #> scalarValue = 2;
            var expected =
                new[]
                {
                    new MultiFixedBufferStruct<#= type.Name #>(scalarValue)
                };
            Verify(fixedBuffers, expected);
        }
        
        internal static readonly MultiFixedBufferStruct<#= type.Name #>
            Local<#= type.Name #>Struct =
            new MultiFixedBufferStruct<#= type.Name #>((<#= type.Type #>)2);

        internal static void GetStaticMultiFixedBuffer<#= type.Name #>Kernel(
            Index1 index,
            ArrayView<<#= type.Type #>> data,
            ArrayView<<#= type.Type #>> data2,
            ArrayView<<#= type.Type #>> data3)
         {
            data[index] = Local<#= type.Name #>Struct.A[index];
            data2[index] = Local<#= type.Name #>Struct.B[index];
            data3[index] = Local<#= type.Name #>Struct.C[index];
        }
        
        [Fact]
        [KernelMethod(nameof(GetStaticMultiFixedBuffer<#= type.Name #>Kernel))]
        public void GetStaticMultiFixedBuffer<#= type.Name #>()
        {
            using var buffer1 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer2 = Accelerator.Allocate<<#= type.Type #>>(Length);
            using var buffer3 = Accelerator.Allocate<<#= type.Type #>>(Length);
            Execute(
                Length,
                buffer1.View,
                buffer2.View,
                buffer3.View);

            var expected1 = new <#= type.Type #>[] { 2, 5, 8, 11, 14, 17, 20, 23, 26 };
            var expected2 = new <#= type.Type #>[] { 3, 6, 9, 12, 15, 18, 21, 24, 27 };
            var expected3 = new <#= type.Type #>[] { 4, 7, 10, 13, 16, 19, 22, 25, 28 };
            Verify(buffer1, expected1);
            Verify(buffer2, expected2);
            Verify(buffer3, expected3);
        }
<# } #>
    }
}

#pragma warning restore CA2231 // Overload operator equals on overriding value type Equals
#pragma warning restore CA1051 // Do not declare visible instance fields
#pragma warning restore CA1815 // Override equals and operator equals on value types
#pragma warning restore CS0659 // Type overrides Object.Equals(object o) but does not
                               // override Object.GetHashCode()