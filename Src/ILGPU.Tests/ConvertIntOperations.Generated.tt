// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: ConvertIntOperations.Generated.tt/ConvertIntOperations.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to

<#
var types = IntTypes.Concat(FloatTypes);
#>
namespace ILGPU.Tests
{
    partial class ConvertIntOperations
    {
<# foreach (var type in IntTypes) { #>
<#      foreach (var targetType in types) { #>
<#         var baseName = "_" + type.Name + "_" + targetType.Name; #>
<#         var testName = "ConvertOperation" + baseName; #>
<#         var kernelName = "ConvertOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= targetType.Type #>, Stride1D.Dense> b)
        {
            b[index] = (<#= targetType.Type #>)a[index];
        }

        [Theory]
<#      // Half conversions of these values is implementation specific in these cases #>
<#      if (targetType != FloatTypes[0]) { #>
        [InlineData(<#= type.Type #>.MaxValue)]
        [InlineData(<#= type.Type #>.MinValue)]
        [InlineData(<#= type.Type #>.MinValue + 1)]
<#      } #>
        [InlineData((<#= type.Type #>)0)]
        [InlineData((<#= type.Type #>)1)]
        [InlineData((<#= type.Type #>)31)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(<#= type.Type #> value)
        {
            const int length = 32;
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(length);
            using var b = Accelerator.Allocate1D<<#= targetType.Type #>>(length);
            Initialize(a.View, value);
            Execute(length, a.View, b.View);

            var result = (<#= targetType.Type #>)value;
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(b.View, reference);
        }

        internal static void <#= kernelName #>_MaxValue(
            Index1D index,
            ArrayView1D<<#= targetType.Type #>, Stride1D.Dense> output)
        {
            unchecked
            {
                output[index] = (<#= targetType.Type #>)<#= type.Type #>.MaxValue;
            }
        }

        [Fact]
        [KernelMethod(nameof(<#= kernelName #>_MaxValue))]
        public void <#= testName #>_MaxValue()
        {
            const int length = 32;
            using var output = Accelerator.Allocate1D<<#= targetType.Type #>>(length);
            Execute(length, output.View);

            <#= targetType.Type #> result;
            unchecked
            {
                result = (<#= targetType.Type #>)(<#= type.Type #>.MaxValue);
            }
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(output.View, reference);
        }

<#      } #>
<# } #>
    }
}

#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to