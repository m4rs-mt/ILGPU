<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to

<#
var types = IntTypes.Concat(FloatTypes);
#>
namespace ILGPU.Tests
{
    public abstract class ConvertIntOperations : TestBase
    {
        protected ConvertIntOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var type in IntTypes) { #>
<#      foreach (var targetType in types) { #>
<#         var baseName = "_" + type.Name + "_" + targetType.Name; #>
<#         var testName = "ConvertOperation" + baseName; #>
<#         var kernelName = "ConvertOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index1 index,
            ArrayView<<#= type.Type #>> a,
            ArrayView<<#= targetType.Type #>> b)
        {
            b[index] = (<#= targetType.Type #>)a[index];
        }

        [Theory]
<#      // Half conversions of these values is implementation specific in these cases #>
<#      if (targetType != FloatTypes[0]) { #>
        [InlineData(<#= type.Type #>.MaxValue)]
        [InlineData(<#= type.Type #>.MinValue)]
        [InlineData(<#= type.Type #>.MinValue + 1)]
<#      } #>
        [InlineData((<#= type.Type #>)0)]
        [InlineData((<#= type.Type #>)1)]
        [InlineData((<#= type.Type #>)31)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(<#= type.Type #> value)
        {
            const int length = 32;
            using var a = Accelerator.Allocate<<#= type.Type #>>(length);
            using var b = Accelerator.Allocate<<#= targetType.Type #>>(length);
            Initialize(a, value);
            Execute(length, a.View, b.View);

            var result = (<#= targetType.Type #>)value;
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(b, reference);
        }

<#      } #>
<# } #>
    }
}

#pragma warning restore xUnit1025 // InlineData should be unique within the Theory it
                                  // belongs to