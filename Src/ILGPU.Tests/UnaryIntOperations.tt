// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: UnaryIntOperations.tt/UnaryIntOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string, string, bool)[]
    {
        ("Neg", "-", "", false),

        ("BitwiseNot", "~", "", true),
        ("BitwiseNot", "~", "", false),

        ("Abs", "IntrinsicMath.Abs(", ")", false),
    };

var bitOperationTypes = SignedIntTypes.Skip(2).Concat(UnsignedIntTypes.Skip(2));
var bitOperationConfigurations = new string[]
    {
        "PopCount",
        "LeadingZeroCount",
        "TrailingZeroCount",
    };
#>
namespace ILGPU.Tests
{
    public abstract class UnaryIntOperations : TestBase
    {
        private const int Length = 32;

        protected UnaryIntOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (opName, prefix, postfix, unsigned) in operationConfigurations) { #>
<#      var types = unsigned ? UnsignedIntTypes : SignedIntTypes; #>
<#      foreach (var type in types) { #>
<#         var baseName = "_" + opName + "_" + type.Name; #>
<#         var testName = "UnaryOperation" + baseName; #>
<#         var kernelName = "UnaryOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> b)
        {
            var result = <#= prefix #>a[index]<#= postfix #>;
            b[index] = (<#= type.Type #>)result;
        }

        [Theory]
        [InlineData(<#= type.Type #>.MinValue + 1)]
        [InlineData((<#= type.Type #>)0)]
        [InlineData(<#= type.Type #>.MaxValue)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>( <#= type.Type #> value)
        {
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            using var b = Accelerator.Allocate1D<<#= type.Type #>>(Length);
            Initialize(a.View, value);
            Execute(Length, a.View, b.View);

            var result = <#= prefix #>value<#= postfix #>;
            var reference = Enumerable.Repeat((<#= type.Type #>)result, Length).ToArray();
            Verify(b.View, reference);
        }

<#      } #>
<# } #>

<# foreach (var opName in bitOperationConfigurations) { #>
<#      foreach (var type in bitOperationTypes) { #>
<#         var baseName = "_" + opName + "_" + type.Name; #>
<#         var testName = "UnaryOperation" + baseName; #>
<#         var kernelName = "UnaryOperationKernel" + baseName; #>
<#         bool isUnsignedType = UnsignedIntTypes.Contains(type); #>
<#         bool is64Bit = type == SignedIntTypes.Last() ||
                type == UnsignedIntTypes.Last(); #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> input,
            ArrayView1D<int, Stride1D.Dense> output)
        {
            output[index] = IntrinsicMath.<#= opName #>(input[index] << index);
        }

        [Theory]
        [InlineData(0x0)]
        [InlineData(0x1)]
        [InlineData(0x1001)]
<#          if (isUnsignedType) { #>
        [InlineData(0xABCD_EF00)]
<#              if (is64Bit) { #>
        [InlineData(0xABCD_EF00_ABCD_EF00)]
<#              } #>
<#          } else { #>
        [InlineData(0x7ABC_DEF0)]
<#              if (is64Bit) { #>
        [InlineData(0x7ABC_DEF0_0ABC_DEF0)]
<#              } #>
        [InlineData(<#= type.Type #>.MinValue)]
<#          } #>
        [InlineData(<#= type.Type #>.MaxValue)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(<#= type.Type #> value)
        {
            var expected =
                Enumerable.Range(0, Length)
                .Select(x => IntrinsicMath.BitOperations.<#= opName #>(value << x))
                .ToArray();
            using var input = Accelerator.Allocate1D(
                Enumerable.Repeat(value, Length).ToArray());
            using var output = Accelerator.Allocate1D<int>(Length);

            Execute(input.IntExtent, input.View, output.View);
            Verify(output.View, expected);
        }

<#      } #>
<# } #>
    }
}