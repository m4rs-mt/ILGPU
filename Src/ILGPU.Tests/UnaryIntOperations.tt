<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string, string, bool)[]
    {
        ("Neg", "-", "", false),

        ("BitwiseNot", "~", "", true),
        ("BitwiseNot", "~", "", false),

        ("Abs", "IntrinsicMath.Abs(", ")", false),
    };
#>
namespace ILGPU.Tests
{
    public abstract class UnaryIntOperations : TestBase
    {
        protected UnaryIntOperations(ITestOutputHelper output, TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (opName, prefix, postfix, unsigned) in operationConfigurations) { #>
<#      var types = unsigned ? UnsignedIntTypes : SignedIntTypes; #>
<#      foreach (var type in types) { #>
<#         var baseName = "_" + opName + "_" + type.Name; #>
<#         var testName = "UnaryOperation" + baseName; #>
<#         var kernelName = "UnaryOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index1 index,
            ArrayView<<#= type.Type #>> a,
            ArrayView<<#= type.Type #>> b)
        {
            var result = <#= prefix #>a[index]<#= postfix #>;
            b[index] = (<#= type.Type #>)result;
        }

        [Theory]
        [InlineData(32, <#= type.Type #>.MinValue + 1)]
        [InlineData(1024, <#= type.Type #>.MinValue + 1)]
        [InlineData(32, (<#= type.Type #>)0)]
        [InlineData(1024, (<#= type.Type #>)0)]
        [InlineData(32, <#= type.Type #>.MaxValue)]
        [InlineData(1024, <#= type.Type #>.MaxValue)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            int length,
            <#= type.Type #> value)
        {
            using var a = Accelerator.Allocate<<#= type.Type #>>(length);
            using var b = Accelerator.Allocate<<#= type.Type #>>(length);
            Initialize(a, value);
            Execute(length, a.View, b.View);

            var result = <#= prefix #>value<#= postfix #>;
            var reference = Enumerable.Repeat((<#= type.Type #>)result, length).ToArray();
            Verify(b, reference);
        }

<#      } #>
<# } #>
    }
}