<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string, string, bool)[]
    {
        ("Neg", "~", "", true),

        ("Abs", "IntrinsicMath.Abs(", ")", false),
    };
#>
namespace ILGPU.Tests
{
    public abstract class UnaryIntOperations : TestBase
    {
        public UnaryIntOperations(
            ITestOutputHelper output,
            ContextProvider contextProvider)
            : base(output, contextProvider)
        { }

<# foreach (var (operationName, prefix, postfix, unsigned) in operationConfigurations) { #>
<#      var types = unsigned ? UnsignedIntTypes : SignedIntTypes; #>
<#      foreach (var (typeName, type) in types) { #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "UnaryOperation" + baseName; #>
<#         var kernelName = "UnaryOperationKernel" + baseName; #>
        internal static void <#= kernelName #>(
            Index index,
            ArrayView<<#= typeName #>> a,
            ArrayView<<#= typeName #>> b)
        {
            var result = <#= prefix #>a[index]<#= postfix #>;
            b[index] = (<#= typeName #>)result;
        }

        [Theory]
        [InlineData(32, <#= typeName #>.MinValue + 1)]
        [InlineData(1024, <#= typeName #>.MinValue + 1)]
        [InlineData(32, (<#= typeName #>)0)]
        [InlineData(1024, (<#= typeName #>)0)]
        [InlineData(32, <#= typeName #>.MaxValue)]
        [InlineData(1024, <#= typeName #>.MaxValue)]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            int length,
            <#= typeName #> value)
        {
            using var a = Accelerator.Allocate<<#= typeName #>>(length);
            using var b = Accelerator.Allocate<<#= typeName #>>(length);
            Initialize(a, value);
            Execute(length, a.View, b.View);

            var result = <#= prefix #>value<#= postfix #>;
            var reference = Enumerable.Repeat((<#= typeName #>)result, length).ToArray();
            Verify(b, reference);
        }

<#      } #>
<# } #>
    }
}