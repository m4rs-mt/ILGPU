name: CI

on:
  push:
  pull_request:

env:
  DOTNET_NOLOGO: true

jobs:
  check-style:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check line length
        run: |
          $found = $false
          Foreach ($pattern in "*.cs","*.tt") {
            Foreach ($file in Get-ChildItem -Path Src -Filter $pattern -Recurse -File) {
              If (-Not (($file.Directory.Name -Eq "Resources") -Or (Select-String -Path $file -Pattern "^// disable: max_line_length" -Quiet))) {
                $index = 1
                Foreach ($line in Get-Content $file)
                {
                  If ($line.Length -gt 90) {
                    Write-Host "##[error]${file}:${index}: line too long ($($line.Length) > 90 characters)"
                    $found = $true
                  }
                  $index++
                }
              }
            }
          }
          
          If ($found) {
            Exit 1
          }
      - name: Check T4 line endings
        run: |
          # WORKAROUND: The TextTransform tool fails when the T4 template ends with a newline.
          $found = $false
          Foreach ($pattern in "*.tt","*.ttinclude") {
            Foreach ($file in Get-ChildItem -Path Src -Filter $pattern -Recurse -File) {
              If ((Get-Content -Raw $file) -match "\r\n$") {
                Write-Host "##[error]${file}: Bad T4 line ending"
                $found = $true
              }
            }
          }
          
          If ($found) {
            Exit 1
          }

  # Setup the OS matrix so that CUDA tests do not run on forks, as it needs self-hosted runners
  setup-os-matrix:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ubuntu-latest
    steps:
      - name: Setup OS matrix
        id: setup-os-matrix
        run: |
          os='["ubuntu-latest","windows-latest","macos-latest"'
          [ "${{ github.event.repository.fork }}" == "false" ] && os="$os,\"cuda\""
          os="$os]"
          echo "::set-output name=os::$os"
    outputs:
      os: ${{ steps.setup-os-matrix.outputs.os }}

  build-and-test:
    needs: setup-os-matrix
    strategy:
      matrix:
        os: ${{ fromJson(needs.setup-os-matrix.outputs.os) }}
        library: [ILGPU, ILGPU.Algorithms]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.407
      - name: Pin .NET Core SDK
        run: dotnet new globaljson --sdk-version 3.1.407
      - name: Release Build
        run: dotnet build --configuration=Release -p:TreatWarningsAsErrors=true Src
      - name: CPU Tests
        if: matrix.os != 'cuda'
        run: dotnet test --logger GitHubActions --no-build --configuration=Release Src/${{ matrix.library }}.Tests.CPU
        env:
          ILGPU_CLEAN_TESTS: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
      - name: CUDA Tests
        if: matrix.os == 'cuda'
        run: dotnet test --logger GitHubActions --no-build --configuration=Release Src/${{ matrix.library }}.Tests.Cuda
        env:
          ILGPU_CLEAN_TESTS: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}

  package:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.407
      - name: Pin .NET Core SDK
        run: dotnet new globaljson --sdk-version 3.1.407
      - name: Check version
        id: version
        run: |
          $xpath = "/Project/PropertyGroup/VersionPrefix/text()"
          $main_version = (Select-Xml -path Src/ILGPU/ILGPU.csproj -XPath $xpath).Node.Value
          $algo_version = (Select-Xml -path Src/ILGPU.Algorithms/ILGPU.Algorithms.csproj -XPath $xpath).Node.Value
          if (-not ($main_version -eq $algo_version)) {
            echo "::error ::There is a mismatch between the project version of ILGPU ($main_version) and ILGPU.Algorithms ($algo_version)"
            exit 1
          }

          if ("${{ github.ref }}" -like "refs/tags/v*") {
            $tag = "${{ github.ref }}".SubString(11)
            if (-not ($tag -eq $main_version)) {
              echo "::error ::There is a mismatch between the project version ($main_version) and the tag ($tag)"
              exit 1
            }
          }
          
          echo "::set-output name=version::$main_version"

      - name: Create NuGet packages
        id: package
        run: |
          $version = "${{ steps.version.outputs.version }}"

          if (-not ("${{ github.ref }}" -like "refs/tags/v*")) {
            # WORKAROUND: Add letter prefix to ensure that MSBuild treats
            # the suffix as a string. e.g. '0313071' will fail as an invalid
            # version string, but 'G0313071' will succeeded. It looks like
            # the parser does not like numbers with a leading zero.
            $suffix = 'g' + $(git rev-parse --short HEAD)
            $params = "--version-suffix", $suffix
            $version = "$version-$suffix"
          }

          dotnet pack --configuration=Release @params Src

          echo "::set-output name=version::$version"

      - name: Fix NuGet Symbols Packages
        run: |
          # WORKAROUND: The Symbols packages should only contain Portable
          # PDBs (no Windows PDBs allowed). Transfer net47 pdb from Symbols
          # packages to Main NuGet packages. Can be removed after updating
          # ILGPU from net47 to net472.

          ForEach ($library in "ILGPU", "ILGPU.Algorithms") {
            # Get path to the Main and Symbols NuGet packages
            $releaseDir = './Bin/Release'
            $mainPkgPath = Join-Path $releaseDir "$library.${{ steps.package.outputs.version }}.nupkg"
            $symbolsPkgPath = Join-Path $releaseDir "$library.${{ steps.package.outputs.version }}.snupkg"

            # Transfer net47 pdb from the Symbols to Main NuGet package
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $pdbEntryPath = "lib/net47/$library.pdb"

            $mainPkgZip = [System.IO.Compression.ZipFile]::Open(
              $mainPkgPath,
              'Update')
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile(
              $mainPkgZip,
              "$releaseDir/net47/$library.pdb",
              $pdbEntryPath);
            $mainPkgZip.Dispose()

            $symbolsPkgZip = [System.IO.Compression.ZipFile]::Open(
              $symbolsPkgPath,
              'Update')
            $symbolsPkgZip.GetEntry($pdbEntryPath).Delete();
            $symbolsPkgZip.Dispose()
          }

      - name: Upload NuGet package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: ./Bin/Release/ILGPU*.${{ steps.package.outputs.version }}.*nupkg

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check-style, build-and-test, package]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages
      - name: Publish to NuGet
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
