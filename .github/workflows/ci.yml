name: CI

on:
  push:
  pull_request:

jobs:
  check-style:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check line length
        run: |
          $found = $false
          Foreach ($pattern in "*.cs","*.tt") {
            Foreach ($file in Get-ChildItem -Path Src -Filter $pattern -Recurse -File) {
              If (-Not (($file.Directory.Name -Eq "Resources") -Or (Select-String -Path $file -Pattern "^// disable: max_line_length" -Quiet))) {
                $index = 1
                Foreach ($line in Get-Content $file)
                {
                  If ($line.Length -gt 90) {
                    Write-Host "##[error]${file}:${index}: line too long ($($line.Length) > 90 characters)"
                    $found = $true
                  }
                  $index++
                }
              }
            }
          }
          
          If ($found) {
            Exit 1
          }

  build-and-test:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.300
      - name: Restore tools
        run: dotnet tool restore
        working-directory: ./Src
      - name: Build templates
        # TargetFramework specified so this only runs once rather than per framework
        run: dotnet msbuild -t:TextTemplateTransform -p:TargetFramework=NA Src
      - name: Release Build
        run: dotnet build --configuration=Release -p:TreatWarningsAsErrors=true Src
      - name: CPU Tests
        run: dotnet test --logger GitHubActions --configuration=Release ./Src/ILGPU.Tests.CPU
      - name: Set up NuGet
        if: runner.os == 'Windows'
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'
      - name: Create NuGet package
        if: runner.os == 'Windows'
        run: |
          if ("${{ github.ref }}" -like "refs/tags/v*") {
            $tag = "${{ github.ref }}".SubString(11)
            $version = (Select-Xml -path Src/ILGPU/ILGPU.csproj -XPath "/Project/PropertyGroup/VersionPrefix/text()").node.Value
            if (-not ($tag -eq $version)) {
              echo "There is a mismatch between the project version ($version) and the tag ($tag)"
              exit 1
            }
          } else {
            $params = "--version-suffix", $(git rev-parse --short HEAD)
          }
          dotnet pack --configuration=Release @params Src
      - name: Fix NuGet Symbols Package
        if: runner.os == 'Windows'
        run: |
          # WORKAROUND: The Symbols package should only contain Portable
          # PDBs (no Windows PDBs allowed). Transfer ILGPU.pdb from Symbols
          # package to Main NuGet package. Can be removed after updating
          # ILGPU from net47 to net472.

          # Get path to the Main and Symbols NuGet packages
          $releaseDir = '.\Bin\Release'
          $mainPkgPath =
            Get-ChildItem -Path $releaseDir -Filter ILGPU.*.nupkg `
            | Select-Object -First 1 -ExpandProperty Fullname
          $symbolsPkgPath =
            Get-ChildItem -Path $releaseDir -Filter ILGPU.*.snupkg `
            | Select-Object -First 1 -ExpandProperty Fullname

          # Transfer ILGPU.pdb from the Symbols to Main NuGet package
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $pdbEntryPath = 'lib/net47/ILGPU.pdb'

          $mainPkgZip = [System.IO.Compression.ZipFile]::Open(
            $mainPkgPath,
            'Update')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile(
              $mainPkgZip,
              "$releaseDir\net47\ILGPU.pdb",
              $pdbEntryPath);
          $mainPkgZip.Dispose()

          $symbolsPkgZip = [System.IO.Compression.ZipFile]::Open(
            $symbolsPkgPath,
            'Update')
          $symbolsPkgZip.GetEntry($pdbEntryPath).Delete();
          $symbolsPkgZip.Dispose()

      - name: Upload NuGet package artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: nuget-package
          path: ./Bin/Release/ILGPU.*.*nupkg

  publish-nuget:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check-style, build-and-test]
    runs-on: windows-latest
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-package
      - name: Publish to NuGet
        shell: bash
        run: dotnet nuget push ILGPU.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
