name: CI

on:
  push:
  pull_request:
  schedule:
    # Run daily at 00:00 so we get notified if CI is broken before a pull request
    # is submitted.
    - cron:  '0 0 * * *'

env:
  DOTNET_NOLOGO: true

jobs:

  # Check some basic style rules.
  check-style:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check line length
        run: |
          $found = $false
          Foreach ($pattern in "*.cs","*.tt") {
            Foreach ($file in Get-ChildItem -Path Src -Filter $pattern -Recurse -File) {
              If (-Not (($file.Directory.Name -Eq "Resources") -Or (Select-String -Path $file -Pattern "^// disable: max_line_length" -Quiet))) {
                $index = 1
                Foreach ($line in Get-Content $file)
                {
                  If ($line.Length -gt 90) {
                    Write-Host "##[error]${file}:${index}: line too long ($($line.Length) > 90 characters)"
                    $found = $true
                  }
                  $index++
                }
              }
            }
          }
          
          If ($found) {
            Exit 1
          }
      - name: Check T4 line endings
        run: |
          # WORKAROUND: The TextTransform tool fails when the T4 template ends with a newline.
          $found = $false
          Foreach ($pattern in "*.tt","*.ttinclude") {
            Foreach ($file in Get-ChildItem -Path Src -Filter $pattern -Recurse -File) {
              If ((Get-Content -Raw $file) -match "\r\n$") {
                Write-Host "##[error]${file}: Bad T4 line ending"
                $found = $true
              }
            }
          }
          
          If ($found) {
            Exit 1
          }

  # Setup the OS matrix so that CUDA tests do not run on forks, as it needs self-hosted runners.
  # Skip running on macOS in most cases.
  setup-os-matrix:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ubuntu-latest
    steps:
      - name: Setup OS matrix
        id: setup-os-matrix
        run: |
          os=("ubuntu-latest" "windows-latest")

          # runs on macOS only if there is a push to master, or a tag is 
          # pushed, we do this since macOS builds last too long and ILGPU 
          # is rarely used on a macOS
          (
            [ "${{ github.event_name }}" == "schedule" ] ||
            (
              [ "${{ github.event_name }}" == "push" ] &&
              (
                [ "${{ github.ref }}" == "refs/heads/master" ] ||
                [[ "${{ github.ref }}" =~ "refs/tags/v" ]]  
              )
            )
          ) && os+=("macos-latest")

          [ "${{ github.event.repository.fork }}" == "false" ] && os+=("cuda")

          echo "::set-output name=os::$(jq -cn '$ARGS.positional' --args ${os[@]})"
    outputs:
      os: ${{ steps.setup-os-matrix.outputs.os }}

  # Check that building the entire solution for all target frameworks works.
  build:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup the latest .NET 5 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Build
        run: dotnet build --configuration=Release -p:TreatWarningsAsErrors=true Src

  # Run tests for all supported combinations of OS/library/framework.
  test:
    needs: setup-os-matrix
    strategy:
      matrix:
        os: ${{ fromJson(needs.setup-os-matrix.outputs.os) }}
        library: [ILGPU, ILGPU.Algorithms]
        framework: [netcoreapp3.1, net5.0]
        include:
          - os: windows-latest
            library: ILGPU
            framework: net47
          - os: windows-latest
            library: ILGPU.Algorithms
            framework: net47
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup the latest .NET 5 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      
      - name: Setup the latest .NET Core 3.1 SDK
        if: matrix.framework == 'netcoreapp3.1'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Set test flavor
        id: test-flavor
        shell: bash
        run: echo ::set-output name=flavor::$([[ "${{ matrix.os }}" == "cuda" ]] && echo "Cuda" || echo "CPU")

      - name: Build and test
        run: dotnet test --configuration=Release --framework=${{ matrix.framework }} -p:TreatWarningsAsErrors=true --logger GitHubActions Src/${{ matrix.library }}.Tests.${{ steps.test-flavor.outputs.flavor }}
        env:
          ILGPU_CLEAN_TESTS: ${{ github.event_name == 'schedule' || (github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))) }}

  # Create the NuGet packages, with fixes for portable symbols.
  package:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Jobs that depend on this one will be skipped too.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup the latest .NET 5 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Check version
        id: version
        run: |
          $xpath = "/Project/PropertyGroup/VersionPrefix/text()"
          $main_version = (Select-Xml -path Src/ILGPU/ILGPU.csproj -XPath $xpath).Node.Value
          $algo_version = (Select-Xml -path Src/ILGPU.Algorithms/ILGPU.Algorithms.csproj -XPath $xpath).Node.Value
          if (-not ($main_version -eq $algo_version)) {
            echo "::error ::There is a mismatch between the project version of ILGPU ($main_version) and ILGPU.Algorithms ($algo_version)"
            exit 1
          }

          if ("${{ github.ref }}" -like "refs/tags/v*") {
            $tag = "${{ github.ref }}".SubString(11)
            if (-not ($tag -eq $main_version)) {
              echo "::error ::There is a mismatch between the project version ($main_version) and the tag ($tag)"
              exit 1
            }
          }
          
          echo "::set-output name=version::$main_version"

      - name: Create NuGet packages
        id: package
        run: |
          $version = "${{ steps.version.outputs.version }}"

          if (-not ("${{ github.ref }}" -like "refs/tags/v*")) {
            $suffix = "preview-$(Get-Date -Format yyyyMMddHHmmss -AsUTC)-$(git rev-parse --short HEAD)"
            $params = "--version-suffix", $suffix
            $version = "$version-$suffix"
          }

          dotnet pack --configuration=Release @params Src

          echo "::set-output name=version::$version"

      - name: Fix NuGet Symbols Packages
        run: |
          # WORKAROUND: The Symbols packages should only contain Portable
          # PDBs (no Windows PDBs allowed). Transfer net47 pdb from Symbols
          # packages to Main NuGet packages. Can be removed after updating
          # ILGPU from net47 to net472.

          ForEach ($library in "ILGPU", "ILGPU.Algorithms") {
            # Get path to the Main and Symbols NuGet packages
            $releaseDir = './Bin/Release'
            $mainPkgPath = Join-Path $releaseDir "$library.${{ steps.package.outputs.version }}.nupkg"
            $symbolsPkgPath = Join-Path $releaseDir "$library.${{ steps.package.outputs.version }}.snupkg"

            # Transfer net47 pdb from the Symbols to Main NuGet package
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $pdbEntryPath = "lib/net47/$library.pdb"

            $mainPkgZip = [System.IO.Compression.ZipFile]::Open(
              $mainPkgPath,
              'Update')
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile(
              $mainPkgZip,
              "$releaseDir/net47/$library.pdb",
              $pdbEntryPath);
            $mainPkgZip.Dispose()

            $symbolsPkgZip = [System.IO.Compression.ZipFile]::Open(
              $symbolsPkgPath,
              'Update')
            $symbolsPkgZip.GetEntry($pdbEntryPath).Delete();
            $symbolsPkgZip.Dispose()
          }

      - name: Upload NuGet package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: ./Bin/Release/ILGPU*.${{ steps.package.outputs.version }}.*nupkg

    outputs:
      tag: ${{ steps.version.outputs.version }}

  # Virtual job that can be configured as a required check before a PR can be
  # merged.
  all-required-checks-done:
    needs: [check-style, build, test, package]
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"

  # Publish a preview version of the NuGet packages on feedz.io when there is
  # a push to master.
  publish-preview:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && github.event.repository.fork == 'false'
    needs: [all-required-checks-done]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages
      - name: Publish to FeedzIO
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.FEEDZIO_API_KEY }} --source https://f.feedz.io/ilgpu/preview/nuget/index.json


  # Create a GitHub release and publish the NuGet packages to nuget.org when
  # a tag is pushed.
  publish-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.event.repository.fork == 'false'
    needs: [all-required-checks-done]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages

      # if tag contains "-" treat it as pre-release
      # example: 1.0.0-beta1
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.package.outputs.version }}
          draft: true
          prerelease: ${{ contains(needs.package.outputs.version, '-') }}
          files: "*.nupkg"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
